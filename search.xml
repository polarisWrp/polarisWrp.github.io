<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Js闭包例子补充</title>
      <link href="/2022/07318869.html"/>
      <url>/2022/07318869.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-闭包的定义"><a href="#1-闭包的定义" class="headerlink" title="1. 闭包的定义"></a>1. 闭包的定义</h2><ul><li>一个函数和对其周围状态<code>（lexical environment，词法环境）</code>的引用捆绑在一起（或者说函数被引用包围），这样的组合就是<code>闭包（closure） </code>;</li><li>闭包让你可以在一个<code>内层函数</code>中访问到其<code>外层函数的作用域</code>;</li><li>在 JavaScript 中，每当创建一个函数，闭包就会在函数创建的同时被创建出来。</li></ul><h3 id="1-1-栗子1形如："><a href="#1-1-栗子1形如：" class="headerlink" title="1.1 栗子1形如："></a>1.1 栗子1形如：</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">function</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// name 是一个被 init 创建的局部变量</span>    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"Mozilla"</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// displayName() 是内部函数，一个闭包</span>    <span class="token keyword">function</span> <span class="token function">displayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// 使用了父函数中声明的变量</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token function">displayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="1-2-栗子1改写："><a href="#1-2-栗子1改写：" class="headerlink" title="1.2 栗子1改写："></a>1.2 栗子1改写：</h3><ul><li>变量name依旧可以访问的原因？<ol><li>js中的函数会形成闭包；</li><li>闭包是由<code>函数</code>以及<code>声明该函数的词法环境</code>组合而成，这个环境包含了这个<code>闭包创建时作用域</code>内的任何局部变量；</li><li>栗子中，<code>变量myFn</code> 是执行<code>makeFunc函数</code>时创建的<code>displayName函数实例的引用</code>，而<code>displayName函数实例</code>维持了一个对它的<code>词法环境</code>（变量name在其中）的引用</li><li>所以当 myFn 被调用时，name属性依旧可以访问</li></ol></li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">function</span> <span class="token function">makeFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"Mozilla"</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 闭包函数 displayName</span>      <span class="token keyword">function</span> <span class="token function">displayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'2222'</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> displayName<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">var</span> myFn <span class="token operator">=</span> <span class="token function">makeFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">myFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="1-3-栗子2"><a href="#1-3-栗子2" class="headerlink" title="1.3 栗子2:"></a>1.3 栗子2:</h3><ul><li>定义一个函数<code>makeAdder</code>,该函数接收一个参数 x，返回一个接收y参数的匿名函数，这个匿名函数返回x+y</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token comment" spellcheck="true">// 本质上 makeAdder是一个工厂函数，它创建了将指定的值和他的参数相加求和的函数</span>  <span class="token keyword">function</span> <span class="token function">makeAdder</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// add5 和 add10 都是闭包。它们共享相同的函数定义，但是保存了不同的词法环境。</span>  <span class="token comment" spellcheck="true">// 在 add5 的环境中，x 为 5。而在 add10 中，x 则为 10。</span>  <span class="token keyword">var</span> add5 <span class="token operator">=</span> <span class="token function">makeAdder</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> add10 <span class="token operator">=</span> <span class="token function">makeAdder</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'55555555'</span><span class="token punctuation">,</span> add5<span class="token punctuation">,</span> <span class="token function">add5</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 7</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'101010101010'</span><span class="token punctuation">,</span> add10<span class="token punctuation">,</span> <span class="token function">add10</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 12</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="1-4-使用闭包模拟私有方法"><a href="#1-4-使用闭包模拟私有方法" class="headerlink" title="1.4 使用闭包模拟私有方法"></a>1.4 使用闭包模拟私有方法</h3><ul><li>定义函数思路：<ol><li>使用闭包定义公共函数，并且使其可以访问私有函数和变量;</li><li>闭包函数只定义了一个词法环境，为三个函数所共用;<br>  2.1 环境中存在两个私有项，变量<code>privateCounter</code>和方法<code>changVal</code><br>  2.2 这两个私有项外部无法访问，只能通过定义的三个匿名函数访问</li><li>请注意两个计数器 <code>Counter1 和 Counter2</code> 是如何维护它们各自的独立性的;</li><li>每个闭包都是引用自己词法作用域内的变量 privateCounter ;</li><li>每次调用其中一个计数器时，通过改变这个变量的值，会改变这个闭包的<code>词法环境</code>;</li><li>然而在一个闭包内对变量的修改，不会影响到另外一个闭包中的变量。</li></ol></li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> Counter <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> privateCounter <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">function</span> <span class="token function">changVal</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>      privateCounter <span class="token operator">+</span><span class="token operator">=</span> val    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      increment<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">changVal</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      decrement<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">changVal</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      value<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> privateCounter      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Counter<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* logs 0 */</span>  Counter<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Counter<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Counter<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* logs 2 */</span>  Counter<span class="token punctuation">.</span><span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Counter<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* logs 1 */</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Async与Await</title>
      <link href="/2022/073137522.html"/>
      <url>/2022/073137522.html</url>
      
        <content type="html"><![CDATA[<h1 id="async与await函数"><a href="#async与await函数" class="headerlink" title="async与await函数"></a>async与await函数</h1><h2 id="1-async函数"><a href="#1-async函数" class="headerlink" title="1. async函数"></a>1. async函数</h2><h3 id="1-1-基本概念"><a href="#1-1-基本概念" class="headerlink" title="1.1 基本概念"></a>1.1 基本概念</h3><ul><li>它是 <code>AsyncFunction </code>构造函数的实例 </li><li>async与await能够以更简洁的方式写出<code>基于Promise</code>的异步行为，不需要使用链式调用</li></ul><h3 id="1-2-async-函数使用"><a href="#1-2-async-函数使用" class="headerlink" title="1.2 async 函数使用"></a>1.2 async 函数使用</h3><ul><li>async函数始终返回一个Promise对象，返回结果要么是 <code>resloved或是rejected</code></li><li>如果一个 async 函数的返回值看起来不是 promise，那么它将会被隐式地包装在一个 promise 中</li><li><code>async/await </code>的行为类似于 生成器和promise搭配使用</li></ul><p>使用栗子：</p><pre class=" language-javascript"><code class="language-javascript"> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* ------等价于------ */</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="1-3-async-函数执行"><a href="#1-3-async-函数执行" class="headerlink" title="1.3 async 函数执行"></a>1.3 async 函数执行</h3><ul><li>async 函数的函数体可以被看作是<code>由 0 个或者多个 await 表达式</code>分割开来的。</li><li>从第一行代码直到（并包括）第一个 await 表达式（如果有的话）都是同步运行的。</li><li>一个不含 <code>await </code>表达式的 <code>async </code>函数是会<code>同步运行</code>的。</li><li>如果函数体内有一个 <code>await </code>表达式，async 函数就一定会<code>异步执行</code>。</li></ul><p>单个<code>await</code>函数代码栗子：</p><ul><li>在 await 表达式之后的代码可以认为是存在链式调用的then回调中</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* ---------等价于-------- */</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> undefined<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>多个<code>await</code>函数代码栗子：</p><ul><li>多个await表达式都将加入<code>链式调用</code>的 then 回调中，返回值将作为<code>最后一个then回调</code>的返回值<ol><li>foo函数的第一行将会同步执行，await 将会等待 promise 的结束。然后暂停通过foo的进程，并将控制权交还给调用foo的函数。</li><li>一段时间后，当第一个 promise 完结的时候，控制权将重新回到 foo 函数内。示例中将会将1（promise 状态为 fulfilled）作为结果返回给 await 表达式的左边即result1。接下来函数会继续进行，到达第二个 await 区域，此时foo函数的进程将再次被暂停。</li><li>一段时间后，同样当第二个 promise 完结的时候，result2将被赋值为2，之后函数将会正常同步执行，将默认返回undefined 。</li></ol></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> result1 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> result2 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="1-4-总结"><a href="#1-4-总结" class="headerlink" title="1.4 总结"></a>1.4 总结</h3><ul><li>promise 链不是一次就构建好的，相反，<code>promise 链</code>是分阶段构造的，因此在处理异步函数时必须注意对错误函数的处理。</li><li>对于多个异步函数的错误处理，可以使用promise.all进行统一处理 <code>Promise.all[fn1(), fn2()]</code></li></ul><h2 id="2-await函数"><a href="#2-await函数" class="headerlink" title="2. await函数"></a>2. await函数</h2><h3 id="2-1-基本概念"><a href="#2-1-基本概念" class="headerlink" title="2.1 基本概念"></a>2.1 基本概念</h3><ul><li>await用于<code>等待一个Promise对象</code>，只用于<code> async function</code>函数</li></ul><h3 id="2-2-基础使用"><a href="#2-2-基础使用" class="headerlink" title="2.2 基础使用"></a>2.2 基础使用</h3><ul><li><p>语法上 [自定义变量] &#x3D; await 表达式</p><ol><li>表达式： 一个Promise对象或者任意需要等待的值<ol start="2"><li>自定义变量： 用于接收Promise对象的返回结果，如果不是Promise对象，那么返回值本身</li></ol></li></ol></li></ul><h4 id="2-2-1-await表达式"><a href="#2-2-1-await表达式" class="headerlink" title="2.2.1 await表达式"></a>2.2.1 await表达式</h4><ul><li>await 表达式会<code>暂定 async function</code> 的执行，等待Promise处理完成</li></ul><p>代码栗子：</p><ul><li><p>处理情况： 正常处理，失败处理，await后的值不是一个Promise</p></li><li><p>Promise正常处理（fulfilled）,那么<code>回调reslove函数参数</code>作为 await 表达式的值，继续执行 async function</p></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">resolveAfter2Seconds</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>resolve <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">resolveAfter2Seconds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 10</span><span class="token punctuation">}</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>若 Promise 处理异常 (rejected)，await 表达式会把 Promise 的异常原因抛出。</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">f3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> z <span class="token operator">=</span> <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 30</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">f3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>如果 await 操作符后的表达式的值不是一个 Promise，await 会把该值转换为已正常处理的 Promise,并且等待其处理结果。</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token number">20</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 20</span><span class="token punctuation">}</span><span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 以上方法体中</span><span class="token keyword">await</span> <span class="token number">20</span> 等价于  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reslove</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> undefined<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Js原型（prototype）</title>
      <link href="/2022/073139800.html"/>
      <url>/2022/073139800.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、原型"><a href="#一、原型" class="headerlink" title="一、原型"></a>一、原型</h2><h3 id="1-基本认知"><a href="#1-基本认知" class="headerlink" title="1. 基本认知"></a>1. 基本认知</h3><ul><li>JavaScript 常被描述为一种基于原型的语言 (prototype-based language)——每个对象拥有一个原型对象，对象以其原型为模板、从原型继承方法和属性。函数对象会有<code>prototype，__proto__</code>,普通对象只有<code>__proto__</code>形如：<code>let a =&#123;&#125;</code></li><li>原型对象也可能拥有原型，并从中继承方法和属性，一层一层、以此类推。这种关系常被称为原型链 (prototype chain)，</li><li>它解释了为何一个对象会拥有定义在其他对象中的属性和方法。</li></ul><h3 id="2-代码栗子"><a href="#2-代码栗子" class="headerlink" title="2. 代码栗子"></a>2. 代码栗子</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>doSomething<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>foo <span class="token operator">=</span><span class="token string">'foos'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'....'</span><span class="token punctuation">,</span> doSomething<span class="token punctuation">.</span>prototype <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 控制台输出如下：</span>Object    foo<span class="token punctuation">:</span> <span class="token string">"foos"</span>    constructor<span class="token punctuation">:</span> ƒ <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">[</span><span class="token punctuation">[</span>Prototype<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span> Object</code></pre><ul><li>构造函数实例的 <code>实例.__proto__</code> 就是<code> 构造函数.prototype</code></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> temp<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> doSomething<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span></code></pre><h3 id="3-访问对象属性时的查找流程"><a href="#3-访问对象属性时的查找流程" class="headerlink" title="3. 访问对象属性时的查找流程"></a>3. 访问对象属性时的查找流程</h3><ul><li>依据 第二点的代码栗子来说：<ol><li>原型链中的方法和属性没有被复制到其他对象——它们被访问需要通过前面所说的<code>原型链</code> 的方式</li><li>有官方的方法用于直接访问一个对象的原型对象——原型链中的“连接”被定义在一个内部属性中，在 JavaScript 语言标准中用<code>[[prototype]]</code>表示</li><li>大多数现代浏览器还是提供了一个名为 <code>__proto__</code>（前后各有 2 个下划线）的属性，其包含了对象的原型</li></ol></li></ul><h3 id="4-继承的原则"><a href="#4-继承的原则" class="headerlink" title="4 继承的原则"></a>4 继承的原则</h3><ul><li>继承的属性和方法是定义在 <code>prototype</code> 属性之上的（你可以称之为子命名空间 <code>(sub namespace)</code> ）——那些以 <code>Object.prototype. </code>开头的属性；不是以 <code>Object. </code>开头的属性。</li><li><code>Object.is()、Object.keys()</code>，以及其他不在 <code>prototype </code>对象内的成员，不会被<code>对象实例</code>或<code>继承自 Object() 的对象类型</code>所继承；这些方法、属性仅能被 <code>Object()构造器</code> 自身使用。</li></ul><h3 id="5-原型对象与this"><a href="#5-原型对象与this" class="headerlink" title="5 原型对象与this"></a>5 原型对象与this</h3><ul><li><code>this </code>关键字不是指向当前对象的原型对象，（原型对象是一个内部对象，应当使用 <code>__proto__ </code>访问）。</li><li><code>prototype </code>属性包含（指向）一个对象，我们可以在这个对象中<code>定义需要被继承的成员</code>。</li></ul><h4 id="5-1-Object-create方法"><a href="#5-1-Object-create方法" class="headerlink" title="5.1  Object.create方法"></a>5.1  Object.create方法</h4><ul><li><code>Object.create()</code> 用于创建新的对象实例</li><li>栗子：以<code>person1</code>为原型对象创建 <code>person2</code>实例</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> person2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>person1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 通过 person2.__proto__ 可以返回 person1</span></code></pre><h4 id="5-2-constructor属性"><a href="#5-2-constructor属性" class="headerlink" title="5.2 constructor属性"></a>5.2 constructor属性</h4><ul><li>每一个<code>实例对象都从原型中继承</code>一个<code>constructor</code>属性，该属性指向了<code>构造该实例对象的构造函数</code></li><li>上面 5.1 的代码栗子：</li></ul><pre class=" language-javascript"><code class="language-javascript">person1<span class="token punctuation">.</span>constructor person2<span class="token punctuation">.</span>constructor<span class="token comment" spellcheck="true">// 以上两个都将返回构造函数 Person() </span></code></pre><h2 id="二、类和构造函数"><a href="#二、类和构造函数" class="headerlink" title="二、类和构造函数"></a>二、类和构造函数</h2><h3 id="1-类"><a href="#1-类" class="headerlink" title="1. 类"></a>1. 类</h3><ul><li>使用 class 关键字声明一个类</li></ul><h4 id="1-1-基础代码栗子"><a href="#1-1-基础代码栗子" class="headerlink" title="1.1 基础代码栗子"></a>1.1 基础代码栗子</h4><ul><li>定义一个类 <code>Person</code></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//定义的name属性，可省略，因为在构造器 this.name=name会在初始化name属性前是自动创建</span>    name     <span class="token comment" spellcheck="true">// 构造函数通过constructor来声明，与在类的外面声明构造函数相同</span>    <span class="token comment" spellcheck="true">/*           1. 创建一个新的对象          2. 将this的指向绑定到新的对象          3. 执行构造函数中的代码          4. 返回值这个对象        */</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 需要name参数的构造函数</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 自定义方法，使用了 this 引用了name属性</span>    <span class="token function">introduceSelf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>            <span class="token template-string"><span class="token string">`Hi! I'm </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>实例化一个对象</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="1-2-声明类时不需要初始化任何属性的情况"><a href="#1-2-声明类时不需要初始化任何属性的情况" class="headerlink" title="1.2 声明类时不需要初始化任何属性的情况"></a>1.2 声明类时不需要初始化任何属性的情况</h4><ul><li>如果不需要任何属性初始化，那么可以省略构造函数，形如：</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'go to sleep'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="2-继承"><a href="#2-继承" class="headerlink" title="2. 继承"></a>2. 继承</h3><ul><li><code>es6</code>中类的继承使用<code>extends</code>关键字声明继承一个类</li><li><code>Person</code>类为<code>1.1</code>中定义的栗子<ol><li>继承自父类构造函数首先使用<code>super()</code>调用父类构造函数，传递父类参数</li><li>在父类接收入参后设置改属性，之后子类构造函数设置自身属性</li></ol></li></ul><pre class=" language-javascript"><code class="language-javascript"> <span class="token keyword">class</span> <span class="token class-name">Doctor</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>     doctors     <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> doctors<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// super() 调用父类构造函数，并且传递 name参数</span>         <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">// 父类构造函数会设置name属性，之后 Doctor的构造函数接着设置 doctors 属性</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>doctors <span class="token operator">=</span> doctors     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">// 定义同名方法用于覆盖父类方法</span>     <span class="token function">introduceSelf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>             <span class="token template-string"><span class="token string">`Hi! I'm </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>         <span class="token punctuation">)</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">// 扩展新方法</span>     <span class="token function">skill</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'show skill..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><h3 id="3-封装"><a href="#3-封装" class="headerlink" title="3. 封装"></a>3. 封装</h3><ul><li><code>js</code>在类中声明私有属性的方式为<code>#</code>符号, <code>ts</code>中使用 <code>private</code>关键字</li><li>私有属性只能在类的内部访问</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 在内部使用 # 定义私有属性</span>    #year    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> year<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>#year <span class="token operator">=</span> year<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">introduceSelf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Hi! I'm </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, and I'm in year </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>#year<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    #<span class="token function">canStudyArchery</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>#year <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 私有属性只能在类的内部访问</span><span class="token keyword">const</span> summers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">'Summers'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>summers<span class="token punctuation">.</span><span class="token function">introduceSelf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Hi! I'm Summers, and I'm in year </span><span class="token comment" spellcheck="true">// summers.canStudyArchery(); // 私有方法外部无法访问</span><span class="token comment" spellcheck="true">// summers.#year; // 类的外部访问不了私有属性</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Js之this</title>
      <link href="/2022/073129671.html"/>
      <url>/2022/073129671.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-基本认知"><a href="#1-基本认知" class="headerlink" title="1. 基本认知"></a>1. 基本认知</h2><ul><li>大多数情况下，函数的调用方式决定了this的值</li><li>this不能在执行期间被赋值，每次函数被调用时this的值可能不同</li><li>es5可以通过bind方法设置函数this</li><li>es6引入箭头函数，箭头函数不提供自身的this(this的值将保持为闭合词法上下文的值)</li></ul><h2 id="2-this-语法"><a href="#2-this-语法" class="headerlink" title="2. this 语法"></a>2. this 语法</h2><ul><li>this是当前执行上下文（global,function, eval）的一个属性，<code>非严格模式</code>下总是指向一个对象，<code>严格模式</code>下可以是任意值</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> test <span class="token operator">=</span> <span class="token punctuation">{</span>    prop<span class="token punctuation">:</span> <span class="token number">42</span><span class="token punctuation">,</span>    func<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>prop    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// this 指向的是 test对象</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// expected output: 42</span></code></pre><h3 id="2-1-全局上下文"><a href="#2-1-全局上下文" class="headerlink" title="2.1 全局上下文"></a>2.1 全局上下文</h3><ul><li>全局上下文，不论是否在严格模式下，在全局执行环境中（函数体外部），this都指向全局对象 </li><li>可以使用 <code>globalThis</code> 获取全局对象，无论你的代码是否在当前上下文运行</li></ul><h4 id="2-1-1-浏览器中的全局对象"><a href="#2-1-1-浏览器中的全局对象" class="headerlink" title="2.1.1 浏览器中的全局对象"></a>2.1.1 浏览器中的全局对象</h4><ul><li>浏览器中，window对象就是全局对象</li></ul><pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> window<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>a <span class="token operator">=</span> <span class="token number">88</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 88</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>globalThis<span class="token punctuation">,</span> <span class="token string">'获取全局对象'</span><span class="token punctuation">)</span></code></pre><h3 id="2-2-函数上下文"><a href="#2-2-函数上下文" class="headerlink" title="2.2 函数上下文"></a>2.2 函数上下文</h3><ul><li>在函数内部，<code>this</code>的值取决于函数被调用的方式</li></ul><h4 id="2-2-1非严格模式下："><a href="#2-2-1非严格模式下：" class="headerlink" title="2.2.1非严格模式下："></a>2.2.1非严格模式下：</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//在浏览器中：</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'brower'</span><span class="token punctuation">,</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> window<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//在浏览器中，全局对象是 window</span><span class="token comment" spellcheck="true">//在 Node 中：</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Node'</span><span class="token punctuation">,</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> globalThis<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// globalThis有着定时器setTimeout等内置方法</span></code></pre><h4 id="2-2-2-严格模式下"><a href="#2-2-2-严格模式下" class="headerlink" title="2.2.2 严格模式下"></a>2.2.2 严格模式下</h4><ul><li>如果进入执行环境时没有设置 this 的值，this 会保持为 undefined</li><li>想要把 this的值从一个环境传到另一个，需要call,apply方法</li><li>以下栗子因为 f2函数 是被直接调用的，而不是作为对象的属性或方法调用的（如 <code>window.f2()</code>）</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token string">'use strict'</span> <span class="token comment" spellcheck="true">// 这里是严格模式</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'严格模式：'</span><span class="token punctuation">,</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> undefined<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span></code></pre><h3 id="2-3-类上下文"><a href="#2-3-类上下文" class="headerlink" title="2.3 类上下文"></a>2.3 类上下文</h3><h4 id="2-3-1-基本概念"><a href="#2-3-1-基本概念" class="headerlink" title="2.3.1 基本概念"></a>2.3.1 基本概念</h4><ul><li>this在类中与函数中类似，类的本质也是函数，但是也还有一定区别</li><li>在类的构造函数中，this是一个常规对象，类中所有<code>非静态方法</code>都会被添加到<code>this的原型</code>中</li><li><code>静态方法</code>不是this的属性，他们只是类自身的属性</li></ul><p>代码栗子：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> proto <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'属性名：'</span><span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>proto<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token function">second</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 静态方法只是类自身的属性</span>    <span class="token keyword">static</span> <span class="token function">third</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ['constructor', 'first', 'second']</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'实例化：'</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span></code></pre><h4 id="2-3-2-派生类"><a href="#2-3-2-派生类" class="headerlink" title="2.3.2 派生类"></a>2.3.2 派生类</h4><ul><li>派生类不像基类的构造函数，派生类的构造函数<code>没有初始的this绑定</code>；</li><li>在<code>构造函数中调用super()</code>会生成一个this绑定,等价于在派生类中实例化一个基类实例;形如：<code>this = new Base()</code></li><li>super()之前引用this会抛出错误</li><li>派生类<code>不能在调用super之前返回</code>，除非构造函数返回的是一个对象或者没有构造函数</li></ul><p>代码栗子：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Good</span> <span class="token keyword">extends</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">AlsoGood</span> <span class="token keyword">extends</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">5</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//作为 Base的派生类，没有调用 super并且存在构造函数的情况下没有返回对象；实例化对象时报错</span><span class="token keyword">class</span> <span class="token class-name">Bad</span> <span class="token keyword">extends</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'------start------'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Good</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AlsoGood</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Bad</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 报错 Uncaught ReferenceError</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'----------end--------'</span><span class="token punctuation">)</span></code></pre><h2 id="3-this和对象转换"><a href="#3-this和对象转换" class="headerlink" title="3. this和对象转换"></a>3. this和对象转换</h2><ul><li>非严格模式下使用 call 和 apply 时，如果用作 this 的值不是对象，则会被尝试转换为对象。</li><li>null 和 undefined 被转换为全局对象</li><li>原始值如 7 或 ‘foo’ 会使用相应构造函数转换为对象。因此 7 会被转换为 <code>new Number(7) </code>生成的对象，字符串 ‘foo’ 会转换为 <code>new String(&#39;foo&#39;)</code> 生成的对象</li></ul><h3 id="3-1-call"><a href="#3-1-call" class="headerlink" title="3.1 call"></a>3.1 call</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>bar<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [object Number]</span>bar<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [object String]</span>bar<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [object global]</span></code></pre><h3 id="3-1-bind"><a href="#3-1-bind" class="headerlink" title="3.1 bind"></a>3.1 bind</h3><ul><li>调用<code>f.bind(someObject)</code>会创建一个与 f 具有<code>相同函数体和作用域</code>的函数</li><li>但是在这个<code>新函数中</code>，<code>this</code>将永久地被绑定到了bind的第一个参数，无论这个函数是如何被调用的。</li></ul><pre class=" language-javascript"><code class="language-javascript"> <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token punctuation">}</span><span class="token keyword">var</span> g <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token string">'azerty'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// azerty</span><span class="token keyword">var</span> h <span class="token operator">=</span> g<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token string">'yoo'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// bind 只生效一次！</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// azerty</span></code></pre><h2 id="4-箭头函数"><a href="#4-箭头函数" class="headerlink" title="4. 箭头函数"></a>4. 箭头函数</h2><h3 id="4-1-箭头函数中的this"><a href="#4-1-箭头函数中的this" class="headerlink" title="4.1 箭头函数中的this"></a>4.1 箭头函数中的this</h3><ul><li>在箭头函数中，<code>this</code>与<code>封闭词法环境的this</code>保持一致</li><li>在全局代码中，它将被设置为全局对象：</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> globalObject <span class="token operator">=</span> <span class="token keyword">this</span><span class="token keyword">var</span> kkk <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'箭头：'</span><span class="token punctuation">,</span> <span class="token function">kkk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> globalObject<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span> <span class="token comment" spellcheck="true">// 1. 如果将this传递给call、bind、或者apply来调用箭头函数，它将被忽略。</span><span class="token comment" spellcheck="true">// 2. 不过你仍然可以为调用添加参数，不过第一个参数（thisArg）应该设置为null。</span><span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span> kkk2<span class="token punctuation">:</span> kkk <span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>    <span class="token string">'k...'</span><span class="token punctuation">,</span>    obj2<span class="token punctuation">.</span><span class="token function">kkk2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> globalThis<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//true</span><span class="token comment" spellcheck="true">// 使用call来设置this</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>    <span class="token string">'call...'</span><span class="token punctuation">,</span>    kkk<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span> <span class="token operator">===</span> globalThis<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 使用bind来设置this</span>ppp <span class="token operator">=</span> kkk<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>    <span class="token string">'bind...'</span><span class="token punctuation">,</span>    <span class="token function">ppp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> globalThis<span class="token punctuation">)</span></code></pre><h3 id="4-2-普通函数使用箭头函数"><a href="#4-2-普通函数使用箭头函数" class="headerlink" title="4.2 普通函数使用箭头函数"></a>4.2 普通函数使用箭头函数</h3><ul><li>箭头函数this，永久绑定到它外层函数的this</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> temp <span class="token operator">=</span> <span class="token punctuation">{</span>    bar<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span>        <span class="token keyword">return</span> x    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><ul><li>调用temp中bar函数，将它的this绑定到temp</li><li>将返回函数的引用赋值给fn</li></ul><p>栗子形如：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> fn <span class="token operator">=</span> temp<span class="token punctuation">.</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'temp...'</span><span class="token punctuation">,</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> temp<span class="token punctuation">)</span></code></pre><ul><li>但是如果上面的<code> fn</code>只是引用了temp的方法，并没有调用，那么<code>this</code>指向的就是全局对象</li><li>这里调用之后，<code>fn1</code>的this继承自bar</li></ul><p>栗子形如：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> fn1 <span class="token operator">=</span> temp<span class="token punctuation">.</span>bar<span class="token comment" spellcheck="true">// 输出fn1，得到是bar函数， fn1()得到的是 ()=>this, fn1()()得到的是全局对象</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'temp。。。'</span><span class="token punctuation">,</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="5-原型链、构造函数、类…-中的this"><a href="#5-原型链、构造函数、类…-中的this" class="headerlink" title="5.(原型链、构造函数、类…)中的this"></a>5.(原型链、构造函数、类…)中的this</h2><h3 id="5-1-原型链中的this"><a href="#5-1-原型链中的this" class="headerlink" title="5.1 原型链中的this"></a>5.1 原型链中的this</h3><ul><li>代码栗子</li></ul><pre class=" language-javascript"><code class="language-javascript"> <span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span>     f<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>b     <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 用于创建一个新对象，使用现有对象作为新创建对象的原型</span> <span class="token keyword">var</span> p <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> p<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span> p<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">4</span><span class="token comment" spellcheck="true">// 对象 p 没有属于它自己的 f 属性，它的 f 属性继承自它的原型</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这是p。。。。'</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 5</span></code></pre><h3 id="5-2-getter与setter中的this"><a href="#5-2-getter与setter中的this" class="headerlink" title="5.2 getter与setter中的this"></a>5.2 getter与setter中的this</h3><ul><li>用作 <code>getter 或 setter </code>的函数都会把 <code>this</code> 绑定到设置或获取属性的对象</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>b <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>c<span class="token punctuation">}</span><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span>    a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    b<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    c<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>    <span class="token keyword">get</span> <span class="token function">average</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>b <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>c<span class="token punctuation">)</span> <span class="token operator">/</span>            <span class="token number">3</span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> <span class="token string">'sum'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token keyword">get</span><span class="token punctuation">:</span> sum<span class="token punctuation">,</span>    enumerable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    configurable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>average<span class="token punctuation">,</span> o<span class="token punctuation">.</span>sum<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// logs 2, 6</span></code></pre><h3 id="5-3-构造函数中的this"><a href="#5-3-构造函数中的this" class="headerlink" title="5.3 构造函数中的this"></a>5.3 构造函数中的this</h3><ul><li>虽然构造函数返回的默认值是 this 所指的那个对象，</li><li>但它仍可以手动返回（也就是构造函数内 return出一个对象）其他的对象（如果返回值不是一个对象，则返回 this 对象）</li><li>栗子：</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">MyConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 函数实体写在这里</span>    <span class="token comment" spellcheck="true">// 根据需要在 this 上创建属性，然后赋值给它们，比如：</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>fum <span class="token operator">=</span> <span class="token string">"nom"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 等等...</span>    <span class="token comment" spellcheck="true">// 如果函数具有返回对象的 return 语句，return返回的对象将是 new 表达式的结果。</span>    <span class="token comment" spellcheck="true">// 否则，表达式的结果是当前绑定到 this 的对象。</span><span class="token punctuation">}</span></code></pre><ul><li>代码栗子</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">37</span><span class="token punctuation">}</span><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// logs 37</span><span class="token keyword">function</span> <span class="token function">C2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">37</span>    <span class="token comment" spellcheck="true">// return了对象之后，this.a=37相当于被废弃了，但是不会对外界造成影响</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">38</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">C2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// logs 38</span></code></pre><h3 id="5-4-类中的this"><a href="#5-4-类中的this" class="headerlink" title="5.4 类中的this"></a>5.4 类中的this</h3><ul><li>类和其他普通函数一样，<code>方法中的 this 值</code>取决于它们如何被调用。</li><li>也可以通过<code>bind</code>方法让类中的 this 值总是指向这个类实例</li></ul><p>代码形如：</p><pre class=" language-javascript"><code class="language-javascript"> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>     <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 使用bind 绑定sayBye方法</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>sayBye <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sayBye<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span>     <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>             <span class="token template-string"><span class="token string">`Hello from </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>         <span class="token punctuation">)</span>     <span class="token punctuation">}</span>     <span class="token function">sayBye</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>             <span class="token template-string"><span class="token string">`Bye from </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>         <span class="token punctuation">)</span>     <span class="token punctuation">}</span>     <span class="token keyword">get</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token string">'Ferrari'</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Bird</span> <span class="token punctuation">{</span>    <span class="token keyword">get</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">'Tweety'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> bird <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bird</span><span class="token punctuation">(</span><span class="token punctuation">)</span>car<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Hello from Ferrari</span>bird<span class="token punctuation">.</span>sayHi <span class="token operator">=</span> car<span class="token punctuation">.</span>sayHibird<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Hello from Tweety</span><span class="token comment" spellcheck="true">// sayBye方法在 Car类中通过bind绑定了this指向</span>bird<span class="token punctuation">.</span>sayBye <span class="token operator">=</span> car<span class="token punctuation">.</span>sayByebird<span class="token punctuation">.</span><span class="token function">sayBye</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 输出了 Bye from Ferrari 而不是 Tweety</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 上下文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Js之变量提升</title>
      <link href="/2022/07313247.html"/>
      <url>/2022/07313247.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、常见的变量提升场景"><a href="#一、常见的变量提升场景" class="headerlink" title="一、常见的变量提升场景"></a>一、常见的变量提升场景</h2><h3 id="1-1-函数的一般使用方式"><a href="#1-1-函数的一般使用方式" class="headerlink" title="1.1 函数的一般使用方式"></a>1.1 函数的一般使用方式</h3><ul><li>一般使用函数，都是先声明再调用</li><li>但是先声明再调用依旧正常输出，原因就是由于执行上下文的工作方式造成的</li></ul><p>形如：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">catName</span><span class="token punctuation">(</span><span class="token string">'北极星'</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">catName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这是：'</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><ul><li>变量提升也适用于其他数据类型和变量，变量可以在声明之前进行初始化和使用；但是需要先初始化</li><li>函数和变量的相比，会被优先提升</li></ul><h3 id="1-2-变量提升"><a href="#1-2-变量提升" class="headerlink" title="1.2 变量提升"></a>1.2 变量提升</h3><ul><li>变量提升，只是声明提前，不会提升初始化</li></ul><pre class=" language-javascript"><code class="language-javascript">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//  undefined</span>  <span class="token keyword">var</span> names  names <span class="token operator">=</span> <span class="token string">'北极星'</span></code></pre><h2 id="二、变量提升和函数提升"><a href="#二、变量提升和函数提升" class="headerlink" title="二、变量提升和函数提升"></a>二、变量提升和函数提升</h2><h3 id="2-1-声明变量的方式"><a href="#2-1-声明变量的方式" class="headerlink" title="2.1 声明变量的方式"></a>2.1 声明变量的方式</h3><ul><li><code>es6</code>之前，声明变量的方式<ol><li>var </li><li>function</li><li>隐式声明</li></ol></li><li>Js变量提升，Js代码并不会移动，只是通过提升说法解释这一特性</li></ul><pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// undefined</span><span class="token keyword">var</span> user <span class="token operator">=</span> <span class="token string">'北极星'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 北极星</span></code></pre><h3 id="2-2-代码执行"><a href="#2-2-代码执行" class="headerlink" title="2.2 代码执行"></a>2.2 代码执行</h3><h4 id="2-2-1-以V8引擎为栗子，解释执行-JS-代码的过程大致分为三个阶段"><a href="#2-2-1-以V8引擎为栗子，解释执行-JS-代码的过程大致分为三个阶段" class="headerlink" title="2.2.1 以V8引擎为栗子，解释执行 JS 代码的过程大致分为三个阶段"></a>2.2.1 以V8引擎为栗子，解释执行 JS 代码的过程大致分为三个阶段</h4><ol><li>生成抽象语法树（AST）</li><li>生成字节码</li><li>生成机器码</li></ol><h4 id="2-2-2-生成抽象语法树"><a href="#2-2-2-生成抽象语法树" class="headerlink" title="2.2.2 生成抽象语法树"></a>2.2.2 生成抽象语法树</h4><ul><li>生成抽象语法树阶段，又分为了<code>词法分析和语法分析</code>两个阶段。</li><li>词法分析阶段： JS 会检测到当前作用域使用到的所有变量和函数声明，并将这些变量和函数声明添加到一个名为<code>词法环境（Lexical Environment）</code>的内存空间当中。</li></ul><h3 id="2-3-函数提升会先于变量提升"><a href="#2-3-函数提升会先于变量提升" class="headerlink" title="2.3 函数提升会先于变量提升"></a>2.3 函数提升会先于变量提升</h3><h4 id="2-3-1-在词法分析阶段"><a href="#2-3-1-在词法分析阶段" class="headerlink" title="2.3.1 在词法分析阶段:"></a>2.3.1 在词法分析阶段:</h4><ul><li>变量声明</li><li>函数声明</li></ul><ol><li>对于变量声明形如：<code>var a = 3</code>,会为变量<code>分配内存</code>并初始化为 <code>undefined</code>，赋值语句在<code>生成机器码阶段</code>真正执行代码的时候才进行。</li><li>对于函数声明如 <code>function sayHello() &#123; console.log(&#39;Hello there!&#39;) &#125;</code>，会在内存里<code>创建函数对象</code>，并且<code>直接初始化</code>为该函数对象。</li></ol><h4 id="2-3-2-代码栗子"><a href="#2-3-2-代码栗子" class="headerlink" title="2.3.2 代码栗子"></a>2.3.2 代码栗子</h4><pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// function foo() {}</span>foo <span class="token operator">=</span> <span class="token number">3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 3</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 函数提升先于变量提升,以上代码等价于</span><span class="token keyword">var</span> foofoo <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// function foo() {}</span>foo <span class="token operator">=</span> <span class="token number">3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 3</span></code></pre><h3 id="2-4-变量提升和函数提升，都是将声明提升到”当前作用域”的顶端"><a href="#2-4-变量提升和函数提升，都是将声明提升到”当前作用域”的顶端" class="headerlink" title="2.4 变量提升和函数提升，都是将声明提升到”当前作用域”的顶端"></a>2.4 变量提升和函数提升，都是将声明提升到”当前作用域”的顶端</h3><h4 id="2-4-1-代码栗子"><a href="#2-4-1-代码栗子" class="headerlink" title="2.4.1 代码栗子"></a>2.4.1 代码栗子</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">function</span> <span class="token function">hoist</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// function foo() {}</span>    foo <span class="token operator">=</span> <span class="token number">3</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 3</span>    <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">hoist</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 5 这里会先从当前作用域查找</span><span class="token comment" spellcheck="true">// 以上代码等价于------------</span><span class="token keyword">var</span> hoist<span class="token keyword">var</span> foofoo <span class="token operator">=</span> <span class="token number">5</span>hoist <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> foo    foo <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span>    foo <span class="token operator">=</span> <span class="token number">3</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">hoist</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 5</span></code></pre><h4 id="2-4-2-匿名函数声明"><a href="#2-4-2-匿名函数声明" class="headerlink" title="2.4.2 匿名函数声明"></a>2.4.2 匿名函数声明</h4><ul><li>代码栗子</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Uncaught TypeError: sayHi is not a function</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sayHi<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// undefined</span><span class="token keyword">var</span> sayHi <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Hi there!'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Hi there!</span><span class="token comment" spellcheck="true">// 以上等价于 ----------</span><span class="token keyword">var</span> sayHi<span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sayHi<span class="token punctuation">)</span>sayHi <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Hi there'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="2-5-防止变量提升"><a href="#2-5-防止变量提升" class="headerlink" title="2.5 防止变量提升"></a>2.5 防止变量提升</h3><ul><li><code>let const var</code> 都会产生变量的提升<ol><li><code>var命令</code>在变量定义被执行之前就初始化，并且被赋值 <code>undefined</code></li><li><code>let const 命令</code>会形成 暂时性死区（TDZ），在变量的定义被执行之前不会初始化变量</li><li><code>let</code> 定义的变量没有给定值，会被赋值为<code>undefined</code>， <code>const</code>定义的变量没有初始值则会报错</li></ol></li><li>代码栗子</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Uncaught ReferenceError: Cannot access 'test' before initialization</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Uncaught ReferenceError: Cannot access 'test' before initialization</span><span class="token keyword">const</span> test <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// test</span></code></pre><h3 id="2-6-变量提升解决了函数相互递归调用的问题"><a href="#2-6-变量提升解决了函数相互递归调用的问题" class="headerlink" title="2.6 变量提升解决了函数相互递归调用的问题"></a>2.6 变量提升解决了函数相互递归调用的问题</h3><ul><li>代码栗子<ol><li>如果没有函数提升，那么在调用 <code>isEven </code>方法时，<code>isOdd </code>方法还未声明，那么在 <code>isEven </code>方法内部就无法调用 <code>isOdd </code>方法。</li><li>通过函数提升，<code>isEven 和 isOdd</code> 方法都相当于在当前作用域的顶部进行了声明，函数之间的相互递归调用也就可以实现了。</li></ol></li></ul><pre class=" language-javascript"><code class="language-javascript"> <span class="token operator">&lt;</span>script<span class="token operator">></span>      <span class="token comment" spellcheck="true">// 函数相互递归调用 A函数调用B函数，B函数调用A函数</span>      <span class="token comment" spellcheck="true">// 判断 n 是否为偶数</span>      <span class="token keyword">function</span> <span class="token function">isEven</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">isOdd</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isEven</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>      <span class="token comment" spellcheck="true">// 判断 n 是否为奇数</span>      <span class="token keyword">function</span> <span class="token function">isOdd</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">isEven</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h3 id="2-7-总结"><a href="#2-7-总结" class="headerlink" title="2.7 总结"></a>2.7 总结</h3><ul><li>变量提升是在最初一批 JS 虚拟机设计实现上的纰漏，而函数提升是设计好的针对函数相互递归调用等问题的改进。</li><li>作为针对变量提升的改进，<code>ES6 </code>中提出了最好使用 <code>let 和 const</code> 命令来声明变量，避免变量提升现象的发生</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搬砖日记</title>
      <link href="/2022/070115134.html"/>
      <url>/2022/070115134.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-vue页面内同级组件切换（v-show-与-v-if）"><a href="#1-vue页面内同级组件切换（v-show-与-v-if）" class="headerlink" title="1. vue页面内同级组件切换（v-show 与 v-if）"></a>1. vue页面内同级组件切换（v-show 与 v-if）</h1><h2 id="1-1-问题一；"><a href="#1-1-问题一；" class="headerlink" title="1.1 问题一；"></a>1.1 问题一；</h2><ul><li><strong>场景描述</strong>： <ol><li>父组件index.vue中存在两个平级的子组件A.vue和B.vue，在父组件中通过v-show控制子组件显隐（因为要保证切换子组件时子组件已经填写的数据不丢失）；</li><li>但是A组件切换至B组件时，B组件的数据需要根据A组件动态新增；因此在A组件切换时调用异步请求获取数据，但是由于子组件绑定的数据源无法感知到数据的变化，导致A组件请求的数据无法实时展示到B组件。</li></ol></li><li><strong>解决方式</strong>：（需要重新触发子组件的生命周期函数 或是 重新渲染子组件页面）<ol><li>在B组件外部包裹 div 使用v-if控制页面的重排 </li><li>A组件在异步请求前 <code>v-if=&quot;false&quot;</code>干掉B组件dom元素；请求结束后通过<code>v-if=&quot;true&quot;</code>重新渲染页面，实现vue组件重新执行生命周期函数 从而获取实时最新的数据。</li></ol></li></ul><h2 id="1-2-组件的函数，watch执行顺序："><a href="#1-2-组件的函数，watch执行顺序：" class="headerlink" title="1.2 组件的函数，watch执行顺序："></a>1.2 组件的函数，watch执行顺序：</h2><ul><li>当<code>watch函数</code>被设置为立即执行时，也就是 <code>immediate为true</code>时，watch函数先于生命周期函数<code>created</code>执行；</li><li>接着是执行 <code>get</code> 属性里的值，然后是<code>mounted</code>。</li></ul><h1 id="2-el-form表单校验以及自定义校验规则"><a href="#2-el-form表单校验以及自定义校验规则" class="headerlink" title="2. el-form表单校验以及自定义校验规则"></a>2. el-form表单校验以及自定义校验规则</h1><h2 id="2-1-使用form表单校验"><a href="#2-1-使用form表单校验" class="headerlink" title="2.1 使用form表单校验:"></a>2.1 使用form表单校验:</h2><ol><li>需要在 <code>el-form</code> 标签动态绑定数据源 :model;</li><li>需要<code>el-form</code>标签动态绑定校验规则对象 :rules, 校验规则写在rules对象里，形式为 属性名 + 属性名对应的数组（数组里面是配置对应规则，包括是否必填，触发方式，错误提示等等）; 如果需要自定义校验规则，那么就需要自行定义一个回调函数，把message 属性替换为 validator: callback;</li><li>需要在 <code>el-form-item</code>标签配置 prop 属性，prop&#x3D;’属性名’，并且这个属性名 需要是model 绑定对象的下一级;比如下面model 绑定ruleForm对象，那么prop绑定 name 属性就能正常触发校验。<pre class=" language-JavaScript"><code class="language-JavaScript">// 自定义校验const checkName = (rule, value, cb) => { if (!value) cb(new Error('错误提示')) }把 message 属性替换为 validator: this.checkName// 普通校验ruleForm = {  name: ''}rules = {  name: [{required: true, message:'这是错误提示语', trigger: 'blur'}]}</code></pre></li></ol><h1 id="3-el-upload文件上传（视频，图片，pdf文件）"><a href="#3-el-upload文件上传（视频，图片，pdf文件）" class="headerlink" title="3. el-upload文件上传（视频，图片，pdf文件）"></a>3. el-upload文件上传（视频，图片，pdf文件）</h1>]]></content>
      
      
      
        <tags>
            
            <tag> 经验总结 </tag>
            
            <tag> 功能复盘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3学习笔记</title>
      <link href="/2022/062334107.html"/>
      <url>/2022/062334107.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、初始化项目"><a href="#一、初始化项目" class="headerlink" title="一、初始化项目"></a>一、初始化项目</h2><h3 id="1-1-快速搭建vite项目"><a href="#1-1-快速搭建vite项目" class="headerlink" title="1.1 快速搭建vite项目"></a>1.1 快速搭建vite项目</h3><ul><li>全局安装vue-cli v4.5<pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g @vue/cli</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> create vite</code></pre></li><li>选择 <code>vue</code> ; <code>vue-ts</code><h3 id="1-2-项目启动"><a href="#1-2-项目启动" class="headerlink" title="1.2 项目启动"></a>1.2 项目启动</h3></li><li>进入项目目录，<code>npm i</code> 安装依赖; 接着执行 <code>npm run dev</code> 启动项目。</li></ul><h4 id="1-2-1-vscode-插件"><a href="#1-2-1-vscode-插件" class="headerlink" title="1.2.1 vscode 插件"></a>1.2.1 vscode 插件</h4><ul><li>vue2使用的是 vetur进行vue的代码提示；vue3需要使用 volar</li><li>并且使用volar需要禁用vetur<pre class=" language-json"><code class="language-json">Vue Language Features(Volar<span class="token punctuation">)</span>TypeScript Vue Plugin(Volar<span class="token punctuation">)</span>vue3-snippets-for-vscode</code></pre><h4 id="1-2-2-插件功能"><a href="#1-2-2-插件功能" class="headerlink" title="1.2.2 插件功能"></a>1.2.2 插件功能</h4></li><li>右上角绿色三角点击实现代码切片功能，会自动分两屏并且把template与script代码分开</li><li>右上角点击vite图标，选择 <code>preview vite app</code> 预览代码实现效果 <h2 id="二、npm-run-dev"><a href="#二、npm-run-dev" class="headerlink" title="二、npm run dev"></a>二、npm run dev</h2><h3 id="2-1-为什么运行运行-vite无法启动项目，但是npm-run-dev-却可以？"><a href="#2-1-为什么运行运行-vite无法启动项目，但是npm-run-dev-却可以？" class="headerlink" title="2.1 为什么运行运行 vite无法启动项目，但是npm run dev 却可以？"></a>2.1 为什么运行运行 vite无法启动项目，但是npm run dev 却可以？</h3><pre class=" language-json"><code class="language-json">// package.json<span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"dev"</span><span class="token operator">:</span> <span class="token string">"vite"</span><span class="token punctuation">,</span><span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"vue-tsc --noEmit &amp;&amp; vite build"</span><span class="token punctuation">,</span><span class="token property">"preview"</span><span class="token operator">:</span> <span class="token string">"vite preview"</span><span class="token punctuation">}</span></code></pre></li><li>直接执行 vite，cmd命令是无法识别的；</li><li><img src="https://cdn.jsdelivr.net/gh/polarisWrp/photo_stage/images/pic202206251500479.png" alt="image-20220625150033430"></li><li>为什么<code> npm run dev</code>可以执行的原因，在node_modules中查看vite源码</li></ul><p><img src="https://cdn.jsdelivr.net/gh/polarisWrp/photo_stage/images/pic202206251450340.png" alt="image-20220625145035236"></p><ul><li>可以看到，在package.json中配置了软链接<pre class=" language-json"><code class="language-json"><span class="token property">"bin"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"vite"</span><span class="token operator">:</span> <span class="token string">"vite/vite.js"</span><span class="token punctuation">}</span></code></pre></li><li>执行npm run dev;会先从当前目录下查找bin目录下的vite文件；</li><li>找不到的情况下，会去全局node_modules查找bin目录里的vite文件；<br><img src="https://cdn.jsdelivr.net/gh/polarisWrp/photo_stage/images/pic202206251458628.png" alt="image-20220625145830565"></li><li>如果还是找不到,那么就会去环境变量中查找。</li><li>已经bin下面已经写好的指令，分别用于 linux,windows,以及跨平台系统（linux和Windows都能用）</li></ul><p><img src="https://cdn.jsdelivr.net/gh/polarisWrp/photo_stage/images/pic202206251507215.png" alt="image-20220625150749155"></p><h2 id="三、模板插值语法"><a href="#三、模板插值语法" class="headerlink" title="三、模板插值语法"></a>三、模板插值语法</h2><ul><li>开始</li></ul><h3 id="3-1-模板语法，输出文字信息"><a href="#3-1-模板语法，输出文字信息" class="headerlink" title="3.1 模板语法，输出文字信息"></a>3.1 模板语法，输出文字信息</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  {{msg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">const</span> msg<span class="token punctuation">:</span> string <span class="token operator">=</span> <span class="token string">'我是北极星'</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="3-2-为什么模板中不需要写div根标签？"><a href="#3-2-为什么模板中不需要写div根标签？" class="headerlink" title="3.2 为什么模板中不需要写div根标签？"></a>3.2 为什么模板中不需要写div根标签？</h3><h2 id="四、ref全家桶"><a href="#四、ref全家桶" class="headerlink" title="四、ref全家桶"></a>四、ref全家桶</h2><h3 id="4-1-ref"><a href="#4-1-ref" class="headerlink" title="4.1 ref"></a>4.1 ref</h3><ul><li>ref 接收一个内部值，并且返回一个响应式且可变的对象；</li><li>ref对象有且仅有一个 <code>.value</code> property,指向的是它内部的值。</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>changeMsg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>change<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    介绍：{{msg}}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span>Ref<span class="token punctuation">,</span> ref<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>  <span class="token keyword">let</span> msg<span class="token punctuation">:</span> Ref<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">'我是北极星'</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> changeMsg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    msg<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">'我是大白'</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><ul><li>页面更新为 “我是大白”;控制台输出 RefImpl 对象</li></ul><h3 id="4-2-为什么ref返回一个对象？"><a href="#4-2-为什么ref返回一个对象？" class="headerlink" title="4.2 为什么ref返回一个对象？"></a>4.2 为什么ref返回一个对象？</h3><ul><li>ref是一个重载函数，函数内部返回一个 createRef函数</li><li>createRef函数判断传入的值是否为ref对象，不是的话会返回 RefImpl实例</li><li>RefImpl内部通过get 和 set 方法对传入的值进行设置和返回</li></ul><p><img src="https://cdn.jsdelivr.net/gh/polarisWrp/photo_stage/images/pic202206252046553.png" alt="image-20220625204614453"></p><p><img src="https://cdn.jsdelivr.net/gh/polarisWrp/photo_stage/images/pic202206252048880.png" alt="image-20220625204850794"></p><h3 id="4-3-shallowRef，-triggerRef，customRef"><a href="#4-3-shallowRef，-triggerRef，customRef" class="headerlink" title="4.3 shallowRef， triggerRef，customRef"></a>4.3 shallowRef， triggerRef，customRef</h3><h4 id="4-3-1-shallowRef-创建一个跟踪自身-value-变化的ref-但是值不会是响应式"><a href="#4-3-1-shallowRef-创建一个跟踪自身-value-变化的ref-但是值不会是响应式" class="headerlink" title="4.3.1 shallowRef 创建一个跟踪自身 .value 变化的ref,但是值不会是响应式"></a>4.3.1 shallowRef 创建一个跟踪自身 .value 变化的ref,但是值不会是响应式</h4><ul><li>使用shallowRef包装的对象，只有到 <code>.value</code>这一级具有响应式；</li><li>所以以下修改方式，不生效；控制台输出的是变化的值，但是页面不会更新；</li><li>想要具备响应式，只能修改整个对象，写法 <code>obj.value = &#123;name: &#39;woshidaibai&#39; &#125;</code><br><strong>使用场景</strong>： 对于不需要响应式的属性，用shallowRef包裹</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>changeMsg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>change<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    {{obj}}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span>shallowRef<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>  <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token function">shallowRef</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'我是大白'</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> changeMsg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    obj<span class="token punctuation">.</span>value<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'woshidaibai'</span>    <span class="token comment" spellcheck="true">// obj.value = {name: 'woshidaibai' }</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="4-3-2-triggerRef-强制更新页面的dom"><a href="#4-3-2-triggerRef-强制更新页面的dom" class="headerlink" title="4.3.2 triggerRef 强制更新页面的dom"></a>4.3.2 triggerRef 强制更新页面的dom</h4><ul><li>使用triggerRef强制更新dom,在修改值后将修改对象传入 triggerRef，页面能够获取修改后得到值。<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span>shallowRef<span class="token punctuation">,</span> triggerRef<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token function">shallowRef</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'我是大白'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">const</span> changeMsg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  obj<span class="token punctuation">.</span>value<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'woshidaibai'</span>  <span class="token function">triggerRef</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// console.log(obj);</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="4-3-3-customRef-自定义ref"><a href="#4-3-3-customRef-自定义ref" class="headerlink" title="4.3.3 customRef 自定义ref"></a>4.3.3 customRef 自定义ref</h4></li><li>customRef 是一个工厂函数，函数内部要求返回一个对象，对象内部要有get和set方法</li><li>点击按钮触发set方法，模板的msg值修改为 “大白”</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>changeMsg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>change<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    {{msg}}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span>shallowRef<span class="token punctuation">,</span> triggerRef<span class="token punctuation">,</span>customRef<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>  <span class="token keyword">function</span> myRef<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">customRef</span><span class="token punctuation">(</span><span class="token punctuation">(</span>track<span class="token punctuation">,</span> trigger<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">track</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//用于收集依赖</span>          <span class="token keyword">return</span> value        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token keyword">set</span><span class="token punctuation">(</span>newValue<span class="token punctuation">:</span> T<span class="token punctuation">)</span> <span class="token punctuation">{</span>          value <span class="token operator">=</span> newValue          <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> msg <span class="token operator">=</span> myRef<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">'北极星'</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> changeMsg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    msg<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">'大白'</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="4-4-shallowRef造成视图更新的问题"><a href="#4-4-shallowRef造成视图更新的问题" class="headerlink" title="4.4 shallowRef造成视图更新的问题"></a>4.4 shallowRef造成视图更新的问题</h3><ul><li>上面的案例中提到了，使用shallowRef包裹的属性，会失去响应式；</li><li>但是，如果在一个方法中同时改变响应式数据（就是ref包裹的属性）和shallowRef内的属性，shallowRef中的属性也会变为响应式，从而造成视图的更新。</li><li>TODO （源码）本质就是ref触发依赖更新时一并将shallowRef属性更新了</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span>shallowRef<span class="token punctuation">,</span> triggerRef<span class="token punctuation">,</span>customRef<span class="token punctuation">,</span> ref<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>  <span class="token keyword">const</span> msg1 <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">'这是msg1'</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> msg <span class="token operator">=</span> <span class="token function">shallowRef</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'大白'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token string">'dsad'</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> changeMsg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    demo<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">'ppp'</span>    msg<span class="token punctuation">.</span>value<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'kkk'</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这是msg1'</span><span class="token punctuation">,</span> msg1<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="五、reactive全家桶"><a href="#五、reactive全家桶" class="headerlink" title="五、reactive全家桶"></a>五、reactive全家桶</h2><ul><li>reactive内部接收复杂数据类型，将其转化为响应式，如果传入基本数据类型，那么会控制台会报错并且将数据直接返回。</li><li>传入的数据经过转化返回一个Proxy对象，对象内部则是属性名称，所以页面使用时 <code>obj.property</code>;不需要<code>obj.value.property</code></li></ul><h3 id="5-1数组赋值时注意："><a href="#5-1数组赋值时注意：" class="headerlink" title="5.1数组赋值时注意："></a>5.1数组赋值时注意：</h3><ul><li>当我们在给响应式的数组赋值时，不能将接口返回数据直接覆盖原来的数组，这样会使原数组丢失响应式;</li><li>应该是将返回的数组中的元素添加到响应式数组当中；</li></ul><h4 id="方式一："><a href="#方式一：" class="headerlink" title="方式一："></a>方式一：</h4><pre class=" language-typescript"><code class="language-typescript"><span class="token operator">&lt;</span>script setup lang<span class="token operator">=</span><span class="token string">"ts"</span><span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">{</span>shallowRef<span class="token punctuation">,</span> triggerRef<span class="token punctuation">,</span>customRef<span class="token punctuation">,</span> ref<span class="token punctuation">,</span> reactive<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">const</span> msg <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'北极星'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">let</span> arr <span class="token operator">=</span> reactive<span class="token operator">&lt;</span><span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>  arr <span class="token operator">=</span> temp <span class="token comment" spellcheck="true">//不合理</span>  arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>temp<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//合理</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3,4]</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h4 id="方式二："><a href="#方式二：" class="headerlink" title="方式二："></a>方式二：</h4><pre class=" language-typescript"><code class="language-typescript"><span class="token operator">&lt;</span>script setup lang<span class="token operator">=</span><span class="token string">"ts"</span><span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">{</span>shallowRef<span class="token punctuation">,</span> triggerRef<span class="token punctuation">,</span>customRef<span class="token punctuation">,</span> ref<span class="token punctuation">,</span> reactive<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>type List <span class="token operator">=</span> <span class="token punctuation">{</span>  list<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">let</span> msg <span class="token operator">=</span> reactive<span class="token operator">&lt;</span>List<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">{</span>  list<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  msg<span class="token punctuation">.</span>list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">]</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h3 id="5-2readonly方法"><a href="#5-2readonly方法" class="headerlink" title="5.2readonly方法"></a>5.2readonly方法</h3><ul><li>将数据拷贝一份，并且此数据不允许被更改</li></ul><pre class=" language-typescript"><code class="language-typescript"><span class="token operator">&lt;</span>script setup lang<span class="token operator">=</span><span class="token string">"ts"</span><span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">{</span>readonly<span class="token punctuation">,</span> reactive<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">let</span> msg <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  count<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">let</span> copy <span class="token operator">=</span> <span class="token function">readonly</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>copy<span class="token punctuation">.</span>count<span class="token operator">++</span> <span class="token comment" spellcheck="true">//报错</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h3 id="5-3shallowReactive"><a href="#5-3shallowReactive" class="headerlink" title="5.3shallowReactive"></a>5.3shallowReactive</h3><ul><li>只有第一层对象的属性为响应式，改变深层次的属性值时，会修改数据但是不会在页面上更新数据</li></ul><h4 id="5-3-1使用的注意点："><a href="#5-3-1使用的注意点：" class="headerlink" title="5.3.1使用的注意点："></a>5.3.1使用的注意点：</h4><ul><li>在dom挂在之前，比如我们在自调用函数内部改变属性值时，shallowReactive不会生效；</li><li>在一个方法中同时修改浅层次和深层次属性时，shallowReactive也不生效</li></ul><pre class=" language-typescript"><code class="language-typescript"><span class="token operator">&lt;</span>script setup lang<span class="token operator">=</span><span class="token string">"ts"</span><span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">{</span>readonly<span class="token punctuation">,</span> reactive<span class="token punctuation">,</span> shallowReactive<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">const</span> test <span class="token operator">=</span> <span class="token function">shallowReactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  demo<span class="token punctuation">:</span> <span class="token string">'kkk'</span><span class="token punctuation">,</span>  obj<span class="token punctuation">:</span> <span class="token punctuation">{</span>    child<span class="token punctuation">:</span> <span class="token punctuation">{</span>      name<span class="token punctuation">:</span> <span class="token string">'dadadada'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//warning： 一个方法同时修改浅深层次属性时，两者属性都会响应式更新</span><span class="token keyword">const</span> changeMsg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  test<span class="token punctuation">.</span>demo <span class="token operator">=</span> <span class="token string">'kkk被改了。。。'</span>  test<span class="token punctuation">.</span>obj<span class="token punctuation">.</span>child<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'这回里面被改了'</span> <span class="token comment" spellcheck="true">//需要单独写，并且正常来说也应该拆分出来，一个函数做一件事</span><span class="token punctuation">}</span><span class="token keyword">const</span> changeInner <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  test<span class="token punctuation">.</span>obj<span class="token punctuation">.</span>child<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'这回里面被改了'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*  1. 函数自调用，这是dom还没挂载结束，shallowReactive不会生效；  2. 应该在页面手动触发变更事件*/</span><span class="token function">changeMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">changeInner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h2 id="六、to全家桶（toRef-toRefs-toRaw）"><a href="#六、to全家桶（toRef-toRefs-toRaw）" class="headerlink" title="六、to全家桶（toRef,toRefs,toRaw）"></a>六、to全家桶（toRef,toRefs,toRaw）</h2><h3 id="6-1-toRef"><a href="#6-1-toRef" class="headerlink" title="6.1 toRef"></a>6.1 toRef</h3><ul><li>它接收一个属性，将其变为响应式属性</li></ul><pre class=" language-typescript"><code class="language-typescript"><span class="token operator">&lt;</span>script setup lang<span class="token operator">=</span><span class="token string">"ts"</span><span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">{</span>toRef<span class="token punctuation">,</span> toRefs<span class="token punctuation">,</span> toRaw<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'北极星'</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span> <span class="token number">15</span><span class="token punctuation">}</span><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">toRef</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//age属性变为响应式</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h3 id="6-2-toRefs"><a href="#6-2-toRefs" class="headerlink" title="6.2 toRefs"></a>6.2 toRefs</h3><ul><li>我们在将对象解构的时候，依然希望响应式里面对象的属性解构出来的每个属性都是响应式的；</li></ul><pre class=" language-typescript"><code class="language-typescript"><span class="token operator">&lt;</span>script setup lang<span class="token operator">=</span><span class="token string">"ts"</span><span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">{</span>toRef<span class="token punctuation">,</span> toRefs<span class="token punctuation">,</span> toRaw<span class="token punctuation">,</span> reactive<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'北极星'</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span> <span class="token number">15</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// const {name, age} = obj</span>  <span class="token comment" spellcheck="true">// 解构出来的属性不是响应式</span><span class="token comment" spellcheck="true">// 这时候需要toRefs</span><span class="token keyword">const</span> <span class="token punctuation">{</span>name<span class="token punctuation">,</span> age<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">toRefs</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">const</span> changeMsg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  name<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">'大白'</span>  age<span class="token punctuation">.</span>value<span class="token operator">++</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h3 id="6-3-toRaw"><a href="#6-3-toRaw" class="headerlink" title="6.3 toRaw"></a>6.3 toRaw</h3><ul><li>将一个响应式对象改为非响应式</li></ul><pre class=" language-typescript"><code class="language-typescript"><span class="token operator">&lt;</span>script setup lang<span class="token operator">=</span><span class="token string">"ts"</span><span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">{</span>toRef<span class="token punctuation">,</span> toRefs<span class="token punctuation">,</span> toRaw<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'北极星'</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span> <span class="token number">15</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">toRaw</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出 {name:'北极星', age: 15}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h2 id="七、computed计算属性"><a href="#七、computed计算属性" class="headerlink" title="七、computed计算属性"></a>七、computed计算属性</h2><ul><li>基本用法</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>first<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>second<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>       {{fullName}}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span>computed<span class="token punctuation">,</span> ref<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">const</span> first <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">'北极'</span><span class="token punctuation">)</span><span class="token keyword">const</span> second <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">'星星'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//方式一</span><span class="token keyword">const</span> fullName <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> first<span class="token punctuation">.</span>value <span class="token operator">+</span> second<span class="token punctuation">.</span>value<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//方式二</span><span class="token keyword">const</span> fullName <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> first<span class="token punctuation">.</span>value <span class="token operator">+</span> second<span class="token punctuation">.</span>value  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token keyword">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    first<span class="token punctuation">.</span>value <span class="token operator">+</span> second<span class="token punctuation">.</span>value  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="八、Wath监听函数"><a href="#八、Wath监听函数" class="headerlink" title="八、Wath监听函数"></a>八、Wath监听函数</h2><h3 id="8-1基本用法"><a href="#8-1基本用法" class="headerlink" title="8.1基本用法"></a>8.1基本用法</h3><pre class=" language-typescript"><code class="language-typescript"><span class="token operator">&lt;</span>script setup lang<span class="token operator">=</span><span class="token string">"ts"</span><span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">{</span>watch<span class="token punctuation">,</span> ref<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">const</span> msg <span class="token operator">=</span> ref<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">'北极'</span><span class="token punctuation">)</span><span class="token function">watch</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token punctuation">(</span>newVal<span class="token punctuation">,</span> oldVal<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'新值：'</span><span class="token punctuation">,</span> newVal<span class="token punctuation">,</span> <span class="token string">'旧的值：'</span><span class="token punctuation">,</span>oldVal<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h3 id="8-2监听多个属性时"><a href="#8-2监听多个属性时" class="headerlink" title="8.2监听多个属性时"></a>8.2监听多个属性时</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 第一个参数传入一个数组，数组中元素为监听的属性</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">[</span>msg1<span class="token punctuation">,</span>msg2<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>newVal<span class="token punctuation">,</span> oldVal<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'新值：'</span><span class="token punctuation">,</span> newVal<span class="token punctuation">,</span> <span class="token string">'旧的值：'</span><span class="token punctuation">,</span>oldVal<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="8-3watch函数配置"><a href="#8-3watch函数配置" class="headerlink" title="8.3watch函数配置"></a>8.3watch函数配置</h3><h4 id="8-3-1-监听ref响应式对象"><a href="#8-3-1-监听ref响应式对象" class="headerlink" title="8.3.1 监听ref响应式对象"></a>8.3.1 监听ref响应式对象</h4><ul><li>当监听的属性层级超过一层时，需要配置第三个参数<code>deep(深度监听)</code>，<code>immediate(监听立即执行)</code>;</li><li>这里有个bug,就是deep开启后，新值和旧值输出都一致（原因？TODO）</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msg.far.son.name<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span>watch<span class="token punctuation">,</span> ref<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">const</span> msg <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  far<span class="token punctuation">:</span> <span class="token punctuation">{</span>    son<span class="token punctuation">:</span> <span class="token punctuation">{</span>      name<span class="token punctuation">:</span> <span class="token string">'北极星'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">watch</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token punctuation">(</span>newVal<span class="token punctuation">,</span> oldVal<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'新值：'</span><span class="token punctuation">,</span> newVal<span class="token punctuation">,</span> <span class="token string">'旧的值：'</span><span class="token punctuation">,</span>oldVal<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  deep<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="8-3-2-监听reactive响应式对象"><a href="#8-3-2-监听reactive响应式对象" class="headerlink" title="8.3.2 监听reactive响应式对象"></a>8.3.2 监听reactive响应式对象</h4><ul><li>监听reactive响应式对象时，默认就开启了深度监听deep，这时使用watch函数不需要配置deep;</li></ul><pre class=" language-typescript"><code class="language-typescript"><span class="token operator">&lt;</span>script setup lang<span class="token operator">=</span><span class="token string">"ts"</span><span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">{</span>watch<span class="token punctuation">,</span> ref<span class="token punctuation">,</span> reactive<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">const</span> msg <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  far<span class="token punctuation">:</span> <span class="token punctuation">{</span>    son<span class="token punctuation">:</span> <span class="token punctuation">{</span>      name<span class="token punctuation">:</span> <span class="token string">'北极星'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">watch</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token punctuation">(</span>newVal<span class="token punctuation">,</span> oldVal<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'新值：'</span><span class="token punctuation">,</span> newVal<span class="token punctuation">,</span> <span class="token string">'旧的值：'</span><span class="token punctuation">,</span>oldVal<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  immediate<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h4 id="8-3-3-监听对象中指定属性"><a href="#8-3-3-监听对象中指定属性" class="headerlink" title="8.3.3 监听对象中指定属性"></a>8.3.3 监听对象中指定属性</h4><ul><li>对watch函数，第一个参数指定返回被监听对象的指定属性；这时候除了对象中指定属性改变，其他属性改变则不会触发监听函数；</li></ul><pre class=" language-typescript"><code class="language-typescript"><span class="token operator">&lt;</span>script setup lang<span class="token operator">=</span><span class="token string">"ts"</span><span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">{</span>watch<span class="token punctuation">,</span> ref<span class="token punctuation">,</span> reactive<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">const</span> msg <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  far<span class="token punctuation">:</span> <span class="token string">'大白'</span><span class="token punctuation">,</span>  son<span class="token punctuation">:</span> <span class="token string">'小黑'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> msg<span class="token punctuation">.</span>son<span class="token punctuation">,</span> <span class="token punctuation">(</span>newVal<span class="token punctuation">,</span> oldVal<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 只有son属性变化，才会触发监听函数内的逻辑</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'新值：'</span><span class="token punctuation">,</span> newVal<span class="token punctuation">,</span> <span class="token string">'旧的值：'</span><span class="token punctuation">,</span>oldVal<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  immediate<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h2 id="九、watchEffect高级侦听器"><a href="#九、watchEffect高级侦听器" class="headerlink" title="九、watchEffect高级侦听器"></a>九、watchEffect高级侦听器</h2><h3 id="9-1-首次加载就会执行侦听器里的逻辑代码"><a href="#9-1-首次加载就会执行侦听器里的逻辑代码" class="headerlink" title="9.1 首次加载就会执行侦听器里的逻辑代码"></a>9.1 首次加载就会执行侦听器里的逻辑代码</h3><pre class=" language-typescript"><code class="language-typescript"><span class="token operator">&lt;</span>script setup lang<span class="token operator">=</span><span class="token string">"ts"</span><span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">{</span>watchEffect<span class="token punctuation">,</span> ref<span class="token punctuation">,</span> reactive<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">const</span> msg1 <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">'这是大白'</span><span class="token punctuation">)</span><span class="token keyword">const</span> msg2 <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">'这是我的'</span><span class="token punctuation">)</span><span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg1<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg2<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h3 id="9-2-watchEffect内部自定义回调函数"><a href="#9-2-watchEffect内部自定义回调函数" class="headerlink" title="9.2 watchEffect内部自定义回调函数"></a>9.2 watchEffect内部自定义回调函数</h3><ul><li>watchEffect内部可以接收一个回调函数，用于在数据变化之前做预处理；</li><li>这个预处理函数除了首次加载，每次数据变化时会优先执行。</li></ul><pre class=" language-typescript"><code class="language-typescript"><span class="token operator">&lt;</span>script setup lang<span class="token operator">=</span><span class="token string">"ts"</span><span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">{</span>watchEffect<span class="token punctuation">,</span> ref<span class="token punctuation">,</span> reactive<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">const</span> msg1 <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">'这是大白'</span><span class="token punctuation">)</span><span class="token keyword">const</span> msg2 <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">'这是我的'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 执行顺序</span><span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span>onInput<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg1<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg2<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span>  <span class="token function">onInput</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'do something...'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1 </span>  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h3 id="9-3-定义停止函数"><a href="#9-3-定义停止函数" class="headerlink" title="9.3 定义停止函数"></a>9.3 定义停止函数</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msg1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msg2<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stopWatch<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>停止监听<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span>watchEffect<span class="token punctuation">,</span> ref<span class="token punctuation">,</span> reactive<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">const</span> msg1 <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">'这是大白'</span><span class="token punctuation">)</span><span class="token keyword">const</span> msg2 <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">'这是我的'</span><span class="token punctuation">)</span><span class="token keyword">const</span> stop <span class="token operator">=</span> <span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span>onInput<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg1<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg2<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">onInput</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'do something...'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">const</span> stopWatch <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="9-4-watchEffect的配置项"><a href="#9-4-watchEffect的配置项" class="headerlink" title="9.4 watchEffect的配置项"></a>9.4 watchEffect的配置项</h3><pre class=" language-typescript"><code class="language-typescript"><span class="token operator">&lt;</span>script setup lang<span class="token operator">=</span><span class="token string">"ts"</span><span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">{</span>watchEffect<span class="token punctuation">,</span> ref<span class="token punctuation">,</span> reactive<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">const</span> msg <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  far<span class="token punctuation">:</span> <span class="token string">'大白'</span><span class="token punctuation">,</span>  son<span class="token punctuation">:</span> <span class="token string">'小黑'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">const</span> msg1 <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">'这是大白'</span><span class="token punctuation">)</span><span class="token keyword">const</span> msg2 <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">'这是我的'</span><span class="token punctuation">)</span><span class="token keyword">const</span> stop <span class="token operator">=</span> <span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span>onInput<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> item<span class="token punctuation">:</span> HTMLInputElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#msgId'</span><span class="token punctuation">)</span> as HTMLInputElement  <span class="token comment" spellcheck="true">// 没有配置 flush 之前item获取不到dom元素</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'--------------'</span><span class="token punctuation">,</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">onInput</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'do something...'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  flush<span class="token punctuation">:</span> <span class="token string">"post"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//dom加载完之后获取元素 </span>  <span class="token comment" spellcheck="true">// sync : 强制效果始终同步触发</span>  <span class="token comment" spellcheck="true">// pre : 组件更新前执行</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h3 id="9-5-调试函数-onTrigger-在监听属性改变后会触发监听函数；用于开发时断点调试"><a href="#9-5-调试函数-onTrigger-在监听属性改变后会触发监听函数；用于开发时断点调试" class="headerlink" title="9.5 调试函数 onTrigger,在监听属性改变后会触发监听函数；用于开发时断点调试"></a>9.5 调试函数 onTrigger,在监听属性改变后会触发监听函数；用于开发时断点调试</h3><pre class=" language-typescript"><code class="language-typescript"><span class="token operator">&lt;</span>script setup lang<span class="token operator">=</span><span class="token string">"ts"</span><span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">{</span>watchEffect<span class="token punctuation">,</span> ref<span class="token punctuation">,</span> reactive<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">const</span> msg1 <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">'这是大白'</span><span class="token punctuation">)</span><span class="token keyword">const</span> msg2 <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">'这是我的'</span><span class="token punctuation">)</span><span class="token keyword">const</span> stop <span class="token operator">=</span> <span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span>onInput<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg1<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg2<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">onInput</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'do something...'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token function">onTrigger</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//用于调试</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h2 id="十、组件生命周期"><a href="#十、组件生命周期" class="headerlink" title="十、组件生命周期"></a>十、组件生命周期</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>{{ msg }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>idK<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这是dog<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> ref<span class="token punctuation">,</span> onBeforeMount<span class="token punctuation">,</span> onMounted<span class="token punctuation">,</span> onBeforeUpdate<span class="token punctuation">,</span> onUpdated<span class="token punctuation">,</span>onBeforeUnmount<span class="token punctuation">,</span> onUnmounted <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token comment" spellcheck="true">// 首先是执行 setup</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setup'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> msg <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token function">onBeforeMount</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token keyword">const</span> item <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#idK'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// dom挂载之前获取dom元素失败  null </span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这是item'</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> item <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#idK'</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'挂载完了、、'</span><span class="token punctuation">,</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 接着是 更新前，更新完成，卸载前，卸载后</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="十一、父子组件传值"><a href="#十一、父子组件传值" class="headerlink" title="十一、父子组件传值"></a>十一、父子组件传值</h2><h3 id="11-1-父传子，子传父"><a href="#11-1-父传子，子传父" class="headerlink" title="11.1 父传子，子传父"></a>11.1 父传子，子传父</h3><ul><li>简单数据类型直接传值，复杂数据类型v-bind传值；</li><li>子传父，需要子组件派发一个事件，父组件监听并且自定义处理函数进行接收；</li><li>父组件获取子组件实例时使用<code>ref=&#39;自定义一个属性名&#39;</code>，并且子组件需要指定暴露 <code>defineExpose</code> 那些数据</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>layout<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Menu</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>menuRef<span class="token punctuation">"</span></span> <span class="token attr-name">:list</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>data<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>这是一套衣服<span class="token punctuation">"</span></span> <span class="token attr-name">@on-click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleClick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Menu</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>---{{arr}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>layout-right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Header</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Header</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Content</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Content</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> Content <span class="token keyword">from</span> <span class="token string">'../layout/content/index.vue'</span><span class="token keyword">import</span> Header <span class="token keyword">from</span> <span class="token string">'../layout/header/index.vue'</span><span class="token keyword">import</span> Menu <span class="token keyword">from</span> <span class="token string">'../layout/menu/index.vue'</span><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">as</span> number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// 获取 menu组件的实例，子组件可以选择性暴露数据；父组件只能拿到子组件暴露出的数据</span><span class="token keyword">const</span> menuRef <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token keyword">const</span> handleClick <span class="token operator">=</span> <span class="token punctuation">(</span>val<span class="token punctuation">:</span> number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html">//子组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>menu<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这是菜单    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span> red</span><span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>{{title}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>{{list}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>toParent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>派发<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> reactive <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span>  type Props <span class="token operator">=</span> <span class="token punctuation">{</span>    title<span class="token punctuation">:</span> string<span class="token punctuation">,</span>    list<span class="token punctuation">:</span> number<span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span>  defineProps<span class="token operator">&lt;</span>Props<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> temp <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">222</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> emit <span class="token operator">=</span> <span class="token function">defineEmits</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'on-click'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> toParent <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'on-click'</span><span class="token punctuation">,</span> temp<span class="token punctuation">)</span>  <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 父组件获取当前组件实例时能拿到的数据，暴露给父组件的数据</span>  <span class="token function">defineExpose</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    temp  <span class="token punctuation">}</span><span class="token punctuation">)</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="11-2-当不确定父组件是否传值时，子组件可设置默认值"><a href="#11-2-当不确定父组件是否传值时，子组件可设置默认值" class="headerlink" title="11.2 当不确定父组件是否传值时，子组件可设置默认值"></a>11.2 当不确定父组件是否传值时，子组件可设置默认值</h3><ul><li>withDefaults 以及 defineProps</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>menu<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这是菜单    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>---{{title}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>---{{data}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> reactive <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span>  type Props <span class="token operator">=</span> <span class="token punctuation">{</span>    title<span class="token operator">?</span><span class="token punctuation">:</span> string<span class="token punctuation">,</span>    data<span class="token operator">?</span><span class="token punctuation">:</span> number<span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span>  <span class="token function">withDefaults</span><span class="token punctuation">(</span>defineProps<span class="token operator">&lt;</span>Props<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    title<span class="token punctuation">:</span> <span class="token string">'默认标题'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="十二、全局组件，递归组件"><a href="#十二、全局组件，递归组件" class="headerlink" title="十二、全局组件，递归组件"></a>十二、全局组件，递归组件</h2><h3 id="12-1-注册全局组件"><a href="#12-1-注册全局组件" class="headerlink" title="12.1 注册全局组件"></a>12.1 注册全局组件</h3><ul><li>定义的全局组件需要在 <code>main.ts</code>文件中引入，注册时需要在app挂载之前，链式调用的写法；</li><li>全局组件的组件在其他页面使用时，不需要导入，直接以标签的方式使用即可。</li></ul><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> Card <span class="token keyword">from</span> <span class="token string">'./components/card/index.vue'</span><span class="token comment" spellcheck="true">// 注册组件时需要在挂载之前</span><span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'Card'</span><span class="token punctuation">,</span> Card<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span></code></pre><h3 id="12-2-递归组件"><a href="#12-2-递归组件" class="headerlink" title="12.2 递归组件"></a>12.2 递归组件</h3><ul><li>递归组件适用于渲染嵌套的数据结构；</li><li>渲染逻辑需要终止条件，否则会造成内存泄漏；</li><li>引用递归组件（本质就是引用自身）时有两种方式，1.使用import方式导入 2.定义一个script标签，导出组件名；</li><li>绑定点击事件时，需要注意冒泡事件。</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>      <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(item, index) in data<span class="token punctuation">"</span></span>      <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name">      <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span> <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span>      <span class="token attr-name">@click.stop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>clickItem(item)<span class="token punctuation">"</span></span>    <span class="token punctuation">></span></span>      {{ item.name }}      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TreeItem</span>        <span class="token attr-name">@on-click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>clickItem<span class="token punctuation">"</span></span>        <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.children<span class="token punctuation">"</span></span>        <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.children?.length<span class="token punctuation">"</span></span>      <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TreeItem</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token comment" spellcheck="true">// 引入递归组件，实际就是引用自身；这是写法一</span><span class="token comment" spellcheck="true">// import TreeItem from './index.vue'</span>type TreeList <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token operator">?</span><span class="token punctuation">:</span> string <span class="token operator">|</span> undefined  icon<span class="token operator">?</span><span class="token punctuation">:</span> string <span class="token operator">|</span> undefined  children<span class="token operator">?</span><span class="token punctuation">:</span> TreeList<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span>type Props <span class="token operator">=</span> <span class="token punctuation">{</span>  data<span class="token operator">?</span><span class="token punctuation">:</span> TreeList<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span>defineProps<span class="token operator">&lt;</span>Props<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> emit <span class="token operator">=</span> <span class="token function">defineEmits</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'on-click'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">const</span> clickItem <span class="token operator">=</span> <span class="token punctuation">(</span>item<span class="token punctuation">:</span> TreeList<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// alert(item)</span>  <span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'on-click'</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>// 写法二<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'TreeItem'</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="十三、动态组件"><a href="#十三、动态组件" class="headerlink" title="十三、动态组件"></a>十三、动态组件</h2><ul><li>和v2一样，使用内置的<code>&lt;component :is=&quot;组件名&quot;&gt;</code>动态展示对应组件；</li><li>对于不需要代理的内容，比如下面的A,B,C组件，使用<code>markraw</code>来跳过<code>proxy</code>代理从而节省性能；</li><li><code>markraw</code>本质会将代理的对象设置 <code>_v_skip</code> 属性设置为 true, 标识需要跳过代理。</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content-item<span class="token punctuation">"</span></span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in data<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        {{ item.name }}      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>current.comName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">import</span> <span class="token punctuation">{</span> reactive<span class="token punctuation">,</span> markraw <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> A <span class="token keyword">from</span> <span class="token string">'./A.vue'</span>  <span class="token keyword">import</span> B <span class="token keyword">from</span> <span class="token string">'./B.vue'</span>  <span class="token keyword">import</span> C <span class="token keyword">from</span> <span class="token string">'./C.vue'</span>type Tabs <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> string  comName<span class="token punctuation">:</span> string<span class="token punctuation">}</span>type Com <span class="token operator">=</span> Pick<span class="token operator">&lt;</span>Tabs<span class="token punctuation">,</span> <span class="token string">'comName'</span><span class="token operator">></span><span class="token keyword">const</span> data <span class="token operator">=</span> reactive<span class="token operator">&lt;</span>Tabs<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'这是a组件'</span><span class="token punctuation">,</span>    comName<span class="token punctuation">:</span> <span class="token function">markRaw</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'这是b组件'</span><span class="token punctuation">,</span>    comName<span class="token punctuation">:</span> <span class="token function">markRaw</span><span class="token punctuation">(</span>B<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'这是c组件'</span><span class="token punctuation">,</span>    comName<span class="token punctuation">:</span> <span class="token function">markRaw</span><span class="token punctuation">(</span>C<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">let</span> current <span class="token operator">=</span> reactive<span class="token operator">&lt;</span>Com<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">{</span>  comName<span class="token punctuation">:</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>comName<span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="十四、插槽全家桶"><a href="#十四、插槽全家桶" class="headerlink" title="十四、插槽全家桶"></a>十四、插槽全家桶</h2><h3 id="14-1-命名插槽，作用域插槽"><a href="#14-1-命名插槽，作用域插槽" class="headerlink" title="14.1 命名插槽，作用域插槽"></a>14.1 命名插槽，作用域插槽</h3><ul><li>子组件通过插槽给父组件提供占位，父组件传过来的值会覆盖掉原有的值；</li><li>通过 <code>v-slot:名称</code>的方式定义具名插槽，子组件内部使用 <code>&lt;slot name=&quot;名称&quot;&gt;</code>接收到父组件传过来的值；</li><li>同时子组件可以通过 <code>:属性名</code>的形式向父组件传值，父组件通过<code>v-slot=&#123;属性名&#125;</code>的方式接收；</li><li>并且<code>v-slot</code>可以使用 <code>#</code>简写，没有指定名称的插槽也可以用<code>#default</code>定义。</li></ul><pre class=" language-html"><code class="language-html">// 父组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Dialog</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>header</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>这是header<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{data}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        {{data}}      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>footer</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>这是footer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Dialog</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">import</span> <span class="token punctuation">{</span> markRaw<span class="token punctuation">,</span> reactive <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> Dialog <span class="token keyword">from</span> <span class="token string">'../../components/dialog/index.vue'</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>// 子组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>jjj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in data<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 作用域插槽，把值传给父组件 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> reactive <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span>type List <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> string<span class="token punctuation">}</span>  <span class="token keyword">const</span> data <span class="token operator">=</span> reactive<span class="token operator">&lt;</span>List<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'大白'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'解决'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'十点多'</span><span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="14-2-动态插槽"><a href="#14-2-动态插槽" class="headerlink" title="14.2 动态插槽"></a>14.2 动态插槽</h3><ul><li>在父组件动态使用插槽名称，可以将内容动态插入到子组件指定命名插槽的位置当中；</li><li>如下：把内容插入到子组件的 footer 中</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Dialog</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#[name]</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>动态内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Dialog</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">import</span> <span class="token punctuation">{</span> markRaw<span class="token punctuation">,</span> reactive<span class="token punctuation">,</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> Dialog <span class="token keyword">from</span> <span class="token string">'../../components/dialog/index.vue'</span>  <span class="token keyword">let</span> name <span class="token operator">=</span> ref<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">'footer'</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="十五、异步组件与代码分包"><a href="#十五、异步组件与代码分包" class="headerlink" title="十五、异步组件与代码分包"></a>十五、异步组件与代码分包</h2><h3 id="15-1打包"><a href="#15-1打包" class="headerlink" title="15.1打包"></a>15.1打包</h3><ul><li>在命令窗口执行 <code>npm run build</code>打包命令，会把vue文件、css文件以及第三方库打包至dist目录下，但是当代码量大的时候，打包出得到js文件就会比较大，首次加载就需要比较久，那么等待过程就会处于白屏状态。</li><li>这里通过异步组件优化加载；</li></ul><h3 id="15-2异步组件"><a href="#15-2异步组件" class="headerlink" title="15.2异步组件"></a>15.2异步组件</h3><ul><li>在<code>public</code>文件夹下新建一个<code>data.json</code>文件模拟异步数据；</li><li>新建一个 <code>server.ts</code>文件，内部模拟一个<code>get</code>请求方法，返回数据之前使用定时器延时返回，模拟异步数据；</li><li>修改父组件引用方式，使用<code>defineAsyncComponent</code>方法；该方法接收一个工厂函数，咱们内部传入一个import函数，而后会返回一个Promise函数，而 <code>defineAsyncComponent</code>会接收这个Promise函数并且返回<code>await</code>的结果;</li><li>因此将普通的 import导入组件写法修改为 <code>const AsyncCom = defineAsyncComponent(() =&gt; import(&#39;../../components/async/index.vue&#39;))</code></li><li>页面需要配合使用 <code>Suspense</code>,在他内部提供 <code>default</code> 和 <code>fallback</code>插槽，前者用于数据展示，后者可以用于数据加载中时的提示；</li><li>这时候再执行 <code>npm run build</code>,异步组件的代码被拆分出了新的打包文件；</li></ul><h4 id="15-2-1栗子"><a href="#15-2-1栗子" class="headerlink" title="15.2.1栗子"></a>15.2.1栗子</h4><ul><li>模拟的json数据</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">[</span>  <span class="token punctuation">{</span>    <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"这是大白"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"这是各个"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"这是大萨达撒"</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><ul><li>模拟get请求</li></ul><pre class=" language-typescript"><code class="language-typescript">type NameList <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">const</span> axios <span class="token operator">=</span> <span class="token punctuation">(</span>url<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Promise<span class="token operator">&lt;</span>NameList<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>reslove<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>    xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token function">reslove</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1500</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><ul><li>父组件逻辑</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Suspense</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#default</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AsyncCom</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>AsyncCom</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#fallback</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>loading.....<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Suspense</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">import</span> <span class="token punctuation">{</span> defineAsyncComponent<span class="token punctuation">,</span> markRaw<span class="token punctuation">,</span> reactive<span class="token punctuation">,</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> AsyncCom <span class="token operator">=</span> <span class="token function">defineAsyncComponent</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../../components/async/index.vue'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><ul><li>子组件逻辑</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in list<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      {{ item.name }}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">import</span> <span class="token punctuation">{</span> axios <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./server'</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//  setup 语法糖中可以直接使用 await</span>  <span class="token comment" spellcheck="true">// 自定义函数使用异步则需要在函数前加 async  const demo = async () => { await... }</span>  <span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">axios</span><span class="token punctuation">(</span><span class="token string">'../../../public/data.json'</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="十六、Teleport-传送组件（v3-新特性之一）"><a href="#十六、Teleport-传送组件（v3-新特性之一）" class="headerlink" title="十六、Teleport 传送组件（v3 新特性之一）"></a>十六、Teleport 传送组件（v3 新特性之一）</h2><ul><li>teleport能够将模板渲染至指定的dom节点，并且不受父级<code>style, v-show</code>的影响，同时<code>data, prop</code>数据依旧可以共用</li><li>通过 <code>to</code>属性，插入至指定元素的位置，<code>to=&#39;body&#39;</code>,由此将 <code>Teleport</code>内的内容传送至<code>body</code>中；</li><li>用于将组件传送到vue树之外的html页面，但是该组件仍然可以接收父组件的传值；</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>teleport</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>body<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      这是望远镜。。。    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>teleport</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><h2 id="十七、keep-alive缓存组件"><a href="#十七、keep-alive缓存组件" class="headerlink" title="十七、keep-alive缓存组件"></a>十七、keep-alive缓存组件</h2><h3 id="17-1使用场景"><a href="#17-1使用场景" class="headerlink" title="17.1使用场景"></a>17.1使用场景</h3><ul><li>不希望组件被重新渲染，或者处于性能考虑避免组件被多次重复渲染；</li><li>希望组件缓存下来，保持当前状态；</li></ul><h3 id="17-2-登录，注册组件切换栗子"><a href="#17-2-登录，注册组件切换栗子" class="headerlink" title="17.2 登录，注册组件切换栗子"></a>17.2 登录，注册组件切换栗子</h3><ul><li>正常使用v-if控制组件显隐时，默认情况由于dom结构被删除，每次显隐切换都会重新渲染，使用keep-alive包裹后则不会；</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>switchCom<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      切换    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keep-alive</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Login</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flag<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Login</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Register</span> <span class="token attr-name">v-else</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Register</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keep-alive</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> Login <span class="token keyword">from</span> <span class="token string">'../../components/login/login.vue'</span><span class="token keyword">import</span> Register <span class="token keyword">from</span> <span class="token string">'../../components/login/register.vue'</span><span class="token keyword">const</span> flag <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">const</span> switchCom <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  flag<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token operator">!</span>flag<span class="token punctuation">.</span>value<span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>less<span class="token punctuation">"</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span></code></pre><ul><li>栗子分别为登录和注册组件，切换组件显隐时，组件内部双向绑定的值依旧存在，组件不会重新渲染；</li></ul><h3 id="17-3-keep-alive的生命周期"><a href="#17-3-keep-alive的生命周期" class="headerlink" title="17.3 keep-alive的生命周期"></a>17.3 keep-alive的生命周期</h3><ul><li>以子组件Login的生命周期为栗子，首次加载时执行onMounted -&gt; onActivated -&gt; onDeactivated -&gt; onActivated -&gt; onDeactivated</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>账号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form.account<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>密码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form.psd<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>login<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> onActivated<span class="token punctuation">,</span> onDeactivated<span class="token punctuation">,</span> onMounted<span class="token punctuation">,</span> onUnmounted<span class="token punctuation">,</span> reactive <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span>   <span class="token keyword">const</span> form <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    account<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    psd<span class="token punctuation">:</span> <span class="token string">''</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> login <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>form<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'登录组件的 onmounted'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token function">onUnmounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'登录组件的 onUnmounted'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token function">onActivated</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'登录组件的 onActivated'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token function">onDeactivated</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'登录组件的 onDeactivated'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><ul><li><p>由此可知： </p><ol><li>onActivated、onDeactivated只有在使用keep-alive组件时存在；</li><li>使用keep-alive的组件，可以把只执行一次的逻辑或者数据请求放在onMounted中执行；</li><li>需要多次执行的逻辑放在 onActivated 以及 onDeactivated</li></ol></li></ul><h3 id="17-4-通过-include属性指定缓存的组件"><a href="#17-4-通过-include属性指定缓存的组件" class="headerlink" title="17.4 通过 include属性指定缓存的组件"></a>17.4 通过 include属性指定缓存的组件</h3><ul><li>在需要被缓存的子组件中暴露出组件名称，在keep-alive 组件中 <code>:included=[&#39;组件名&#39;]</code>的方式指定需要被缓存的组件，其他在<code>keep-alive</code>中的组件数据切换时就不会被缓存；</li><li>或者使用 <code>exclude=[&#39;组件名&#39;]</code>，指定不被缓存的组件；</li></ul><pre class=" language-html"><code class="language-html">// 子组件暴露出名字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'Login'</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>// 父组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>switchCom<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      切换    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keep-alive</span> <span class="token attr-name">:include</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>[<span class="token punctuation">'</span>Login<span class="token punctuation">'</span>]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Login</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flag<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Login</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Register</span> <span class="token attr-name">v-else</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Register</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keep-alive</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><h2 id="十八、transition组件"><a href="#十八、transition组件" class="headerlink" title="十八、transition组件"></a>十八、transition组件</h2><ul><li><p>在以下情况中，可以给任何元素和组件添加进入&#x2F;离开过渡</p><ol><li>条件渲染（v-if）</li><li>条件展示（v-show）</li><li>动态组件</li><li>组件根节点</li></ol></li><li><p>自定义过渡效果，需要对transition组件的name属性自定义，并且在css中定义对应样式；</p></li></ul><h3 id="18-1-基本使用"><a href="#18-1-基本使用" class="headerlink" title="18.1 基本使用"></a>18.1 基本使用</h3><ul><li>将需要加入过渡的组件或者<code>div</code>元素用<code>&lt;transition&gt;</code>组件包裹，自定义一个属性名，自定义定义样式；</li><li>定义属性名 <code>name=fade</code>, 定义进入时的样式变化，以及离开时的样式变化；</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>switchCom<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      切换    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fade<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flag<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">const</span> flag <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">const</span> switchCom <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  flag<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token operator">!</span>flag<span class="token punctuation">.</span>value<span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>less<span class="token punctuation">"</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector"><span class="token class">.content</span> </span><span class="token punctuation">{</span>  <span class="token selector"><span class="token class">.bnox</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> aqua<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.fade-enter-from</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.fade-enter-active</span> </span><span class="token punctuation">{</span>    <span class="token property">transition</span><span class="token punctuation">:</span> all ease <span class="token number">1.5</span>s<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.fade-enter-to</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">// background-color: aqua;  flex: 1;  margin: 20px;  border: 1px solid red;  overflow: auto;  &amp;-item </span><span class="token punctuation">{</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid pink<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h3 id="18-2通过引用类名的方式使用自定义样式"><a href="#18-2通过引用类名的方式使用自定义样式" class="headerlink" title="18.2通过引用类名的方式使用自定义样式"></a>18.2通过引用类名的方式使用自定义样式</h3><ul><li>我们可以自定义样式类，通过给组件的 <code>enter-to-class,enter-to-active</code>属性赋值的方式使用自定义的过渡样式；<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fade<span class="token punctuation">"</span></span>       <span class="token attr-name">enter-from-class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>e-from<span class="token punctuation">"</span></span>       <span class="token attr-name">enter-active-class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>e-active<span class="token punctuation">"</span></span>      <span class="token attr-name">enter-to-class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>e-to<span class="token punctuation">"</span></span>    <span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flag<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bnox<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>less<span class="token punctuation">"</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector"><span class="token class">.content</span> </span><span class="token punctuation">{</span><span class="token selector"><span class="token class">.e-from</span> </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.e-active</span> </span><span class="token punctuation">{</span>  <span class="token property">transition</span><span class="token punctuation">:</span> all ease <span class="token number">1.5</span>s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.e-to</span> </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h3 id="18-3-通过自定义class结合第三方动画库animate-css"><a href="#18-3-通过自定义class结合第三方动画库animate-css" class="headerlink" title="18.3 通过自定义class结合第三方动画库animate.css"></a>18.3 通过自定义class结合第三方动画库<code>animate.css</code></h3><h4 id="18-3-1-引用animate-css"><a href="#18-3-1-引用animate-css" class="headerlink" title="18.3.1 引用animate.css"></a>18.3.1 引用animate.css</h4></li><li>安装animate.css  <code>npm i animate.css -S</code></li><li>使用时在组件引入样式 <code>import animate.css</code></li><li>在 <code>animate@4</code>版本，使用样式时需要加上<code>animate__animated</code>前缀</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span>       <span class="token attr-name">enter-active-class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>animate__animated animate__fadeIn<span class="token punctuation">"</span></span>       <span class="token attr-name">leave-active-class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>animate__animated animate__fadeOut<span class="token punctuation">"</span></span>    <span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flag<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bnox<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> <span class="token string">'animate.css'</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="18-3-2-通过duration属性指定动画时长"><a href="#18-3-2-通过duration属性指定动画时长" class="headerlink" title="18.3.2 通过duration属性指定动画时长"></a>18.3.2 通过duration属性指定动画时长</h4><ul><li>在transition组件中动态绑定 <code>duration</code>属性，可以直接赋值或者动态绑定对象<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span>     <span class="token attr-name">:duration</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{enter: 500, leave: 55}<span class="token punctuation">"</span></span>    <span class="token attr-name">enter-active-class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>animate__animated animate__fadeIn<span class="token punctuation">"</span></span>     <span class="token attr-name">leave-active-class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>animate__animated animate__fadeOut<span class="token punctuation">"</span></span>  <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flag<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bnox<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><h3 id="18-4-transition组件生命周期"><a href="#18-4-transition组件生命周期" class="headerlink" title="18.4 transition组件生命周期"></a>18.4 transition组件生命周期</h3></li><li>一共有八个钩子函数</li><li>before-enter、enter、after-enter、enter-cancelled 分别为进入之前，进入中，进入后，进入被打断；</li><li>before-leave、leave、after-leave、leave-cancelled 分别为离开之前，离开中，离开后，离开被打断；</li></ul><h4 id="18-4-1-使用第三方库-gsap，结合生命周期钩子实现动画过渡"><a href="#18-4-1-使用第三方库-gsap，结合生命周期钩子实现动画过渡" class="headerlink" title="18.4.1 使用第三方库 gsap，结合生命周期钩子实现动画过渡"></a>18.4.1 使用第三方库 gsap，结合生命周期钩子实现动画过渡</h4><ul><li>安装 gsap <code>npm i gsap -S</code></li><li>组件导入 <code>import gsap from &#39;gsap&#39;</code><br>使用栗子：</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>switchCom<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      切换    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span>       <span class="token attr-name">@before-enter</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hadleBeforeEnter<span class="token punctuation">"</span></span>      <span class="token attr-name">@enter</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleEnter<span class="token punctuation">"</span></span>      <span class="token attr-name">@leave</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleLeave<span class="token punctuation">"</span></span>    <span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flag<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bnox<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> gsap <span class="token keyword">from</span> <span class="token string">'gsap'</span><span class="token keyword">const</span> hadleBeforeEnter <span class="token operator">=</span> <span class="token punctuation">(</span>el<span class="token punctuation">:</span> Element<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  gsap<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> <span class="token punctuation">{</span>    width<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    height<span class="token punctuation">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">const</span> handleEnter <span class="token operator">=</span> <span class="token punctuation">(</span>el<span class="token punctuation">:</span> Element<span class="token punctuation">,</span> done<span class="token punctuation">:</span> gsap<span class="token punctuation">.</span>Callback<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  gsap<span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> <span class="token punctuation">{</span>    width<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span>    height<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span>    onComplete<span class="token punctuation">:</span> done  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">const</span> handleLeave <span class="token operator">=</span> <span class="token punctuation">(</span>el<span class="token punctuation">:</span> Element<span class="token punctuation">,</span>done<span class="token punctuation">:</span> gsap<span class="token punctuation">.</span>Callback<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>gsap<span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> <span class="token punctuation">{</span>    width<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span>    height<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span>    onComplete<span class="token punctuation">:</span> done  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">const</span> flag <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">const</span> switchCom <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  flag<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token operator">!</span>flag<span class="token punctuation">.</span>value<span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="18-5-transition组件的-appear属性"><a href="#18-5-transition组件的-appear属性" class="headerlink" title="18.5 transition组件的 appear属性"></a>18.5 transition组件的 appear属性</h3><ul><li>这个属性可以设置初始节点过渡，即页面加载完成后开始进行动画；</li><li>3中状态 <code>appear-from-class appear-active-class appear-to-class appear</code><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>switchCom<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    切换  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span>     <span class="token attr-name">appear</span>    <span class="token attr-name">appear-from-class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleFrom<span class="token punctuation">"</span></span>    <span class="token attr-name">appear-active-class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleActive<span class="token punctuation">"</span></span>    <span class="token attr-name">appear-to-class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleTo<span class="token punctuation">"</span></span>  <span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flag<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bnox<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>less<span class="token punctuation">"</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector"><span class="token class">.content</span> </span><span class="token punctuation">{</span><span class="token selector"><span class="token class">.bnox</span> </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> aqua<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.handleFrom</span> </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.handleActive</span> </span><span class="token punctuation">{</span>  <span class="token property">transition</span><span class="token punctuation">:</span> all ease <span class="token number">2</span>s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.handleTo</span> </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">// background-color: aqua;flex: 1;margin: 20px;border: 1px solid red;overflow: auto;&amp;-item </span><span class="token punctuation">{</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid pink<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre></li></ul><h3 id="18-6、transition-group过渡列表"><a href="#18-6、transition-group过渡列表" class="headerlink" title="18.6、transition-group过渡列表"></a>18.6、transition-group过渡列表</h3><ul><li>使用方法和 transition 相同</li><li>区别在于transition-group中可以内嵌for循环列表；</li></ul><h2 id="十九、Provide-x2F-Inject-组件传值"><a href="#十九、Provide-x2F-Inject-组件传值" class="headerlink" title="十九、Provide&#x2F;Inject 组件传值"></a>十九、Provide&#x2F;Inject 组件传值</h2><ul><li>一般用于跨层级组件传值，父传孙组件；</li><li>为了保证数据单向流动，尽量避免使用，尽可能在父组件设置时定义为只读属性；</li><li>否则，子组件获取到该属性时一旦修改，那么其他组件拿到的值也将会是修改后的，具体看源码实现；</li></ul><h3 id="19-1-使用栗子"><a href="#19-1-使用栗子" class="headerlink" title="19.1 使用栗子"></a>19.1 使用栗子</h3><ul><li>父组件中使用 <code>provide</code> 定义属性；</li><li>可以通过 <code>ref, reactive</code>将属性值定义为响应式数据；</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>我是根组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>B</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>B</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> B <span class="token keyword">from</span> <span class="token string">'./layout/demo/B.vue'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> provide<span class="token punctuation">,</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span> <span class="token function">provide</span><span class="token punctuation">(</span><span class="token string">'flag'</span><span class="token punctuation">,</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><ul><li>子组件中通过 inject 获取到父组件定义的属性;</li><li>但是子组件修改属性值时,由于没有类型声明导致修改赋值时类型报错；</li><li>由inject 源码可知，解决方式为设置默认值或是将默认值定义为函数 <code>() =&gt; T</code></li><li>解决方式为使用泛型进行类型声明，<code>Ref&lt;boolean&gt;</code>;但是仍然存在类型可能为 <code>undefine </code>的情况，通过设置初始值<code>ref(false)</code>解决；</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>AAAA组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>changeFlag<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>changeFlag<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    {{data}}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> inject<span class="token punctuation">,</span> ref<span class="token punctuation">,</span> Ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">const</span> data <span class="token operator">=</span> inject<span class="token operator">&lt;</span>Ref<span class="token operator">&lt;</span>boolean<span class="token operator">></span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">'flag'</span><span class="token punctuation">,</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">const</span> changeFlag <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  data<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="19-2-依赖注入的实现原理"><a href="#19-2-依赖注入的实现原理" class="headerlink" title="19.2 依赖注入的实现原理"></a>19.2 依赖注入的实现原理</h3><ul><li>首先判断当前环境，不是setup()环境是不能使用 provide()函数</li><li>读取当前实例的 provides,组件中通过 <code>getCurrentInstance</code>方法获取当前实例的信息；</li><li>默认情况下，实例继承自父类的provides对象,</li><li>子组件使用父组件的 provides 对象作为原型，通过 <code>Object.create()</code>方法来创建自己的 provides 对象，从而子组件在 inject 时只需要查询原型链获取属性值；同时这也是为什么子组件中更改注入的属性值时，所有使用到 provide注入的属性值都会更改的原因；</li></ul><h2 id="二十、兄弟组件传参以及事件总线"><a href="#二十、兄弟组件传参以及事件总线" class="headerlink" title="二十、兄弟组件传参以及事件总线"></a>二十、兄弟组件传参以及事件总线</h2><h3 id="20-1-通过父组件除了其中一个子组件派发出的事件"><a href="#20-1-通过父组件除了其中一个子组件派发出的事件" class="headerlink" title="20.1 通过父组件除了其中一个子组件派发出的事件"></a>20.1 通过父组件除了其中一个子组件派发出的事件</h3><ul><li>假定A,B为兄弟组件，A组件通过 emit 派发出一个事件；</li><li>父组件通过 v-on 监听到事件，并且A 组件传递出的参数通过 v-bind 的形式传入 B 组件；</li><li>B组件通过 props 接收父组件传入的值，由此通过父组件作为桥梁实现兄弟组件传值；<h3 id="20-2-事件总线（Bus）"><a href="#20-2-事件总线（Bus）" class="headerlink" title="20.2 事件总线（Bus）"></a>20.2 事件总线（Bus）</h3></li><li>主要原理是利用js的发布订阅模式实现;</li><li>定义list全局对象用于缓存回调函数， emit 用于触发事件， on 方法用于事件监听；</li><li>当on方法执行时，先从缓存<code>list</code>中查找传入的事件名是否已经存在对应的缓存数组，1.不存在则创建向<code>list</code>中存入一个 <code>事件名: 空数组</code> 的<code>key-value</code>结构数据，并且将传入的 回调函数 callback 存入数组中；2.存在的话，那么根据事件名取出数组，将回调函数存入即可；</li><li>当emit方法执行时，根据传入的事件名取出回到函数数组，遍历数组中的回调函数逐个执行；<h3 id="20-3-栗子"><a href="#20-3-栗子" class="headerlink" title="20.3 栗子"></a>20.3 栗子</h3></li><li>默认导出一个Bus实例<h4 id="20-3-1-事件总线实例"><a href="#20-3-1-事件总线实例" class="headerlink" title="20.3.1 事件总线实例"></a>20.3.1 事件总线实例</h4></li></ul><pre class=" language-typescript"><code class="language-typescript">type BusClass <span class="token operator">=</span> <span class="token punctuation">{</span>  emit<span class="token punctuation">:</span> <span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">void</span>  on<span class="token punctuation">:</span> <span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> callback<span class="token punctuation">:</span> <span class="token keyword">Function</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">void</span>  off<span class="token punctuation">:</span> <span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">void</span><span class="token punctuation">}</span>type PramsKey <span class="token operator">=</span> <span class="token keyword">number</span> <span class="token operator">|</span> <span class="token keyword">string</span> <span class="token operator">|</span> symboltype List <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token punctuation">[</span>key<span class="token punctuation">:</span> PramsKey<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">Array</span><span class="token operator">&lt;</span><span class="token keyword">Function</span><span class="token operator">></span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Bus</span> <span class="token keyword">implements</span> <span class="token class-name">BusClass</span> <span class="token punctuation">{</span>  list<span class="token punctuation">:</span> List  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">emit</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">:</span> <span class="token keyword">Array</span><span class="token operator">&lt;</span><span class="token keyword">any</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> fnList<span class="token punctuation">:</span> <span class="token keyword">Array</span><span class="token operator">&lt;</span><span class="token keyword">Function</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span>name<span class="token punctuation">]</span>    fnList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>fn <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">on</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> callback<span class="token punctuation">:</span> <span class="token keyword">Function</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> fn<span class="token punctuation">:</span> <span class="token keyword">Array</span><span class="token operator">&lt;</span><span class="token keyword">Function</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    fn<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> fn  <span class="token punctuation">}</span>  <span class="token function">off</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>length<span class="token punctuation">)</span> Reflect<span class="token punctuation">.</span><span class="token function">deleteProperty</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">,</span> name<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Bus</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="20-3-2-组件使用栗子"><a href="#20-3-2-组件使用栗子" class="headerlink" title="20.3.2 组件使用栗子"></a>20.3.2 组件使用栗子</h4><ul><li>两个组件A,B 各自导入事件总线；</li><li>B组件派发事件，A组件接收事件；</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>b<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>BBBB组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emitA<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>派发给A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> Bus <span class="token keyword">from</span> <span class="token string">'../../Bus'</span><span class="token punctuation">;</span><span class="token keyword">let</span> flagB <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token keyword">const</span> emitA <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 修改flagB的值，派发给A</span>  flagB<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token operator">!</span>flagB<span class="token punctuation">.</span>value  Bus<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'on-click'</span><span class="token punctuation">,</span> flagB<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>AAAA组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    {{Flag}}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> Bus <span class="token keyword">from</span> <span class="token string">'../../Bus'</span><span class="token keyword">let</span> Flag <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>Bus<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'on-click'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>flag<span class="token punctuation">:</span> boolean<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 接收B组件的值，并且赋值</span>  Flag<span class="token punctuation">.</span>value <span class="token operator">=</span> flag<span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="20-4-时间总线第三方库mitt"><a href="#20-4-时间总线第三方库mitt" class="headerlink" title="20.4 时间总线第三方库mitt"></a>20.4 时间总线第三方库mitt</h3><ul><li>事件总线已经有现成的第三方库可以使用</li></ul><h4 id="20-4-1-依赖安装以及全局挂载"><a href="#20-4-1-依赖安装以及全局挂载" class="headerlink" title="20.4.1 依赖安装以及全局挂载"></a>20.4.1 依赖安装以及全局挂载</h4><ul><li><code>npm i mitt -S</code></li><li>在<code>main.ts</code>全局挂载它的api</li><li>vue3挂载全局api方式 <code>app.config.globalProperties</code></li><li>需要通过扩展类型获得 <code>$Bus</code>的类型提示</li></ul><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token keyword">import</span> <span class="token string">'../src/assets/css/reset.less'</span><span class="token comment" spellcheck="true">// 引入事件总线</span><span class="token keyword">import</span> mitt <span class="token keyword">from</span> <span class="token string">'mitt'</span><span class="token keyword">const</span> Mit <span class="token operator">=</span> <span class="token function">mitt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// typescript注册</span><span class="token comment" spellcheck="true">// 通过扩展ComponentCustomProperties类型获得类型提示</span><span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">"vue"</span> <span class="token punctuation">{</span>  <span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">ComponentCustomProperties</span> <span class="token punctuation">{</span>    $Bus<span class="token punctuation">:</span> <span class="token keyword">typeof</span> Mit  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// Vue3挂载全局api</span>app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>globalProperties<span class="token punctuation">.</span>$Bus <span class="token operator">=</span> Mitapp<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span></code></pre><h4 id="20-4-2-使用栗子"><a href="#20-4-2-使用栗子" class="headerlink" title="20.4.2 使用栗子"></a>20.4.2 使用栗子</h4><ul><li>定义A,B为兄弟组件</li><li>在组件中通过 <code>getCurrentInstance</code>方法获取实例信息<code>instance</code></li><li>A组件用于派发事件给B, <code>instance?.proxy?.$Bus.emit</code></li><li>B组件监听A派发的事件, <code>instance?.proxy?.$Bus.on</code></li></ul><pre class=" language-html"><code class="language-html">// A组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>AAAA组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>A点击<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> getCurrentInstance<span class="token punctuation">,</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token function">getCurrentInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> emit <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  instance<span class="token operator">?</span><span class="token punctuation">.</span>proxy<span class="token operator">?</span><span class="token punctuation">.</span>$Bus<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'emitA'</span><span class="token punctuation">,</span> <span class="token string">'mitt'</span><span class="token punctuation">)</span>  instance<span class="token operator">?</span><span class="token punctuation">.</span>proxy<span class="token operator">?</span><span class="token punctuation">.</span>$Bus<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'emitA2'</span><span class="token punctuation">,</span> <span class="token string">'mitt2'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><ul><li><code>instance?.proxy?.$Bus.on</code>方法第一个参数为<code>*</code>时标识监听多个事件，回调函数的第一个参数表示<code>事件名称</code>，第二个参数表示<code>属性值</code></li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>b<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>BBBB组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> getCurrentInstance<span class="token punctuation">,</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token function">getCurrentInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// instance?.proxy?.$Bus.on('emitA', (val: any) => {</span><span class="token comment" spellcheck="true">//   console.log(val,'......');</span><span class="token comment" spellcheck="true">// })</span><span class="token comment" spellcheck="true">// '*' 表示监听多个，这时候第一个参数为事件名称，第二个参数为属性值</span>instance<span class="token operator">?</span><span class="token punctuation">.</span>proxy<span class="token operator">?</span><span class="token punctuation">.</span>$Bus<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'*'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>eName<span class="token punctuation">:</span> any<span class="token punctuation">,</span> val2<span class="token punctuation">:</span> any<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>eName<span class="token punctuation">,</span> val2<span class="token punctuation">,</span> <span class="token string">'......'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><ul><li>回调函数也可以定义在监听函数外部，形如：</li></ul><pre class=" language-typescript"><code class="language-typescript"><span class="token operator">&lt;</span>script setup lang<span class="token operator">=</span><span class="token string">"ts"</span><span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">{</span> getCurrentInstance<span class="token punctuation">,</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">const</span> data <span class="token operator">=</span> ref<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token function">getCurrentInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> Bus <span class="token operator">=</span> <span class="token punctuation">(</span>val<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">}</span>instance<span class="token operator">?</span><span class="token punctuation">.</span>proxy<span class="token operator">?</span><span class="token punctuation">.</span>$Bus<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'emitA'</span><span class="token punctuation">,</span> Bus<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 删除事件</span>instance<span class="token operator">?</span><span class="token punctuation">.</span>proxy<span class="token operator">?</span><span class="token punctuation">.</span>$Bus<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">'emitA'</span><span class="token punctuation">,</span> Bus<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 删除所有事件</span>instance<span class="token operator">?</span><span class="token punctuation">.</span>proxy<span class="token operator">?</span><span class="token punctuation">.</span>$Bus<span class="token punctuation">.</span>all<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h2 id="二十一、TSX"><a href="#二十一、TSX" class="headerlink" title="二十一、TSX"></a>二十一、TSX</h2><h3 id="21-1-插件安装与配置"><a href="#21-1-插件安装与配置" class="headerlink" title="21.1 插件安装与配置"></a>21.1 插件安装与配置</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i @vitejs/plugin-vue-jsx -D</code></pre><ul><li><code>tsconfig.json</code>添加配置</li></ul><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"jsx"</span><span class="token operator">:</span> <span class="token string">"preserve"</span><span class="token punctuation">,</span>    <span class="token property">"jsxFactory"</span><span class="token operator">:</span> <span class="token string">"h"</span><span class="token punctuation">,</span>    <span class="token property">"jsxFragmentFactory"</span><span class="token operator">:</span> <span class="token string">"Fragment"</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><ul><li>在vite.config.ts中添加配置</li></ul><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vite'</span><span class="token keyword">import</span> vue <span class="token keyword">from</span> <span class="token string">'@vitejs/plugin-vue'</span><span class="token keyword">import</span> vueJsx <span class="token keyword">from</span> <span class="token string">'@vitejs/plugin-vue-jsx'</span><span class="token comment" spellcheck="true">// https://vitejs.dev/config/</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token function">vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">vueJsx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="21-2-栗子"><a href="#21-2-栗子" class="headerlink" title="21.2 栗子"></a>21.2 栗子</h3><ul><li>在src目录下创建一个 <code>.tsx</code>文件 <code>App.tsx</code>,在组件中引入</li></ul><h4 id="21-2-1-常见用法"><a href="#21-2-1-常见用法" class="headerlink" title="21.2.1 常见用法"></a>21.2.1 常见用法</h4><ul><li>v-model,模板语法为 <code>&#123;变量名&#125;</code>；并且页面展示属性值需要 <code>.value</code>才能读取</li><li>v-show指令正常使用，但是不支持v-if指令</li><li>要达到v-if 的效果，可以使用三元表达式</li></ul><pre class=" language-tsx"><code class="language-tsx">import { ref } from "vue"let v = ref('')const renderDom = () => {  return (    <div>      <div>{v.value}</div>      <input type="text" v-model={v.value} />      <div v-show="show">北极星</div>      {/* <div v-if="vshow">大白</div> */}      { vshow ? <div>大白</div> : <div>dabai</div> }    </div>    </div>  )}export default renderDom</code></pre><ul><li>不支持 v-for 指令，通过 map 循环替代</li><li>不支持 v-bind 指令，通过属性名直接赋值实现 形如 <code>data-index=&#123;item&#125;</code></li><li>不支持 v-on 指令，类似于原生点击事件，驼峰式命名 <code>onClick</code>,并且不能够直接在方法里传参；传参需要使用bind方法，形如<code>onClick=&#123;handleClick.bind(this, item)&#125;</code></li><li>也不支持事件修饰符</li><li>支持 prop 传参</li></ul><pre class=" language-tsx"><code class="language-tsx">let arr = [1,2,3]type Props = {  title: string}const renderDom = (props: Props) => {  return (    <div>      <div>{props.title}</div>      {        arr.map(item => {          return (<div onClick={handleClick.bind(this, item)} data-index={item}>这是：{item}</div>)        })      }    </div>  )}const handleClick = (val: number) => {  console.log('点击了。。。', val);}export default renderDom</code></pre><ul><li><p>父组件传参</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>renderDom</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>这是北极星<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>renderDom</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> renderDom <span class="token keyword">from</span> <span class="token string">'./App'</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li><li><p>支持emit 事件</p><pre class=" language-tsx"><code class="language-tsx">const renderDom = (props: Props, context: any) => {return (  <div>    <div>{props.title}</div>    {      arr.map(item => {        return (<div onClick={handleClick.bind(this, context)} data-index={item}>这是：{item}</div>)      })    }  </div>)}const handleClick = (context: any) => {// console.log('点击了。。。', val);context.emit('on-click', '大白')}</code></pre></li><li><p>父组件接收</p></li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>renderDom</span> <span class="token attr-name">@on-click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleOnClick<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>这是北极星<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>renderDom</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> renderDom <span class="token keyword">from</span> <span class="token string">'./App'</span><span class="token punctuation">;</span><span class="token keyword">const</span> handleOnClick <span class="token operator">=</span> <span class="token punctuation">(</span>val<span class="token punctuation">:</span> string<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="二十二、v-model"><a href="#二十二、v-model" class="headerlink" title="二十二、v-model"></a>二十二、v-model</h2><h3 id="22-1-安装自动引入-vue-api的插件"><a href="#22-1-安装自动引入-vue-api的插件" class="headerlink" title="22.1 安装自动引入 vue api的插件"></a>22.1 安装自动引入 vue api的插件</h3><ul><li><p>安装插件之后，不需要自己导入 ref,reactive等api，直接使用即可</p></li><li><p>vite.config.ts 新增配置项</p></li></ul><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i -D unplugin-auto-import</code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> AutoImport <span class="token keyword">from</span> <span class="token string">'unplugin-auto-import/vite'</span><span class="token keyword">export</span> <span class="token keyword">default</span> defineConfig <span class="token punctuation">{</span>    plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token function">vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">VueJsx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">AutoImport</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        imports<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'vue'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        dts<span class="token punctuation">:</span><span class="token string">'src/auto-import.d.ts'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h3 id="22-2-vue3中的v-mdoel"><a href="#22-2-vue3中的v-mdoel" class="headerlink" title="22.2 vue3中的v-mdoel"></a>22.2 vue3中的v-mdoel</h3><ul><li>v-model是一个语法糖，由props和emit组合而成<h4 id="22-2-1-默认值的改变"><a href="#22-2-1-默认值的改变" class="headerlink" title="22.2.1 默认值的改变"></a>22.2.1 默认值的改变</h4><ul><li>prop 由value -&gt; modelValue</li><li>事件 input -&gt; update:modelValue</li><li>v-bind的 .sync修饰符和组件的 model选项已移除</li><li>新增：支持多个 v-modelValue</li><li>新增：支持自定义修饰符<h4 id="22-2-1-基础使用"><a href="#22-2-1-基础使用" class="headerlink" title="22.2.1 基础使用"></a>22.2.1 基础使用</h4></li></ul></li><li>双向绑定单个属性时，使用v-model,使用多个时，写法为 <code>v-model:自定义属性名称</code></li><li>子组件通过props属性接收，通过 <code>emit(&#39;事件名&#39;, &#39;属性值&#39;)</code>的方式实现双向绑定</li><li>自定义修饰符时，写法 <code>v-model.propertyName</code>,子组件中通过 props 的 <code>modelModifiers: &#123;propertyName: 类型声明&#125;</code>接收；通过 const temp &#x3D; defineProps<Props>() 的方式获取返回对象，父组件的数据通过 <code>temp.modelModifiers.propertyName</code>得到</li><li>使用多个v-model 的情况下，形如 <code>v-model:title.aaa</code>自定义修饰符aaa;子组件props接收的对象名就为 <code>titleModifiers: &#123;aaa: 类型声明&#125;</code></li></ul><h4 id="22-2-2-栗子"><a href="#22-2-2-栗子" class="headerlink" title="22.2.2 栗子"></a>22.2.2 栗子</h4><ul><li>父组件<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleOnClick<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击按钮 --- {{flag}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>标题：{{title}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- v-model 自定义修饰符 .beijix --></span><span class="token comment" spellcheck="true">&lt;!-- 多个v-model时的自定义修饰符 例如 .aaa --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>HelloWorld</span>  <span class="token attr-name">v-model.beijix</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flag<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-model:</span>title.aaa</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>HelloWorld</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> HelloWorld <span class="token keyword">from</span> <span class="token string">'./components/HelloWorld.vue'</span><span class="token keyword">let</span> flag <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">let</span> title <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">'北极星'</span><span class="token punctuation">)</span><span class="token keyword">const</span> handleOnClick <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  flag<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token operator">!</span>flag<span class="token punctuation">.</span>value<span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li><li>子组件</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>子组件--{{title}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>modelValue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>这是子组件的内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>close<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        close      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>type Props <span class="token operator">=</span> <span class="token punctuation">{</span>  modelValue<span class="token punctuation">:</span> boolean  title<span class="token punctuation">:</span> string<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 自定义修饰符</span>  modelModifiers<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    beijix<span class="token punctuation">:</span> boolean  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// v-model:后面的属性名称 + Modifiers</span>  titleModifiers<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    aaa<span class="token punctuation">:</span> string  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> propsData <span class="token operator">=</span> defineProps<span class="token operator">&lt;</span>Props<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> emit <span class="token operator">=</span> <span class="token function">defineEmits</span><span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token string">'update:modelValue'</span><span class="token punctuation">,</span>  <span class="token string">'update:title'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">const</span> close <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>propsData<span class="token punctuation">.</span>modelModifiers<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>propsData<span class="token punctuation">.</span>titleModifiers<span class="token operator">?</span><span class="token punctuation">.</span>aaa<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'update:modelValue'</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>  <span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'update:title'</span><span class="token punctuation">,</span> <span class="token string">'北极星星'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="二十三、自定义指令"><a href="#二十三、自定义指令" class="headerlink" title="二十三、自定义指令"></a>二十三、自定义指令</h2><h3 id="23-1-基本使用以及参数"><a href="#23-1-基本使用以及参数" class="headerlink" title="23.1 基本使用以及参数"></a>23.1 基本使用以及参数</h3><ul><li>自定义指令需要驼峰式命令，形如 <code>vMove</code></li><li>一下栗子为通过自定义指令实现子组件背景颜色切换</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>HelloWorld</span> <span class="token attr-name">v-move</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{background: <span class="token punctuation">'</span>red<span class="token punctuation">'</span>}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>HelloWorld</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Directive<span class="token punctuation">,</span> DirectiveBinding<span class="token punctuation">,</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> HelloWorld <span class="token keyword">from</span> <span class="token string">'./components/HelloWorld.vue'</span><span class="token comment" spellcheck="true">// 自定义类型用于类型推导</span>type Style <span class="token operator">=</span> <span class="token punctuation">{</span>  background<span class="token punctuation">:</span> string<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 可以通过 mounted(...args: Array&lt;any>) 的方式输出 args,查看入参</span><span class="token comment" spellcheck="true">// 打印出结果可以看到：</span>  <span class="token comment" spellcheck="true">/*     1. 第一个参数为指令绑定的html元素，也就是div    2. 第二参数为传过去的属性值以及实例等，    3. 第三个参数为虚拟dom  */</span><span class="token keyword">const</span> vMove<span class="token punctuation">:</span> Directive <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token function">mounted</span><span class="token punctuation">(</span>el<span class="token punctuation">:</span> HTMLElement<span class="token punctuation">,</span> dir<span class="token punctuation">:</span> DirectiveBinding<span class="token operator">&lt;</span>Style<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> dir<span class="token punctuation">.</span>value<span class="token punctuation">.</span>background  <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="23-2-函数简写"><a href="#23-2-函数简写" class="headerlink" title="23.2 函数简写"></a>23.2 函数简写</h3><ul><li>当你想再mounted和updated触发相同行为，且不关心其他钩子函数时，可以使用函数简写的方式</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>value<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>HelloWorld</span> <span class="token attr-name">v-move</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{background: value}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>HelloWorld</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Directive<span class="token punctuation">,</span> DirectiveBinding<span class="token punctuation">,</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> HelloWorld <span class="token keyword">from</span> <span class="token string">'./components/HelloWorld.vue'</span>type Style <span class="token operator">=</span> <span class="token punctuation">{</span>  background<span class="token punctuation">:</span> string<span class="token punctuation">}</span><span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token keyword">const</span> vMove<span class="token punctuation">:</span> Directive <span class="token operator">=</span> <span class="token punctuation">(</span>el<span class="token punctuation">:</span> HTMLElement<span class="token punctuation">,</span> dir<span class="token punctuation">:</span> DirectiveBinding<span class="token operator">&lt;</span>Style<span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> dir<span class="token punctuation">.</span>value<span class="token punctuation">.</span>background<span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="23-3-栗子，自定义指令实现拖拽功能"><a href="#23-3-栗子，自定义指令实现拖拽功能" class="headerlink" title="23.3 栗子，自定义指令实现拖拽功能"></a>23.3 栗子，自定义指令实现拖拽功能</h3><ul><li><ol><li>offsetParent: 返回一个指向最近的（指包含层级上的最近）包含该元素的定位元素或者最近的 table,td,th,body元素</li><li>offsetLeft相对于 offsetParent内边距的距离</li><li>div样式设置为fixed, offsetParent返回null</li></ol></li><li><p>clientX 设置鼠标事件时相对于客户端窗口的水平坐标位置</p></li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-move</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>son<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这是标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Directive<span class="token punctuation">,</span> DirectiveBinding<span class="token punctuation">,</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">const</span> vMove<span class="token punctuation">:</span> Directive<span class="token operator">&lt;</span>any<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span>el<span class="token punctuation">:</span> HTMLElement<span class="token punctuation">,</span> dir<span class="token punctuation">:</span> DirectiveBinding<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 获取操作的dom元素 也就是 box</span>  <span class="token keyword">let</span> moveElement<span class="token punctuation">:</span> HTMLDivElement <span class="token operator">=</span> el<span class="token punctuation">.</span>firstElementChild <span class="token keyword">as</span> HTMLDivElement  <span class="token keyword">const</span> mouseDown <span class="token operator">=</span> <span class="token punctuation">(</span>ev<span class="token punctuation">:</span> MouseEvent<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//  获取鼠标按下时在div中x，y轴的距离</span>    <span class="token keyword">let</span> X <span class="token operator">=</span> ev<span class="token punctuation">.</span>clientX <span class="token operator">-</span> el<span class="token punctuation">.</span>offsetLeft    <span class="token keyword">let</span> Y <span class="token operator">=</span> ev<span class="token punctuation">.</span>clientY <span class="token operator">-</span> el<span class="token punctuation">.</span>offsetTop    <span class="token comment" spellcheck="true">// console.log('这是x，y...', X, Y);</span>    <span class="token keyword">const</span> move <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">:</span> MouseEvent<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> e<span class="token punctuation">.</span>clientX <span class="token operator">-</span> X <span class="token operator">+</span> <span class="token string">'px'</span>      el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> e<span class="token punctuation">.</span>clientY <span class="token operator">-</span> Y <span class="token operator">+</span> <span class="token string">'px'</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token string">'0px'</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token string">'0px'</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>        <span class="token function">parseInt</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">>=</span>        window<span class="token punctuation">.</span>innerWidth <span class="token operator">-</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width<span class="token punctuation">)</span>      <span class="token punctuation">)</span> <span class="token punctuation">{</span>        el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span>          window<span class="token punctuation">.</span>innerWidth <span class="token operator">-</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'px'</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>        <span class="token function">parseInt</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top<span class="token punctuation">)</span> <span class="token operator">>=</span>        window<span class="token punctuation">.</span>innerHeight <span class="token operator">-</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height<span class="token punctuation">)</span>      <span class="token punctuation">)</span> <span class="token punctuation">{</span>        el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span>          window<span class="token punctuation">.</span>innerHeight <span class="token operator">-</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'px'</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// console.log('mouse...', e);</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 鼠标按下时，添加移动事件</span>    document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mousemove'</span><span class="token punctuation">,</span> move<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 鼠标抬起时，清空移动事件</span>    document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mouseup'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      document<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'mousemove'</span><span class="token punctuation">,</span> move<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// // 添加鼠标按下事件</span>  moveElement<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mousedown'</span><span class="token punctuation">,</span> mouseDown<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// console.log(moveElement);</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span>  <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector"><span class="token class">.box</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> antiquewhite<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid red<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-<span class="token number">50%</span>, -<span class="token number">50%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.son</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid black<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> aqua<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h2 id="二十四、hook"><a href="#二十四、hook" class="headerlink" title="二十四、hook"></a>二十四、hook</h2><h3 id="24-1-自定义将图片转base64的钩子函数"><a href="#24-1-自定义将图片转base64的钩子函数" class="headerlink" title="24.1 自定义将图片转base64的钩子函数"></a>24.1 自定义将图片转base64的钩子函数</h3><ul><li>创建一个ts文件，导出一个方法</li><li>组件中通过 import 导入使用</li></ul><h3 id="24-2-栗子"><a href="#24-2-栗子" class="headerlink" title="24.2 栗子"></a>24.2 栗子</h3><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 文件转base64函数</span><span class="token keyword">import</span> <span class="token punctuation">{</span> onMounted <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token keyword">export</span> type ParamVo <span class="token operator">=</span> <span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token keyword">string</span>  imageType<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span><span class="token punctuation">(</span>option<span class="token punctuation">:</span> ParamVo<span class="token punctuation">)</span><span class="token punctuation">:</span> Promise<span class="token operator">&lt;</span><span class="token punctuation">{</span>url<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">}</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>reslove<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> img<span class="token punctuation">:</span> HTMLImageElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>option<span class="token operator">?</span><span class="token punctuation">.</span>el<span class="token punctuation">)</span> as HTMLImageElement      img<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">reslove</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          url<span class="token punctuation">:</span> <span class="token function">base64</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> base64 <span class="token operator">=</span> <span class="token punctuation">(</span>el<span class="token punctuation">:</span> HTMLImageElement<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'canvas'</span><span class="token punctuation">)</span>      <span class="token keyword">const</span> ctx <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">'2d'</span><span class="token punctuation">)</span>      canvas<span class="token punctuation">.</span>width <span class="token operator">=</span> el<span class="token punctuation">.</span>width      canvas<span class="token punctuation">.</span>height <span class="token operator">=</span> el<span class="token punctuation">.</span>height      ctx<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> canvas<span class="token punctuation">.</span>width<span class="token punctuation">,</span> canvas<span class="token punctuation">.</span>height<span class="token punctuation">)</span>      <span class="token keyword">return</span> canvas<span class="token punctuation">.</span><span class="token function">toDataURL</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`image/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>option<span class="token punctuation">.</span>imageType<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></code></pre><ul><li>组件使用：</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>这是标题    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./assets/uu.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> onMounted <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> useBase64<span class="token punctuation">,</span> <span class="token punctuation">{</span> ParamVo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./hooks/index'</span><span class="token keyword">const</span> param <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">as</span> ParamVo<span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> el<span class="token punctuation">:</span> HTMLImageElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#img'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> HTMLImageElement  <span class="token keyword">const</span> type<span class="token punctuation">:</span> string <span class="token operator">=</span> el<span class="token punctuation">.</span>currentSrc<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">(</span>el<span class="token operator">?</span><span class="token punctuation">.</span>currentSrc <span class="token keyword">as</span> string<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>  param<span class="token punctuation">.</span>el <span class="token operator">=</span> <span class="token string">'#img'</span>  param<span class="token punctuation">.</span>imageType <span class="token operator">=</span> type<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">useBase64</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">:</span> <span class="token punctuation">{</span>url<span class="token punctuation">:</span> string<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> base64 <span class="token operator">=</span> res<span class="token punctuation">.</span>url<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'base64数据'</span><span class="token punctuation">,</span> base64<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="二十五、定义全局变量，全局函数"><a href="#二十五、定义全局变量，全局函数" class="headerlink" title="二十五、定义全局变量，全局函数"></a>二十五、定义全局变量，全局函数</h2><h3 id="25-1-写法对比"><a href="#25-1-写法对比" class="headerlink" title="25.1 写法对比"></a>25.1 写法对比</h3><ul><li>Vue3没有prototype属性，使用<code>app.config.globalProperties</code>替代</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// vue2 </span>Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$http <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// vue3</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>globalProperties<span class="token punctuation">.</span>$http <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><ul><li>Vue3移除了过滤器 filters</li></ul><h3 id="25-2-自定义一个-filters"><a href="#25-2-自定义一个-filters" class="headerlink" title="25.2 自定义一个$filters"></a>25.2 自定义一个$filters</h3><ul><li>在<code>mian.ts</code>全局挂载<code>$filters</code>,编写代码逻辑</li><li>添加声明代码 <code>declare</code>,解决组件使用时没有属性提示等问题</li></ul><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// main.ts</span><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> <span class="token string">'./style.css'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>type Filter <span class="token operator">=</span> <span class="token punctuation">{</span>  format<span class="token punctuation">:</span> <span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>val<span class="token punctuation">:</span> T<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">string</span><span class="token punctuation">}</span><span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">'@vue/runtime-core'</span> <span class="token punctuation">{</span>  <span class="token keyword">interface</span> <span class="token class-name">ComponentCustomProperties</span> <span class="token punctuation">{</span>    $filters<span class="token punctuation">:</span> Filter  <span class="token punctuation">}</span><span class="token punctuation">}</span>app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>globalProperties<span class="token punctuation">.</span>$filters <span class="token operator">=</span> <span class="token punctuation">{</span>  format<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>val<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`北极星</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>val<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span></code></pre><pre class=" language-html"><code class="language-html">// .vue组件使用<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    这是标题 {{$filters.format('大白')}}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><h2 id="二十六、自定义V3插件"><a href="#二十六、自定义V3插件" class="headerlink" title="二十六、自定义V3插件"></a>二十六、自定义V3插件</h2><h3 id="26-1-插件"><a href="#26-1-插件" class="headerlink" title="26.1 插件"></a>26.1 插件</h3><ul><li>插件是自包含的代码，通常向Vue添加全局级的功能</li><li>使用时，在<code>createApp()</code>初始化应用程序，调用 <code>use()</code>方法将插件添加至应用程序中；<br>1. use方法注入的是一个对象的话，需要一个install方法来接收一个app<br>1. 如果注入的是一个函数，那么可以直接接收app进行使用</li></ul><h3 id="26-2-自定义Loading插件栗子"><a href="#26-2-自定义Loading插件栗子" class="headerlink" title="26.2 自定义Loading插件栗子"></a>26.2 自定义Loading插件栗子</h3><ul><li><p>定义一个loading.vue组件，组件内部暴露出 <code>show，hide</code>方法</p></li><li><p>定义一个loading.ts文件，内部定义 <code>install</code>函数，入参为<code>app</code>实例，方法内部全局挂载<code>show，hide</code>方法</p></li><li><p><code>main.ts</code>中引入 <code>loading.ts</code>文件，使用<code>app.use()</code>注册该插件，通过<code>declare</code>声明其类型</p></li><li><p>其他组件中使用时</p><ol><li>通过<code>getCurrentInstance()</code>获取当前实例信息，通过<code>&#123;appContext&#125;</code>解构出对象</li><li>需要的方法就在<code>appContext.config.globalProperties.$loading</code>对象当中</li></ol></li></ul><h4 id="26-2-1-loading-vue"><a href="#26-2-1-loading-vue" class="headerlink" title="26.2.1 loading.vue"></a>26.2.1 loading.vue</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>isShow<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>loading<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>loading-content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>加载中。。。。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">let</span> isShow <span class="token operator">=</span> ref<span class="token operator">&lt;</span>boolean<span class="token operator">></span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token keyword">const</span> show <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  isShow<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token keyword">const</span> hide <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  isShow<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token function">defineExpose</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  isShow<span class="token punctuation">,</span>  show<span class="token punctuation">,</span>  hide<span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="26-2-2-loading-ts"><a href="#26-2-2-loading-ts" class="headerlink" title="26.2.2 loading.ts"></a>26.2.2 loading.ts</h4><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span>App<span class="token punctuation">,</span> createVNode<span class="token punctuation">,</span> render<span class="token punctuation">,</span> VNode<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> Loading <span class="token keyword">from</span> <span class="token string">'./index.vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">install</span><span class="token punctuation">(</span>app<span class="token punctuation">:</span> App<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建出虚拟dom</span>    <span class="token keyword">const</span> vnode<span class="token punctuation">:</span> VNode <span class="token operator">=</span> <span class="token function">createVNode</span><span class="token punctuation">(</span>Loading<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 通过 render函数渲染为真实dom</span>    <span class="token function">render</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> document<span class="token punctuation">.</span>body<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// const res = vnode.component?.exposed</span>    <span class="token comment" spellcheck="true">// 全局挂载函数</span>    app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>globalProperties<span class="token punctuation">.</span>$loading <span class="token operator">=</span> <span class="token punctuation">{</span>      show<span class="token punctuation">:</span> vnode<span class="token punctuation">.</span>component<span class="token operator">?</span><span class="token punctuation">.</span>exposed<span class="token operator">?</span><span class="token punctuation">.</span>show<span class="token punctuation">,</span>      hide<span class="token punctuation">:</span> vnode<span class="token punctuation">.</span>component<span class="token operator">?</span><span class="token punctuation">.</span>exposed<span class="token operator">?</span><span class="token punctuation">.</span>hide    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// console.log(res);</span>    app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>globalProperties<span class="token punctuation">.</span>$loading<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="26-2-3-main-ts"><a href="#26-2-3-main-ts" class="headerlink" title="26.2.3 main.ts"></a>26.2.3 main.ts</h4><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> <span class="token string">'./style.css'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token keyword">import</span> Loading <span class="token keyword">from</span> <span class="token string">'./components/loading/index'</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">'@vue/runtime-core'</span> <span class="token punctuation">{</span>  <span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">ComponentCustomProperties</span> <span class="token punctuation">{</span>    $loading<span class="token punctuation">:</span> <span class="token punctuation">{</span>      show<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">void</span><span class="token punctuation">,</span>      hide<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">void</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Loading<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span></code></pre><h4 id="26-2-4-组件使用栗子"><a href="#26-2-4-组件使用栗子" class="headerlink" title="26.2.4 组件使用栗子"></a>26.2.4 组件使用栗子</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>showLoading<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>切换<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> ComponentInternalInstance<span class="token punctuation">,</span> getCurrentInstance <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">{</span> appContext <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">getCurrentInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> ComponentInternalInstance<span class="token keyword">const</span> showLoading <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>appContext<span class="token punctuation">)</span><span class="token punctuation">;</span>  appContext<span class="token punctuation">.</span>config<span class="token punctuation">.</span>globalProperties<span class="token punctuation">.</span>$loading<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    appContext<span class="token punctuation">.</span>config<span class="token punctuation">.</span>globalProperties<span class="token punctuation">.</span>$loading<span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="二十七、scoped和样式穿透deep"><a href="#二十七、scoped和样式穿透deep" class="headerlink" title="二十七、scoped和样式穿透deep"></a>二十七、scoped和样式穿透deep</h2><ul><li>安装element-plus <code>npm i element-plus -S</code></li></ul><h3 id="27-1-scoped"><a href="#27-1-scoped" class="headerlink" title="27.1 scoped"></a>27.1 scoped</h3><ul><li>vue中的scoped通过在dom结构以及css样式上添加唯一不重复的标记<code>:data-v-hash</code>的方式，保证样式的唯一（实现是由postcss转译实现），达到样式私有化；</li><li>scoped渲染规则：</li></ul><ol><li>给html的dom节点添加一个不重复的data属性（形如：data-v-123）来标识其唯一性</li><li>在每句css选择器的末尾（编译后的css语句）加上一个当前组件的data属性选择器（如[data-v-123]）来私有化样式</li><li>如果组件内部包含有其他组件，只会给其他组件的最外层标签上加上当前组件的data属性</li></ol><ul><li>Postcss会给一个组件中所有dom添加一个唯一的动态属性data-v-xxx,然后，给css选择器额外添加一个对应的属性选择器来选择该组件中的dom，这种做法使得样式只作用于含有该属性的dom-组件内部dom，从而达到<code>样式模块化</code>的效果；</li></ul><h3 id="27-2-使用样式穿透栗子"><a href="#27-2-使用样式穿透栗子" class="headerlink" title="27.2 使用样式穿透栗子"></a>27.2 使用样式穿透栗子</h3><ul><li>简单引入<code>el-input</code>,修改输入框背景样式;</li><li>默认在<code>style</code>标签中直接修改背景颜色</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>str<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ipt<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">'打货款打哈萨克的'</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>less<span class="token punctuation">"</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector"><span class="token class">.ipt</span> </span><span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><ul><li>查看控制台，发现 header中的<code>.ipt</code>类名后边带上了选择器，但是body中的属性挂载的是 <code>el-input__inner</code>的父级，所以导致样式无法生效;</li></ul><p><img src="C:/Users/user/AppData/Roaming/Typora/typora-user-images/image-20220725230530595.png" alt="image-20220725230530595"></p><ul><li>解决方式，vue3样式穿透 <code>:deep(.xxx)</code></li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>less<span class="token punctuation">"</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector"><span class="token class">.ipt</span> </span><span class="token punctuation">{</span>  <span class="token selector"><span class="token pseudo-class">:deep(.el-input__inner)</span> </span><span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h3 id="27-3-插槽选择器和全局选择器"><a href="#27-3-插槽选择器和全局选择器" class="headerlink" title="27.3 插槽选择器和全局选择器"></a>27.3 插槽选择器和全局选择器</h3><h4 id="27-3-1-插槽选择器"><a href="#27-3-1-插槽选择器" class="headerlink" title="27.3.1 插槽选择器"></a>27.3.1 插槽选择器</h4><ul><li>子组件中定义一个匿名插槽，父组件传一个div块的内容，div上定义一个类名<code>ipt</code>;形如：<code>&lt;div class=&quot;ipt&quot;&gt;&lt;/div&gt;</code></li><li>子组件在<code>&lt;style&gt;</code>标签中，通过 <code>:sloted(.ipt) &#123;color: red&#125;</code>的方式修改插槽内容的样式</li></ul><pre class=" language-html"><code class="language-html">// 父组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>HelloWorld</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ipt<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>父组件定制的文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>HelloWorld</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> HelloWorld <span class="token keyword">from</span> <span class="token string">'./components/HelloWorld.vue'</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html">//子组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  我是插槽  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector"><span class="token pseudo-class">:slotted(.ipt)</span> </span><span class="token punctuation">{</span>      <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h4 id="27-3-2-全局选择器"><a href="#27-3-2-全局选择器" class="headerlink" title="27.3.2 全局选择器"></a>27.3.2 全局选择器</h4><ul><li>以往定义全局样式<code>&lt;style&gt;</code>标签中不加<code>scoped</code>属性</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector">div </span><span class="token punctuation">{</span>        <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><ul><li>使用全局选择器</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector"><span class="token pseudo-class">:global(div)</span> </span><span class="token punctuation">{</span>        <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h3 id="27-4-动态css"><a href="#27-4-动态css" class="headerlink" title="27.4 动态css"></a>27.4 动态css</h3><h4 id="27-4-1-v-bind动态绑定"><a href="#27-4-1-v-bind动态绑定" class="headerlink" title="27.4.1 v-bind动态绑定"></a>27.4.1 v-bind动态绑定</h4><ul><li>样式属性可以通过 <code>v-bind(类名)</code>动态赋值</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    动态css  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> style <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> style1 <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      color<span class="token punctuation">:</span> red  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>less<span class="token punctuation">"</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector"><span class="token class">.cor</span> </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">v-bind</span><span class="token punctuation">(</span>style<span class="token punctuation">)</span><span class="token punctuation">;</span>     // 对象的话    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">v-bind</span><span class="token punctuation">(</span><span class="token string">'style1.color'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h4 id="27-4-2-module写法"><a href="#27-4-2-module写法" class="headerlink" title="27.4.2 module写法"></a>27.4.2 module写法</h4><ul><li>绑定单个类名时直接给 class 赋值，形如 <code>:class=&#39;$style.cor&#39;</code></li><li>绑定多个<code>:class=&quot;[$style.cor, $style.crr]&quot;</code></li><li>给 module 自定义名称时，<code>$style</code>修改为定义的名称即可，形如 <code>module=&#39;bjx&#39; :class=&#39;bjx.cor</code></li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 绑定单个 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$style.cor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    动态css  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 绑定多个 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>[$style.cor, $style.crr]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    动态css  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 自定义模块名称 --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bjx.cor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    北极星  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> style <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>less<span class="token punctuation">"</span></span> <span class="token attr-name">module</span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector"><span class="token class">.cor</span> </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">v-bind</span><span class="token punctuation">(</span>style<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.crr</span> </span><span class="token punctuation">{</span>    <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid red<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>less<span class="token punctuation">"</span></span> <span class="token attr-name">module</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>bjx<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector"><span class="token class">.cop</span> </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">v-bind</span><span class="token punctuation">(</span>style<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h2 id="二十八、Pinia"><a href="#二十八、Pinia" class="headerlink" title="二十八、Pinia"></a>二十八、Pinia</h2><h3 id="28-1-与vuex的差异，特点"><a href="#28-1-与vuex的差异，特点" class="headerlink" title="28.1 与vuex的差异，特点"></a>28.1 与vuex的差异，特点</h3><ul><li>完整的ts 的支持;</li><li>足够轻量，压缩后的体积只有1kb左右;</li><li>去除 mutations，只有state,getters,actions;. actions支持同步和异步;</li><li>代码扁平化没有模块嵌套，只有store的概念，store之间可以自由使用，每一个store都是独立的·无需手动添加store，store一旦创建便会自动添加;</li><li>支持Vue3和Vue2</li></ul><h3 id="28-2-基本使用"><a href="#28-2-基本使用" class="headerlink" title="28.2 基本使用"></a>28.2 基本使用</h3><ul><li>安装菠萝 <code>npm i pinia -S</code></li><li><code>main.ts</code>中注册store</li></ul><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> <span class="token string">'./style.css'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token keyword">import</span> ElementPlus <span class="token keyword">from</span> <span class="token string">'element-plus'</span><span class="token keyword">import</span> <span class="token string">'element-plus/dist/index.css'</span><span class="token keyword">import</span> <span class="token punctuation">{</span>createPinia<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'pinia'</span><span class="token comment" spellcheck="true">// 导出的是个插件</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createPinia</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ElementPlus<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span></code></pre><ul><li>创建store文件夹，定义store</li></ul><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span>defineStore<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'pinia'</span><span class="token keyword">enum</span> Names <span class="token punctuation">{</span>  Test <span class="token operator">=</span> <span class="token string">'KKK'</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">const</span> useTestStore <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span>Names<span class="token punctuation">.</span>Test<span class="token punctuation">,</span> <span class="token punctuation">{</span>  state<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      name<span class="token punctuation">:</span> <span class="token string">'北极星'</span><span class="token punctuation">,</span>      id<span class="token punctuation">:</span> <span class="token string">'dsadsa'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 相当于computed</span>  getters<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 相当于methods,可以支持同步，异步，提交state</span>  actions<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">modifyName</span><span class="token punctuation">(</span>val<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> val      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'百里登风'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><ul><li>组件中使用时引入</li><li>修改state中属性值的5种方式</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    pinia: {{test.name}}----{{test.id}}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>change<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>修改值<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">import</span> <span class="token punctuation">{</span>useTestStore<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./store'</span>  <span class="token keyword">const</span> test <span class="token operator">=</span> <span class="token function">useTestStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 修改值的方式</span>  <span class="token keyword">const</span> change <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 5. 通过actions内部修改值的方法修改</span>    test<span class="token punctuation">.</span><span class="token function">modifyName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      test<span class="token punctuation">.</span><span class="token function">modifyName</span><span class="token punctuation">(</span><span class="token string">'逆天而行'</span><span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 4.使用$state并且覆盖整个对象</span>    <span class="token comment" spellcheck="true">// test.$state = {</span>    <span class="token comment" spellcheck="true">//   name: '星星有泪',</span>    <span class="token comment" spellcheck="true">//   id: 'iiiuuu'</span>    <span class="token comment" spellcheck="true">// }</span>    <span class="token comment" spellcheck="true">// 3. $patch中接收一个工厂函数</span>    <span class="token comment" spellcheck="true">// test.$patch((state) => {</span>    <span class="token comment" spellcheck="true">//   state.id = 'pppp'</span>    <span class="token comment" spellcheck="true">//   state.name = '哥哥'</span>    <span class="token comment" spellcheck="true">// })</span>    <span class="token comment" spellcheck="true">// 2. 通过$patch,给要修改的属性赋值</span>    <span class="token comment" spellcheck="true">// test.$patch({</span>    <span class="token comment" spellcheck="true">//   name: '大白兔'</span>    <span class="token comment" spellcheck="true">// })</span>    <span class="token comment" spellcheck="true">// 1.直接修改</span>    <span class="token comment" spellcheck="true">// test.name = '大白'</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="28-3-结构-state-中的对象"><a href="#28-3-结构-state-中的对象" class="headerlink" title="28.3 结构 state 中的对象"></a>28.3 结构 state 中的对象</h3><ul><li>结构出来的属性直接使用不具有响应式</li><li>解决办法: 使用<code>pinia中的 storeToRefs 方法</code>包裹对象</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    pinia: {{test.name}}----{{id}}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>change<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>修改值<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">import</span> <span class="token punctuation">{</span>useTestStore<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./store'</span>  <span class="token keyword">import</span> <span class="token punctuation">{</span>storeToRefs<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'pinia'</span>    <span class="token keyword">const</span> test <span class="token operator">=</span> <span class="token function">useTestStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 不使用 storeToRefs方法，那么触发change方法修改值时，页面使用的 id 属性不具有响应式</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span>name<span class="token punctuation">,</span> id<span class="token punctuation">}</span>  <span class="token operator">=</span> <span class="token function">storeToRefs</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 修改值的方式</span>  <span class="token keyword">const</span> change <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    test<span class="token punctuation">.</span>id<span class="token operator">++</span>     <span class="token comment" spellcheck="true">// 或者</span>    id<span class="token punctuation">.</span>value<span class="token operator">++</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="28-4-actions与getters"><a href="#28-4-actions与getters" class="headerlink" title="28.4 actions与getters"></a>28.4 actions与getters</h3><h4 id="28-4-1-使用栗子"><a href="#28-4-1-使用栗子" class="headerlink" title="28.4.1 使用栗子"></a>28.4.1 使用栗子</h4><ul><li>store逻辑</li></ul><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span>defineStore<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'pinia'</span><span class="token keyword">enum</span> Names <span class="token punctuation">{</span>  Test <span class="token operator">=</span> <span class="token string">'KKK'</span><span class="token punctuation">}</span>type User <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">}</span><span class="token keyword">const</span> Login <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Promise<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>reslove<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//模拟异步返回</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token function">reslove</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'北极星'</span><span class="token punctuation">,</span>        age<span class="token punctuation">:</span> <span class="token number">99</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">const</span> useTestStore <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span>Names<span class="token punctuation">.</span>Test<span class="token punctuation">,</span> <span class="token punctuation">{</span>  state<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      user<span class="token punctuation">:</span> <span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      nickName<span class="token punctuation">:</span> <span class="token string">'小飞机'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 相当于computed，用于修饰值</span>  getters<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 计算属性之间可以相互调用</span>    <span class="token function">newNickName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`$$$$-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>nickName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">---</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>getUserAge<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">getUserAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>user<span class="token operator">?</span><span class="token punctuation">.</span>age    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 相当于methods,可以支持同步，异步，提交state</span>  actions<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 方法之间可以相互调用</span>    async <span class="token function">setUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> res <span class="token operator">=</span>  await <span class="token function">Login</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>user <span class="token operator">=</span> res      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setNickname</span><span class="token punctuation">(</span><span class="token string">'大飞机'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">setNickname</span><span class="token punctuation">(</span>val<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>nickName <span class="token operator">=</span> val    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><ul><li>页面组件使用,点击修改方法时，延时两秒页面展示数据</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>actions-user----: {{test.user}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>actions-nickName----: {{test.nickName}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 计算属性 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>getters-----: {{test.newNickName}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>change<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>修改值<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">import</span> <span class="token punctuation">{</span>useTestStore<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./store'</span>    <span class="token keyword">const</span> test <span class="token operator">=</span> <span class="token function">useTestStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 修改值的方式</span>  <span class="token keyword">const</span> change <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    test<span class="token punctuation">.</span><span class="token function">setUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="28-5-store实例的api"><a href="#28-5-store实例的api" class="headerlink" title="28.5 store实例的api"></a>28.5 store实例的api</h3><h4 id="28-5-1-reset"><a href="#28-5-1-reset" class="headerlink" title="28.5.1 $reset"></a>28.5.1 $reset</h4><ul><li>用于重置state中的属性值</li><li>上面<code>28.4.1</code>中的栗子，在修改用户数据之后；调用实例的<code>$reset</code>方法，将用户数据重置为默认值</li></ul><pre class=" language-typescript"><code class="language-typescript"><span class="token operator">&lt;</span>script setup lang<span class="token operator">=</span><span class="token string">"ts"</span><span class="token operator">></span>  <span class="token keyword">import</span> <span class="token punctuation">{</span>useTestStore<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./store'</span>  <span class="token keyword">const</span> test <span class="token operator">=</span> <span class="token function">useTestStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 重置</span>  <span class="token keyword">const</span> reset <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    test<span class="token punctuation">.</span><span class="token function">$reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h4 id="28-5-2-subscripe-与-onAction"><a href="#28-5-2-subscripe-与-onAction" class="headerlink" title="28.5.2 $subscripe 与$onAction"></a>28.5.2 $subscripe 与$onAction</h4><ul><li><code>$subscripe</code>用于监听<code>state</code>中值的变化;类似于 watchEffect</li><li><code>$onAction</code>监听<code>actions</code>方法触发</li></ul><pre class=" language-typescript"><code class="language-typescript"><span class="token operator">&lt;</span>script setup lang<span class="token operator">=</span><span class="token string">"ts"</span><span class="token operator">></span>  <span class="token keyword">import</span> <span class="token punctuation">{</span>useTestStore<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./store'</span>  <span class="token keyword">import</span> <span class="token punctuation">{</span>storeToRefs<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'pinia'</span>    <span class="token keyword">const</span> test <span class="token operator">=</span> <span class="token function">useTestStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// state值改变时触发,类似于 watchEffect</span>  test<span class="token punctuation">.</span><span class="token function">$subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> state<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'subscribe..'</span><span class="token punctuation">,</span> args<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    detached<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">,</span>    deep<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">,</span>    flush<span class="token punctuation">:</span> <span class="token string">'post'</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 第二个参数，设置为true时表示组件销毁后该方法依旧存活</span>  <span class="token comment" spellcheck="true">// args参数中还有 onError等方法，用于捕获失败信息等</span>  test<span class="token punctuation">.</span><span class="token function">$onAction</span><span class="token punctuation">(</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    args<span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'after。。。'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'onaction'</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">true</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 修改值的方式</span>  <span class="token keyword">const</span> change <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    test<span class="token punctuation">.</span><span class="token function">setUser</span><span class="token punctuation">(</span><span class="token string">'战斗机'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> reset <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    test<span class="token punctuation">.</span><span class="token function">$reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h3 id="28-6-pinia插件"><a href="#28-6-pinia插件" class="headerlink" title="28.6 pinia插件"></a>28.6 pinia插件</h3><ul><li>vuex与pinia会在页面刷新时丢失状态，因为刷新时组件生命周期等重新执行，数据被重置；但是有时候我们希望刷新后依旧保留，会将数据存储在<code>localStore 或是 sessionStore</code>中</li><li>通过自定义持久化插件实现以上功能</li></ul><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp<span class="token punctuation">,</span> toRaw <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> <span class="token string">'./style.css'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token keyword">import</span> ElementPlus <span class="token keyword">from</span> <span class="token string">'element-plus'</span><span class="token keyword">import</span> <span class="token string">'element-plus/dist/index.css'</span><span class="token keyword">import</span> <span class="token punctuation">{</span>createPinia<span class="token punctuation">,</span> PiniaPluginContext<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'pinia'</span>type Options <span class="token operator">=</span> <span class="token punctuation">{</span>  key<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 导出的是个插件</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createPinia</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> __defaultKey__ <span class="token operator">=</span> <span class="token string">'beijixing'</span><span class="token keyword">const</span> setStorage <span class="token operator">=</span> <span class="token punctuation">(</span>key<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> val<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">const</span> getStorage <span class="token operator">=</span> <span class="token punctuation">(</span>key<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">?</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> as <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> piniaPlugin <span class="token operator">=</span> <span class="token punctuation">(</span>option<span class="token punctuation">:</span> Options<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 接收 pinia 返回值</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>context<span class="token punctuation">:</span> PiniaPluginContext<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> store <span class="token punctuation">}</span> <span class="token operator">=</span> context    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token function">getStorage</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>option<span class="token punctuation">.</span>key <span class="token operator">?</span><span class="token operator">?</span> __defaultKey__<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>store<span class="token punctuation">.</span>$id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 监听store中属性值的变化,将值存入 localStorage</span>    store<span class="token punctuation">.</span><span class="token function">$subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token function">setStorage</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>option<span class="token punctuation">.</span>key <span class="token operator">?</span><span class="token operator">?</span> __defaultKey__<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>store<span class="token punctuation">.</span>$id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span> <span class="token function">toRaw</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>$state<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      <span class="token operator">...</span>data    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 注册pinia插件</span>store<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">piniaPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  key<span class="token punctuation">:</span> <span class="token string">'pinia'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ElementPlus<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> vue3 </tag>
            
            <tag> TypeScript </tag>
            
            <tag> Composition Api </tag>
            
            <tag> vite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Js闭包</title>
      <link href="/2022/062237937.html"/>
      <url>/2022/062237937.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-什么是闭包"><a href="#1-什么是闭包" class="headerlink" title="1. 什么是闭包"></a>1. 什么是闭包</h2><h3 id="1-1-定义："><a href="#1-1-定义：" class="headerlink" title="1.1 定义："></a>1.1 定义：</h3><ul><li>闭包指的是有权访问另一个函数作用域中的变量的函数<h3 id="1-2-Js代码执行过程"><a href="#1-2-Js代码执行过程" class="headerlink" title="1.2 Js代码执行过程"></a>1.2 Js代码执行过程</h3></li><li>执行过程分为 <code>编译阶段</code> 和 <code>代码执行</code> 阶段</li></ul><ol><li>代码编译阶段: 由编译器完成，将代码翻译为可执行的代码，并且<code>确定作用域规则</code></li><li>执行阶段由Js引擎完成：执行可执行的代码，创建 <code>执行上下文</code><h2 id="2-作用域和作用域链"><a href="#2-作用域和作用域链" class="headerlink" title="2. 作用域和作用域链"></a>2. 作用域和作用域链</h2><h3 id="2-1-作用域"><a href="#2-1-作用域" class="headerlink" title="2.1 作用域"></a>2.1 作用域</h3></li></ol><ul><li>作用域包括 <code>全局作用域</code> 和 <code>函数作用域</code></li><li>Js中将作用域定义为一套规则，用于管理引擎如何在 <code>当前作用域</code> 以及 <code>嵌套子作用域</code> 中根据 <code>标识符名称</code> 进行变量（变量名或者函数名）查找<h3 id="2-2-作用域链"><a href="#2-2-作用域链" class="headerlink" title="2.2 作用域链"></a>2.2 作用域链</h3></li></ul><ol><li>当访问一个变量，编译器执行代码是<code>从当前的作用域查找</code>是否存在这个<code>标识符</code>(指变量名或函数名)，没找到就会<code>去父作用域查找</code>，<br>直到<code>全局作用域</code>为止。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/polarisWrp/photo_stage/images/pic202206220047608.png" alt="image-20220622004703513"></p><ol start="2"><li>作用域链就是由<code>当前作用域</code>与<code>上层作用域</code>的一系列变量对象组成，保证了当前执行的作用域符合 <code>访问权限的变量</code> 和 <code>函数的有序访问</code><br>  函数在<code>调用</code>激活时，会开始创建对应的<code>执行上下文</code>，在执行上下文生成的过程中，<code>变量对象，作用域链，以及this的值</code>会分别被确定。</li></ol><h2 id="3-闭包如何产生"><a href="#3-闭包如何产生" class="headerlink" title="3. 闭包如何产生"></a>3. 闭包如何产生</h2><h3 id="3-1产生的本质"><a href="#3-1产生的本质" class="headerlink" title="3.1产生的本质"></a>3.1产生的本质</h3><ul><li>当前环境存在指向对父级作用域的引用<h3 id="3-2-闭包"><a href="#3-2-闭包" class="headerlink" title="3.2 闭包"></a>3.2 闭包</h3></li><li>闭包是一个特殊的对象，由 执行上下文和在执行上下文中创建的函数组成；当函数执行时，如果访问了上下文中变量对象的值，闭包就产生了。</li></ul><h4 id="3-2-1栗子1"><a href="#3-2-1栗子1" class="headerlink" title="3.2.1栗子1"></a>3.2.1栗子1</h4><pre class=" language-javascript"><code class="language-javascript">  <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> bar<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol><li>如上案例：首先有 <code>执行上下文foo</code>，在<code>foo</code>中定义了<code>函数bar</code>，而通过<code>return</code>返回bar的方式使<code>bar执行</code>。</li></ol><pre><code>当bar执行时，`访问了foo内部的变量a，b`。因此这个时候`闭包产生`。</code></pre><p><img src="https://cdn.jsdelivr.net/gh/polarisWrp/photo_stage/images/pic202206220103484.png" alt="image-20220622010328426"></p><pre><code>2. JavaScript的自动`垃圾回收机制`: 当一个`值在内存中失去引用`时，立即回收机制会根据特殊算法找到并将其回收;3. 函数的 `执行上下文` 在执行完毕之后，`生命周期结束`，该函数的执行上下文就会`失去引用`;其占用的`内存空间`很快就会被 垃圾回收器 释放,可是 `闭包的存在，会阻止这一过程`。 </code></pre><h4 id="3-2-2栗子2"><a href="#3-2-2栗子2" class="headerlink" title="3.2.2栗子2"></a>3.2.2栗子2</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">innnerFoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    fn <span class="token operator">=</span> innnerFoo<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将 innnerFoo的引用，赋值给全局变量中的fn</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 此处的保留的innerFoo的引用</span><span class="token punctuation">}</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ol><li><code>foo()</code>执行完毕,生命周期结束，所占内存本该被垃圾收集器释放。 但是通过 <code>fn= innerFoo</code> 赋值给了全局变量，<br>函数<code>innerFoo引用</code>被保留。</li><li>函数 <code>fn</code> 在<code>bar</code> 中执行，innnerFoo函数内访问了外层a变量；foo的变量对象，也被保留了下来。</li><li>所以 可以称 foo 为闭包函数</li></ol><p><img src="https://cdn.jsdelivr.net/gh/polarisWrp/photo_stage/images/pic202206220116443.png" alt="image-20220622011600388"></p><h3 id="3-3产生闭包原因"><a href="#3-3产生闭包原因" class="headerlink" title="3.3产生闭包原因"></a>3.3产生闭包原因</h3><ul><li>返回函数 </li><li>函数作为参数传递</li></ul><h2 id="4-创建函数"><a href="#4-创建函数" class="headerlink" title="4. 创建函数"></a>4. 创建函数</h2><h3 id="4-1函数分类"><a href="#4-1函数分类" class="headerlink" title="4.1函数分类"></a>4.1函数分类</h3><ul><li>函数分为 <strong>具名函数</strong> 和 <strong>匿名函数</strong></li></ul><h3 id="4-2函数创建方式"><a href="#4-2函数创建方式" class="headerlink" title="4.2函数创建方式"></a>4.2函数创建方式</h3><h4 id="4-2-1声明函数"><a href="#4-2-1声明函数" class="headerlink" title="4.2.1声明函数"></a>4.2.1声明函数</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h4 id="4-2-2创建匿名函数表达式"><a href="#4-2-2创建匿名函数表达式" class="headerlink" title="4.2.2创建匿名函数表达式"></a>4.2.2创建匿名函数表达式</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/**    * 获取指定函数的函数名称（用于兼容IE）    * @param {Function} fun 任意函数    */</span><span class="token keyword">function</span> <span class="token function">getFunctionName</span><span class="token punctuation">(</span>fun<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fun<span class="token punctuation">.</span>name <span class="token operator">!==</span> undefined<span class="token punctuation">)</span>        <span class="token keyword">return</span> fun<span class="token punctuation">.</span>name<span class="token punctuation">;</span>    <span class="token keyword">var</span> ret <span class="token operator">=</span> fun<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ret <span class="token operator">=</span> ret<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token string">'function '</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    ret <span class="token operator">=</span> ret<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> ret<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'('</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="4-2-3创建一个变量，变量的内容为表达式"><a href="#4-2-3创建一个变量，变量的内容为表达式" class="headerlink" title="4.2.3创建一个变量，变量的内容为表达式"></a>4.2.3创建一个变量，变量的内容为<strong>表达式</strong></h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 并且由此创建出来的函数没有函数名, 即为匿名函数</span><span class="token function">getFunctionName</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">.</span>length  <span class="token comment" spellcheck="true">// 0</span></code></pre><h4 id="4-2-4创建具名函数"><a href="#4-2-4创建具名函数" class="headerlink" title="4.2.4创建具名函数"></a>4.2.4创建具名函数</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//创建一个变量，内容为一个带有名称的函数</span><span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 注意： </span>具名函数表达式的 函数名 只能在创建函数内部使用<span class="token number">1</span><span class="token punctuation">.</span> 即采用此种方法创建的函数在函数外层只能使用 fn 不能使用 getName 的函数名。<span class="token number">2</span><span class="token punctuation">.</span> getName 的命名只能在创建的函数内部使用<span class="token comment" spellcheck="true">// 在对象内定义函数如</span><span class="token keyword">var</span> o<span class="token operator">=</span><span class="token punctuation">{</span> fn <span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>…<span class="token punctuation">}</span> <span class="token punctuation">}</span>，也属于函数表达式</code></pre><h4 id="4-2-5-Function构造函数"><a href="#4-2-5-Function构造函数" class="headerlink" title="4.2.5 Function构造函数"></a>4.2.5 Function构造函数</h4><ul><li>可以给 Function 构造函数传一个<strong>函数字符串</strong>，返回 包含这个字符串命令的函数，此种方法创建的是<strong>匿名函数</strong>。</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token string">'alert(1)'</span><span class="token punctuation">)</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/polarisWrp/photo_stage/images/pic202206220131077.png" alt="image-20220622013146034"></p><h4 id="4-2-6自执行函数"><a href="#4-2-6自执行函数" class="headerlink" title="4.2.6自执行函数"></a>4.2.6自执行函数</h4><ul><li>自执行函数属于上述的 <code>函数表达式</code></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="5-作用域链"><a href="#5-作用域链" class="headerlink" title="5.作用域链"></a>5.作用域链</h2><h3 id="5-1-函数作用域问题"><a href="#5-1-函数作用域问题" class="headerlink" title="5.1 函数作用域问题"></a>5.1 函数作用域问题</h3><ul><li>对象内部的函数表达式<pre class=" language-JavaScript"><code class="language-JavaScript">var o={fn:function (){  console.log(fn);}};o.fn();//ERROR报错</code></pre></li><li>非对象内部的函数表达式<pre class=" language-JavaScript"><code class="language-JavaScript">var fn=function (){console.log(fn);};fn(); //function (){console.log(fn);};正确</code></pre><h3 id="5-2总结"><a href="#5-2总结" class="headerlink" title="5.2总结"></a>5.2总结</h3></li><li>使用 var或是’非对象内部的函数表达式内’，可以访问到存放当前函数的变量；在对象内部的不能访问到。</li></ul><ol><li>因为<code>函数作用域链</code>的问题，采用var的是在<code>外部创建了一个fn变量</code>，函数在内部寻找不到fn后向上作用域查找fn，</li><li>而在<code>创建对象内部时</code>，因为<code>没有在函数作用域内创建fn</code>，所以无法访问。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 作用域 </tag>
            
            <tag> Js闭包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Js执行机制(Event Loop)</title>
      <link href="/2022/06207209.html"/>
      <url>/2022/06207209.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-Js单线程"><a href="#1-Js单线程" class="headerlink" title="1.Js单线程"></a>1.Js单线程</h2><h3 id="Js不是多线程原因："><a href="#Js不是多线程原因：" class="headerlink" title="Js不是多线程原因："></a>Js不是多线程原因：</h3><ul><li>因为JS有操作Dom节点的api方法，如果两个线程同时操作一个DOM节点，一个执行删除操作，另一个执行修改等操作就会产生矛盾。<h2 id="2-宏任务与微任务"><a href="#2-宏任务与微任务" class="headerlink" title="2. 宏任务与微任务"></a>2. 宏任务与微任务</h2></li><li>Js引擎分类：把任务分为两类包括 <code>宏任务</code>与<code>微任务</code><h3 id="2-1-宏任务"><a href="#2-1-宏任务" class="headerlink" title="2.1 宏任务"></a>2.1 宏任务</h3></li><li>script 整体代码</li><li>setTimeout、setInterval</li><li>I&#x2F;O</li><li>UI渲染</li><li>postMessage</li><li>MessageChannel</li><li>requestAnimationFrame</li><li>setImmediate(Node.js 环境)<h3 id="2-2-微任务"><a href="#2-2-微任务" class="headerlink" title="2.2 微任务"></a>2.2 微任务</h3></li><li>new Promise.then()</li><li>MutationObserver</li><li>process.nextTick() Node.js环境<h2 id="3-执行规则"><a href="#3-执行规则" class="headerlink" title="3.执行规则"></a>3.执行规则</h2><h3 id="3-1-事件循环机制-Event-Loop"><a href="#3-1-事件循环机制-Event-Loop" class="headerlink" title="3.1 事件循环机制(Event Loop)"></a>3.1 事件循环机制(Event Loop)</h3></li><li>Js异步处理以及多线程的实现由事件循环机制实现</li><li>大体分为 调用栈、消息队列、微任务队列</li></ul><p><img src="https://cdn.jsdelivr.net/gh/polarisWrp/photo_stage/images/pic202206202254999.png" alt="image-20220620225400880"></p><ul><li>事件循环开始时，会从全局栈开始逐行执行代码</li><li>遇到<code>函数</code>会把函数压入调用栈中，被压入的函数称为<code>帧</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/polarisWrp/photo_stage/images/pic202206202259501.png" alt="image-20220620225950452"></p><ul><li>函数执行完成，会在栈中弹出</li></ul><h3 id="3-2普通函数执行-栗子"><a href="#3-2普通函数执行-栗子" class="headerlink" title="3.2普通函数执行 栗子"></a>3.2普通函数执行 栗子</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 2 1 3</span></code></pre><ul><li>首先函数 <code>fn2()</code> 被压入栈，输出<code>2</code> 此时栈底为 <code>fn2()</code></li><li>而后函数 <code>fn1()</code>被压入栈，输出<code>1 </code>弹出 <code>fn1()</code></li><li>最后执行 <code>console.log(3)</code>, 输出<code>3</code> 弹出<code>fn2()</code></li></ul><h3 id="3-3存在宏任务时的执行栗子"><a href="#3-3存在宏任务时的执行栗子" class="headerlink" title="3.3存在宏任务时的执行栗子"></a>3.3存在宏任务时的执行栗子</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1 3 2</span></code></pre><ul><li>首先 <code>fn2()</code> 被压入栈，而后<code>setTimeout</code>里面的回调函数也就是 <code>console.log(2)</code> 会入队在<code>消息队列</code>当中；当<code>调用栈被清空时</code>执行消息队列的函数。</li><li>接着 <code>fn1()</code> 被压入栈，输出<code>1</code>后弹出；接着输出<code> 3</code>，弹出<code>fn2()</code></li><li>此时调用栈清空，执行<code>消息队列</code>函数，输出 2 【这也是为什么setTimeout的延时是最小延时时间】</li></ul><p><img src="https://cdn.jsdelivr.net/gh/polarisWrp/photo_stage/images/pic202206202321748.png" alt="image-20220620232121700"></p><h3 id="3-4微任务栗子"><a href="#3-4微任务栗子" class="headerlink" title="3.4微任务栗子"></a>3.4微任务栗子</h3><ul><li>Async await 创建的微任务会存放在<code>微任务队列</code>中，当<code>调用栈清空时会立即执行</code>，同时<code>在这期间存储的其他微任务</code>也会<code>一并执行</code>。</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>reslove <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    <span class="token function">reslove</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>resloved <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>resloved<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 4、1、3、5、6、2</span></code></pre><ul><li>首先 <code>new Promise</code>被压入栈中，依次输出 <code>4,5</code>后弹出</li><li>接着<code> fn2()</code> 被压入栈中，<code>setTimeout</code>中的回调进入<code>消息队列</code>；<br>-<code> fn1()</code>压入栈 输出<code>1</code>后弹出；接着输出 <code>3</code></li><li><code>then方法</code>中的回调进入微任务队列中；此时弹出<code>fn2()</code> ;调用栈被清空</li><li>立即执行微任务队列，清空消息队列；依次输出了 <code>5(resloved )、 6、2</code>。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/polarisWrp/photo_stage/images/pic202206202334192.png" alt="image-20220620233457135"></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 事件循环机制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Js栈内存与堆内存</title>
      <link href="/2022/061760149.html"/>
      <url>/2022/061760149.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h2><ul><li>JS的内存空间分为<strong>栈(stack)<strong>、</strong>堆(heap)<strong>、</strong>池</strong>(一般也会归类为栈中)。</li><li>其中 <code>栈</code> 存放变量，<code>堆</code> 存放复杂对象，<code>池</code> 存放常量，所以也叫常量池。</li></ul><h2 id="2-栈的数据结构"><a href="#2-栈的数据结构" class="headerlink" title="2.栈的数据结构"></a>2.栈的数据结构</h2><ul><li>存放在栈内的元素只能通过栈的栈顶访问，获取的元素的方式类似于日常生活中从乒乓球筒内取出乒乓球</li><li>栈被称为是后入先出的数据结构 (LIFO last-in-first-out)</li></ul><p><img src="https://cdn.jsdelivr.net/gh/polarisWrp/photo_stage/images/pic202206170021769.png" alt="image-20220617002142687"></p><h2 id="3-堆的数据结构"><a href="#3-堆的数据结构" class="headerlink" title="3.堆的数据结构"></a>3.堆的数据结构</h2><ol><li>堆是一种经过排序的<strong>树形数据结构</strong>，每个结点都有一个值。</li><li>通常我们所说的堆的数据结构，是指<code>二叉堆</code>。</li><li><code>堆的特点</code>是根结点的值最小（或最大），且<code>根结点</code>的两个子树也是一个堆。</li><li>由于堆的这个特性，常用来实现优先队列，堆的存取是随意，这就如同我们在图书馆的书架上取书，<br>虽然书的摆放是有顺序的，但是我们想取任意一本都可以。</li></ol><h2 id="4-变量的类型与内存的关系"><a href="#4-变量的类型与内存的关系" class="headerlink" title="4.变量的类型与内存的关系"></a>4.变量的类型与内存的关系</h2><h3 id="4-1基本数据类型"><a href="#4-1基本数据类型" class="headerlink" title="4.1基本数据类型"></a>4.1基本数据类型</h3><pre class=" language-JavaScript"><code class="language-JavaScript">String Number Boolean null undefined Symbol</code></pre><ul><li>基本数据类型保存在<code>栈内存</code>中;</li><li>基本数据类型占用空间小，大小固定，按值访问;</li><li>但是<code>闭包</code>中的基本数据类型的变量不存于栈内存中，而是存储在<code>堆内存</code>中。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/polarisWrp/photo_stage/images/pic202206170033969.png" alt="image-20220617003337927"></p><h3 id="4-2引用数据类型"><a href="#4-2引用数据类型" class="headerlink" title="4.2引用数据类型"></a>4.2引用数据类型</h3><ul><li>例如 <code>Array,Function,Object</code>可以认为除了上文提到的基本数据类型以外，所有类型都是引用数据类型;</li><li><code>引用数据类型</code>存储在<code>堆内存</code>中;</li><li>引用数据类型占据空间大、大小不固定。</li></ul><ol><li>引用数据类型在栈中存储了<code>指针</code>，该指针<code>指向堆中该实体的起始地址</code>。 </li><li>当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实体</li></ol><pre class=" language-JavaScript"><code class="language-JavaScript">// 基本数据类型-栈内存let a1 = 0;// 基本数据类型-栈内存let a2 = 'this is string';// 基本数据类型-栈内存let a3 = null;// 对象的指针存放在栈内存中，指针指向的对象存放在堆内存中let b = { m: 20 };// 数组的指针存放在栈内存中，指针指向的数组存放在堆内存中let c = [1, 2, 3];</code></pre><p><img src="https://cdn.jsdelivr.net/gh/polarisWrp/photo_stage/images/pic202206170034135.png" alt="image-20220617003402086"></p><ul><li>当我们要访问堆内存中的<code>引用数据类型</code>时，实际上我们首先是从变量中获取了该 <strong>对象的地址指针</strong>， 然后再从 <strong>堆内存</strong> 中取得我们需要的数据。</li></ul><h2 id="5-内存角度分析变量复制"><a href="#5-内存角度分析变量复制" class="headerlink" title="5.内存角度分析变量复制"></a>5.内存角度分析变量复制</h2><h3 id="5-1基本数据类型复制"><a href="#5-1基本数据类型复制" class="headerlink" title="5.1基本数据类型复制"></a>5.1基本数据类型复制</h3><pre class=" language-JavaScript"><code class="language-JavaScript">let a = 20;let b = a;b = 30;console.log(a); // 20</code></pre><p><img src="https://cdn.jsdelivr.net/gh/polarisWrp/photo_stage/images/pic202206170036999.png" alt="image-20220617003655920"></p><ul><li>基本数据类型复制时，栈中会分配新的存储空间；</li><li>这也是使用 <code>JSON.parse(JSON.stringify(data))</code>可以对数据进行深拷贝的原因。</li></ul><h3 id="5-2引用数据类型的复制"><a href="#5-2引用数据类型的复制" class="headerlink" title="5.2引用数据类型的复制"></a>5.2引用数据类型的复制</h3><pre class=" language-JavaScript"><code class="language-JavaScript">let m = { a: 10, b: 20 }let n = mn.a = 15console.log(m.a) //15</code></pre><p><img src="https://cdn.jsdelivr.net/gh/polarisWrp/photo_stage/images/pic202206170038079.png" alt="image-20220617003829031"></p><ul><li>引用数据类型复制时，堆内存会复制一个数据源的地址，指向的是同一个堆内存数据；</li><li>日常开发中对于引用数据类型的复制，应考虑使用深拷贝；从而不影响到数据源。</li></ul><h2 id="6-栈内存与堆内存的比较"><a href="#6-栈内存与堆内存的比较" class="headerlink" title="6.栈内存与堆内存的比较"></a>6.栈内存与堆内存的比较</h2><ul><li>在JS中，基本数据类型变量<code>大小固定</code>，并且<code>操作简单</code>容易，所以把它们放入栈中存储; </li><li>引用类型变量<code>大小不固定</code>，所以把它们分配给堆中，让他们<code>申请空间的时候自己确定大小</code>，这样把它们分开存储能够使得程序运行起来占用的内存最小;</li><li><code>栈内存</code>由于它的特点，所以它的系统效率较高。 <code>堆内存</code>需要分配<code>空间和地址</code>，还<code>要把地址存在栈中</code>，所以效率低于栈。</li></ul><h2 id="7-引用数据类型的深浅拷贝"><a href="#7-引用数据类型的深浅拷贝" class="headerlink" title="7.引用数据类型的深浅拷贝"></a>7.引用数据类型的深浅拷贝</h2><ul><li>手写对象深浅拷贝函数</li></ul><h3 id="7-1-实现思路："><a href="#7-1-实现思路：" class="headerlink" title="7.1 实现思路："></a>7.1 实现思路：</h3><ol><li>判断传入的数据类型，基本数据类型直接返回;</li><li>复杂数据类型判断是null 或是数组还是对象 ;初始化一个空数组或者空对象用于缓存数据;</li><li>递归遍历传入的数组和对象，拷贝到 2 创建出的缓存当中，返回最终结果。</li></ol><h3 id="7-2-栗子"><a href="#7-2-栗子" class="headerlink" title="7.2 栗子"></a>7.2 栗子</h3><pre class=" language-JavaScript"><code class="language-JavaScript">const arr = [1, 2, [22], 23]const testObj = {  a: 1,  b: 2,  c: {    d: 4,  },}function cloneFn(obj) {  // 基本数据类型直接返回  if (typeof obj !== 'object' && typeof obj != null) return obj  const temp = Array.isArray(obj) ? [] : {}  if (Array.isArray(temp)) {    // 数组    obj.forEach(item => {       temp.push(Array.isArray(item) ? cloneFn(item) : item)    })  } else {    // 对象    for (const key in obj) {      if (!obj.hasOwnProperty(key)) return      const valIsObj = typeof obj[key] === 'object'      temp[key] = valIsObj ? cloneFn(obj[key]) : obj[key]    }  }  return temp}const res = cloneFn(testObj)res.a = 9999// res.push(99)console.log(res);console.log(testObj);</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手写常见js函数or方法</title>
      <link href="/2022/061421649.html"/>
      <url>/2022/061421649.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、常见功能函数"><a href="#一、常见功能函数" class="headerlink" title="一、常见功能函数"></a>一、常见功能函数</h2><h3 id="1-防抖，节流函数"><a href="#1-防抖，节流函数" class="headerlink" title="1. 防抖，节流函数"></a>1. 防抖，节流函数</h3><h4 id="1-1-函数防抖"><a href="#1-1-函数防抖" class="headerlink" title="1.1 函数防抖"></a>1.1 函数防抖</h4><ul><li>在延时时间内多次点击，每次点击都会重置延时时间；类似于坐电梯，在一定时间内只要有人按开关，那么电梯就不会关上。</li></ul><pre class=" language-JavaScript"><code class="language-JavaScript">//执行函数， 延迟时长， 是否立即执行debounceFn(fn, delay, immediate){    let timer = null    return function () {        const arg = arguments        cons that = this        if (immediate) {          fn.apply(that,arg)          immediate = false          return        }        if (timer) clearTimeout(timer)        timer = setTimeout(() => {            fn.apply(that, arg)        }, 1000)    }}</code></pre><h4 id="1-2-函数节流"><a href="#1-2-函数节流" class="headerlink" title="1.2 函数节流"></a>1.2 函数节流</h4><ul><li>一定时间内多次点击，执行固定次数</li></ul><pre class=" language-JavaScript"><code class="language-JavaScript">function throttle(fn, wait, immediate) {  let timer = null   return function () {    let _this = this    let args = arguments    if (immediate) {        fn.apply(_this, args)        immediate = false        return    }    if (!timer) {       timeout = setTimeout(() => {        timer = null;        fn.apply(_this, args)      }, wait)    }  }}</code></pre><h3 id="2-递归函数"><a href="#2-递归函数" class="headerlink" title="2. 递归函数"></a>2. 递归函数</h3><h4 id="2-1-递归取出数组中指定的属性值"><a href="#2-1-递归取出数组中指定的属性值" class="headerlink" title="2.1 递归取出数组中指定的属性值"></a>2.1 递归取出数组中指定的属性值</h4><ul><li>数据结构类似如下，嵌套的数据模型与外层相同</li></ul><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Type</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token keyword">string</span>    children<span class="token punctuation">:</span> <span class="token keyword">Array</span><span class="token operator">&lt;</span>Type<span class="token operator">></span> <span class="token operator">|</span> undefined<span class="token punctuation">}</span> list<span class="token punctuation">:</span> <span class="token keyword">Array</span><span class="token operator">&lt;</span>Type<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'kkk'</span><span class="token punctuation">,</span>        children<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            name<span class="token punctuation">:</span> <span class="token string">'ppp'</span><span class="token punctuation">,</span>            children<span class="token punctuation">:</span> <span class="token punctuation">[</span>              <span class="token punctuation">{</span>                name<span class="token punctuation">:</span> <span class="token string">'uuu'</span><span class="token punctuation">,</span>                children<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">}</span>            <span class="token punctuation">]</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span> <span class="token punctuation">]</span></code></pre><ul><li>需求：将数组中name属性值取出，拼接成字符串</li><li>关键点在于 temp 这个数据需要与递归函数隔离开，否则每次调用函数都会重置temp函数；从而无法获取所有名称集合</li></ul><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">getTypeName</span><span class="token punctuation">(</span>arr<span class="token punctuation">:</span> <span class="token keyword">Array</span><span class="token operator">&lt;</span>Type<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">'-'</span>    <span class="token keyword">let</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">function</span> <span class="token function">recursiveFn</span><span class="token punctuation">(</span>list<span class="token punctuation">:</span> <span class="token keyword">Array</span><span class="token operator">&lt;</span>Type<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>                temp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>name<span class="token punctuation">)</span>                <span class="token function">recursiveFn</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>children<span class="token punctuation">)</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                temp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>name<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">recursiveFn</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>    <span class="token keyword">return</span> temp<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">'-'</span><span class="token punctuation">}</span></code></pre><h4 id="2-2-将嵌套的数组数据转为json树形结构"><a href="#2-2-将嵌套的数组数据转为json树形结构" class="headerlink" title="2.2 将嵌套的数组数据转为json树形结构"></a>2.2 将嵌套的数组数据转为json树形结构</h4><ul><li>数据源如下</li></ul><pre class=" language-JavaScript"><code class="language-JavaScript">const arr = [1, 2, [3, [4, 5], 6], 7, [8], 9]方法一function recursiveFn(list) {    const result = []    for (let i = 0; i < list?.length; i++) {        if (typeof list[i] === 'number') {            result.push({                value: list[i]            })        } else if (Array.isArray(list[i])){            result.push({                children: recursiveFn(list[i])            })        }    }    return result}方法二function recursiveFn2(arr) {    if (typeof arr === 'number') {        return {            value: arr        }    } else if (Array.isArray(arr)) {        return arr?.map(item => recursiveFn2(item))    }}recursiveFn(arr)</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日计划-Day Day Up</title>
      <link href="/2022/061312805.html"/>
      <url>/2022/061312805.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、手写js题目"><a href="#一、手写js题目" class="headerlink" title="一、手写js题目"></a>一、手写js题目</h1><h2 id="1-1-JavaScript"><a href="#1-1-JavaScript" class="headerlink" title="1.1 JavaScript"></a>1.1 JavaScript</h2><ul><li><del>防抖节流</del>，promise函数，<del>对象的深浅拷贝</del>，js原型、原型链，instanceof</li><li><del>js事件循环机制（nextTick原理）</del>，浏览器回流与重绘，js闭包，js精度丢失</li><li>常用排序算法 插入，冒泡，快速，选择 </li><li><del>js函数作用域</del> <del>js内存栈与堆</del><h1 id="二、Vue2核心api的手写"><a href="#二、Vue2核心api的手写" class="headerlink" title="二、Vue2核心api的手写"></a>二、Vue2核心api的手写</h1><h2 id="2-1-Vue-Api"><a href="#2-1-Vue-Api" class="headerlink" title="2.1 Vue-Api"></a>2.1 Vue-Api</h2></li><li>双向绑定（响应式原理）</li><li>nextTick原理</li><li>diff算法</li><li>AST抽象语法树</li><li>事件总线（发布订阅模式）<h1 id="三、了解Vue3"><a href="#三、了解Vue3" class="headerlink" title="三、了解Vue3"></a>三、了解Vue3</h1><h2 id="3-1-Vue-3"><a href="#3-1-Vue-3" class="headerlink" title="3.1 Vue-3"></a>3.1 Vue-3</h2></li><li>搭建项目，熟悉api使用</li><li>区分V3提升点</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> My Schedule </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用webpack搭建vuecli</title>
      <link href="/2022/061258326.html"/>
      <url>/2022/061258326.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、基础步骤"><a href="#一、基础步骤" class="headerlink" title="一、基础步骤"></a>一、基础步骤</h1><ol><li><code>npm init</code> 初始化 <code>package.json</code>文件</li><li>创建src目录-&gt;在此目录下创建 main.js 文件作为入口文件</li><li>在 <code>package.json</code> 文件内新增打包命令</li><li>执行 <code>npm run build</code> 查看是否打包成功 （成功的话dist文件夹下会新增打包的文件）<h1 id="二、webpack基础配置"><a href="#二、webpack基础配置" class="headerlink" title="二、webpack基础配置"></a>二、webpack基础配置</h1><h2 id="1、新建文件"><a href="#1、新建文件" class="headerlink" title="1、新建文件"></a>1、新建文件</h2><ul><li>在项目根目录下新增build目录，并且创建<code>webpack.config.js</code>文件<h2 id="2、配置文件"><a href="#2、配置文件" class="headerlink" title="2、配置文件"></a>2、配置文件</h2></li></ul></li></ol><ul><li>webpack.config.js 写入</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 引入核心模块path，用户获取文件路径</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 导出配置信息</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 设置模式</span>    development， production 开发、生产模式    默认生产模式，也可以设置为 none <span class="token operator">*</span><span class="token operator">/</span>    mode<span class="token punctuation">:</span> <span class="token string">'development'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 设置入口文件路径</span>    entry<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../src/main.js'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 设置输出信息</span>        output<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 输出文件名</span>            filename<span class="token punctuation">:</span> <span class="token string">'budle.js'</span><span class="token punctuation">,</span>                path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../build'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3、更改打包"><a href="#3、更改打包" class="headerlink" title="3、更改打包"></a>3、更改打包</h2><ul><li>在<code>package.json</code>文件中更改打包命令，并且执行<code>npm run build</code><pre><code>&quot;build&quot;: &quot;webpack --config build/webpack.config.js&quot;</code></pre></li></ul><p><img src="https://cdn.jsdelivr.net/gh/polarisWrp/photo_stage/images/pic202206120412542.png" alt="image-20220612041213620"></p><h2 id="4、缓存以及自动引入js"><a href="#4、缓存以及自动引入js" class="headerlink" title="4、缓存以及自动引入js"></a>4、缓存以及自动引入js</h2><ul><li>HTML自动引入打包后的js文件</li></ul><ol><li>使用 webpack 来打包我们的模块化后的应用程序，webpack 会生成一个可部署的 &#x2F;dist 目录，然后把打包后的内容放置在此目录中。</li><li>只要 <strong>dist</strong> 目录中的内容部署到 <strong>server</strong> 上，client（通常是浏览器）就能够访问此 server 的网站及其资源。而最后一步获取资源是比较耗费时间的，所以浏览器会使用 <strong>缓存</strong> 。</li><li>浏览器通过<strong>命中缓存</strong>，以降低网络流量，使网站加载速度更快；但是如果我们在部署新版本时不更改资源的文件名，浏览器可能会认为它没有被更新，就会使用它的缓存版本。由于缓存的存在，当你需要获取新的代码时，就会显得很棘手。</li></ol><ul><li>基于以上我们不能每次打包生成同样的文件名，也不会每次打包后去更改 <code>index.html</code> 文件里面引入的打包后的js文件 </li><li>每次打包生成不同名称的文件 <code> html-webpack-plugin</code></li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 安装</span>npm i <span class="token operator">-</span>D html<span class="token operator">-</span>webpack<span class="token operator">-</span>plugin@<span class="token number">4</span></code></pre><h3 id="4-1、新增-public-文件夹，创建-index-html-作为我们的模板文件"><a href="#4-1、新增-public-文件夹，创建-index-html-作为我们的模板文件" class="headerlink" title="4.1、新增 public 文件夹，创建 index.html 作为我们的模板文件"></a>4.1、新增 public 文件夹，创建 index.html 作为我们的模板文件</h3><ul><li>在<code>webpack.config.js</code>中新增配置</li><li>修改输出文件名，确保每次生成的js文件名称不重复</li><li>新增<code>plugin</code>配置，查看生成的<code>index.html</code>文件中是否自动引入了js文件</li></ul><p><img src="https://cdn.jsdelivr.net/gh/polarisWrp/photo_stage/images/pic202206120422014.png" alt="image-20220612042202935"></p><h2 id="5、多入口文件的开发"><a href="#5、多入口文件的开发" class="headerlink" title="5、多入口文件的开发"></a>5、多入口文件的开发</h2><ul><li>定义：多入口文件就是<strong>设置</strong>多个入口文件和<strong>输出</strong>对应打包后的文件</li></ul><ol><li><p>配置单个入口文件时： entry为一个属性</p></li><li><p>配置多个入口文件： entry需要配置成一个对象</p><p>2.1 对象里面的 <strong>属性名</strong> 就是该入口文件的标识，<strong>属性值</strong>就是对应的文件路径，输出时需要在对应的<code>html</code>文件中引入，我们可以通过配置多个<code>html-webpack-plugin</code>的方式实现。</p><p>2.2 在<code>html-webpack-plugin</code>中需要 设置<code>filename</code>来设置输出的<code>html</code>文件名，<code>chunks</code>来关联上面<code>entry</code>里面的入口文件</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/polarisWrp/photo_stage/images/pic202206120426600.png" alt="image-20220612042639527"></p><h3 id="5-1、配置栗子"><a href="#5-1、配置栗子" class="headerlink" title="5.1、配置栗子"></a>5.1、配置栗子</h3><p><del>Talk is cheap,show the code</del></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 引入核心模块path，用户获取文件路径</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"html-webpack-plugin"</span><span class="token punctuation">)</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 导出配置信息</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* 设置模式  development， production 开发、生产模式  默认生产模式，也可以设置为 none */</span>  mode<span class="token punctuation">:</span> <span class="token string">'development'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 设置入口文件路径</span>  entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>    main<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../src/main.js'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    other<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../src/other.js'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 设置输出信息</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 输出文件名</span>    filename<span class="token punctuation">:</span> <span class="token string">'[name].[hash:8].js'</span><span class="token punctuation">,</span>    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../build'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 设置模板</span>      template<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../public/index.html'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      filename<span class="token punctuation">:</span> <span class="token string">'index.html'</span><span class="token punctuation">,</span>      chunks<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'main'</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      template<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../public/other.html'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      filename<span class="token punctuation">:</span> <span class="token string">'other.html'</span><span class="token punctuation">,</span>      chunks<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'other'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//关联上面entry的类名</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h3 id="5-2、清除残余文件，插件-clean-webpack-plugin"><a href="#5-2、清除残余文件，插件-clean-webpack-plugin" class="headerlink" title="5.2、清除残余文件，插件 clean-webpack-plugin"></a>5.2、清除残余文件，插件 <code>clean-webpack-plugin</code></h3><ul><li>由于每次打包都会生成新的文件，旧的文件依旧残留在dist目录里；我们需要的是新的生成之后删除旧的文件</li></ul><pre class=" language-js"><code class="language-js">npm i <span class="token operator">-</span>D clean<span class="token operator">-</span>webpack<span class="token operator">-</span>plugin<span class="token comment" spellcheck="true">//引入</span><span class="token keyword">const</span> <span class="token punctuation">{</span> CleanWebpackPlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"clean-webpack-plugin"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 注册</span>plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span></code></pre><h1 id="三、处理除了js以外的文件"><a href="#三、处理除了js以外的文件" class="headerlink" title="三、处理除了js以外的文件"></a>三、处理除了js以外的文件</h1><ul><li><code>webpack</code>默认只能处理 <strong>js</strong> 和 <strong>json</strong> 文件，要想对其他文件生效，需要加载对应的<code>loader</code></li></ul><h3 id="1、引用css文件"><a href="#1、引用css文件" class="headerlink" title="1、引用css文件"></a>1、引用css文件</h3><ol><li>新建<code>assets</code>静态文件夹，新增<code>normal.css</code>文件</li><li>使用预处理器如 <code>less  sass </code>等，需要安装对应加载器以及新增 <code>.less</code>或 <code>.scss</code>文件</li></ol><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//**注意版本号是否兼容**</span>npm i <span class="token operator">-</span>D style<span class="token operator">-</span>loader@<span class="token number">2</span> css<span class="token operator">-</span>loader@<span class="token number">3</span>  <span class="token comment" spellcheck="true">//如果使用预处理器，则需要多安装相应的预处理器和loader</span>npm i <span class="token operator">-</span>D less less<span class="token operator">-</span>loader@<span class="token number">5</span></code></pre><ul><li>在<code>webpack.config.js</code>文件中新增 <code>loader</code>配置</li></ul><pre class=" language-js"><code class="language-js"> module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    module<span class="token punctuation">:</span> <span class="token punctuation">{</span>        rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 正则匹配所有 .css 结尾的文件</span>            test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 匹配到之后使用的loader，从右向左解析</span>            use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">]</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            test<span class="token punctuation">:</span> <span class="token regex">/\.less$/</span><span class="token punctuation">,</span>            use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span> <span class="token string">'less-loader'</span><span class="token punctuation">]</span>          <span class="token punctuation">}</span>        <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2、添加浏览器前缀"><a href="#2、添加浏览器前缀" class="headerlink" title="2、添加浏览器前缀"></a>2、添加浏览器前缀</h3><ul><li><code>**postcss-loader autoprefixer**</code></li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//注意版本号</span>npm i <span class="token operator">-</span>D postcss<span class="token operator">-</span>loader@<span class="token number">4</span> autoprefixer@<span class="token number">8</span><span class="token number">1</span><span class="token punctuation">.</span>在module中配置postcss<span class="token operator">-</span>loader    module<span class="token punctuation">:</span> <span class="token punctuation">{</span>        rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>             <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">//正则匹配所有.css结尾的文件</span>              test<span class="token punctuation">:</span><span class="token regex">/\.css$/</span><span class="token punctuation">,</span>              <span class="token comment" spellcheck="true">//匹配到之后使用的loader,从右向左解析</span>              use<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span><span class="token string">'css-loader'</span><span class="token punctuation">,</span><span class="token string">'postcss-loader'</span><span class="token punctuation">]</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>              test<span class="token punctuation">:</span><span class="token regex">/\.less$/</span><span class="token punctuation">,</span>              use<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span><span class="token string">'css-loader'</span><span class="token punctuation">,</span><span class="token string">'postcss-loader'</span><span class="token punctuation">,</span><span class="token string">'less-loader'</span><span class="token punctuation">]</span>          <span class="token punctuation">}</span>        <span class="token punctuation">]</span>     <span class="token punctuation">}</span><span class="token number">2</span><span class="token punctuation">.</span> 使autoperfixer生效的方式  <span class="token number">2.1</span>方式一：在<span class="token number">1</span><span class="token punctuation">.</span>基础上还需要在项目根目录新增postcss<span class="token punctuation">.</span>config<span class="token punctuation">.</span>js配置文件；添加如下配置    module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>      plugins<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'autoprefixer'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token number">2.2</span>方式二：在<span class="token number">1</span><span class="token punctuation">.</span> 的基础上修改配置如下     use<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span><span class="token string">'css-loader'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>         loader<span class="token punctuation">:</span> <span class="token string">'postcss-loader'</span><span class="token punctuation">,</span>         options<span class="token punctuation">:</span> <span class="token punctuation">{</span>             plugins<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'autoprefixer'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">'less-loader'</span><span class="token punctuation">]</span></code></pre><ul><li>在<code>index.html</code>中样式被添加到了style标签中；但如果样式文件过多的时候；index文件就会过于混乱，咱们需要把css文件拆分出去。通过外链的方式引入。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/polarisWrp/photo_stage/images/pic202206120444950.png" alt="image-20220612044417880"></p><h3 id="3、抽离css文件-mini-css-extract-plugin-，以外链的方式引入它"><a href="#3、抽离css文件-mini-css-extract-plugin-，以外链的方式引入它" class="headerlink" title="3、抽离css文件  **mini-css-extract-plugin** ，以外链的方式引入它"></a>3、抽离css文件  <code>**mini-css-extract-plugin** </code>，以外链的方式引入它</h3><pre class=" language-js"><code class="language-js">npm i <span class="token operator">-</span>D mini<span class="token operator">-</span>css<span class="token operator">-</span>extract<span class="token operator">-</span>plugin@<span class="token number">0.9</span><span class="token punctuation">.</span><span class="token number">0</span>module<span class="token punctuation">:</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//配置模块规则</span>        rules<span class="token punctuation">:</span><span class="token punctuation">[</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//正则匹配所有.css结尾的文件</span>                test<span class="token punctuation">:</span><span class="token regex">/\.css$/i</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">//匹配到之后使用的loader,从右向左解析</span>                use<span class="token punctuation">:</span><span class="token punctuation">[</span>MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span><span class="token string">'css-loader'</span><span class="token punctuation">,</span><span class="token string">'postcss-loader'</span><span class="token punctuation">]</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                test<span class="token punctuation">:</span><span class="token regex">/\.less$/i</span><span class="token punctuation">,</span>                use<span class="token punctuation">:</span><span class="token punctuation">[</span>MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span><span class="token string">'css-loader'</span><span class="token punctuation">,</span><span class="token string">'postcss-loader'</span><span class="token punctuation">,</span><span class="token string">'less-loader'</span><span class="token punctuation">]</span>            <span class="token punctuation">}</span>                    <span class="token punctuation">]</span> <span class="token punctuation">}</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/polarisWrp/photo_stage/images/pic202206120445073.png" alt="image-20220612044525018"></p><h3 id="4、打包其他文件：图片，字体，媒体等"><a href="#4、打包其他文件：图片，字体，媒体等" class="headerlink" title="4、打包其他文件：图片，字体，媒体等"></a>4、打包其他文件：图片，字体，媒体等</h3><pre class=" language-js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">.</span> 对图片、字体、媒体等静态资源一般使用url<span class="token operator">-</span>loader进行处理后放入打包目录里面，<span class="token number">2</span><span class="token punctuation">.</span> url<span class="token operator">-</span>loader<span class="token punctuation">:</span>如果文件小于限制的大小会转成base64编码<span class="token punctuation">,</span>否则使用file<span class="token operator">-</span>loader将文件移动到输出的目录中<span class="token number">3</span><span class="token punctuation">.</span> url<span class="token operator">-</span>loader内置了file<span class="token operator">-</span>loader所以不需要安装file<span class="token operator">-</span>loadernpm i <span class="token operator">-</span>D  url<span class="token operator">-</span>loader@<span class="token number">4</span> file<span class="token operator">-</span>loader@<span class="token number">4</span>rules<span class="token punctuation">:</span><span class="token punctuation">[</span>       <span class="token comment" spellcheck="true">//处理图片</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//正则匹配图片格式</span>        test<span class="token punctuation">:</span><span class="token regex">/\.(jpe?g|png|gif)$/i</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span><span class="token punctuation">[</span>            <span class="token punctuation">{</span>                loader<span class="token punctuation">:</span><span class="token string">'url-loader'</span><span class="token punctuation">,</span>                options<span class="token punctuation">:</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//限制文件大小</span>                    limit<span class="token punctuation">:</span><span class="token number">10240</span><span class="token punctuation">,</span>                    <span class="token comment" spellcheck="true">//超出上面限制之后使用的loader ext是文件本来的扩展名</span>                    name<span class="token punctuation">:</span><span class="token string">'image/[name].[hash:8].[ext]'</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span>执行npm run build 可以看到dist文件下下面多了image文件夹，里面包含刚才在main<span class="token punctuation">.</span>js里引入的图片，其他静态资源配置类似。</code></pre><h3 id="5、babel-loader需要和babel-core搭配使用"><a href="#5、babel-loader需要和babel-core搭配使用" class="headerlink" title="5、babel-loader需要和babel-core搭配使用"></a>5、babel-loader需要和babel-core搭配使用</h3><ul><li>因为不是所有浏览器都能支持es6+语法，需要我们转义成es5</li></ul><pre class=" language-js"><code class="language-js">babel<span class="token operator">-</span>loader <span class="token number">8</span><span class="token punctuation">.</span>x 对应babel<span class="token operator">-</span>core <span class="token number">7</span><span class="token punctuation">.</span>xbabel<span class="token operator">-</span>loader <span class="token number">7</span><span class="token punctuation">.</span>x 对应babel<span class="token operator">-</span>core <span class="token number">6</span><span class="token punctuation">.</span>xnpm i <span class="token operator">-</span>D babel<span class="token operator">-</span>loader @babel<span class="token operator">/</span>preset<span class="token operator">-</span>env @babel<span class="token operator">/</span>corerules<span class="token punctuation">:</span><span class="token punctuation">[</span>       <span class="token comment" spellcheck="true">//处理js语法浏览器兼容问题</span>    <span class="token punctuation">{</span>        test<span class="token punctuation">:</span><span class="token string">'/\.js$/'</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span><span class="token punctuation">{</span>            loader<span class="token punctuation">:</span><span class="token string">'bable-loader'</span><span class="token punctuation">,</span>            options<span class="token punctuation">:</span><span class="token punctuation">{</span>                presets<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'@babel/preset-env'</span><span class="token punctuation">]</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//排除依赖下的js</span>        exclude<span class="token punctuation">:</span><span class="token regex">/node_modules/</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><ul><li>使用<code>babel-loader</code>不能处理如promise,generator,set,map,proxy等新的api，需要借助<code>babel-polyfill</code></li></ul><pre class=" language-js"><code class="language-js">npm i <span class="token operator">-</span>D bable<span class="token operator">/</span>polyfill<span class="token comment" spellcheck="true">// 更改入口文件配置</span>entry<span class="token punctuation">:</span><span class="token punctuation">{</span>    main<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">"@babel/polyfill"</span><span class="token punctuation">,</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'../src/main.js'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    other<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">"@babel/polyfill"</span><span class="token punctuation">,</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'../src/other.js'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><ul><li>至此，都是基础webpack4版本对js,css等静态资源的基础配置</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 引入内置模块path, 用于获取文件路径</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/* 插件plugin */</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">{</span> CleanWebpackPlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'clean-webpack-plugin'</span><span class="token punctuation">)</span><span class="token keyword">const</span> MiniCssExtractPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mini-css-extract-plugin'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">{</span> loader <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mini-css-extract-plugin'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 导出配置信息</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/*     设置模式，默认为生产模式 production;也可以是none  */</span>  mode<span class="token punctuation">:</span> <span class="token string">'development'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/*     入口文件 【单个入口是属性，配置多个入口是需要配置成对象】    path.reslove() 由相对路劲计算出绝对路径; __dirname指的是当前模块的目录名称  */</span>  <span class="token comment" spellcheck="true">// entry: path.resolve(__dirname, '../src/main.js'),</span>  entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>    main<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"@babel/polyfill"</span><span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>      __dirname<span class="token punctuation">,</span>      <span class="token string">'../src/main.js'</span>    <span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    other<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">"@babel/polyfill"</span><span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>      __dirname<span class="token punctuation">,</span>      <span class="token string">'../src/other.js'</span>    <span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/* 出口信息 */</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 输出文件名 确保每次生成的文件名不重复，防止文件更新后浏览器仍使用缓存文件</span>    filename<span class="token punctuation">:</span> <span class="token string">'[name].[hash:8].js'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 输出文件路径</span>    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>      __dirname<span class="token punctuation">,</span>      <span class="token string">'../dist'</span>    <span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token comment" spellcheck="true">// 该插件会自动引入生成的js文件</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      template<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>        __dirname<span class="token punctuation">,</span>        <span class="token string">'../public/index.html'</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 设置html模板</span>      filename<span class="token punctuation">:</span> <span class="token string">'index.html'</span><span class="token punctuation">,</span>      chunks<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'main'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//用于关联entry的文件</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      template<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>        __dirname<span class="token punctuation">,</span>        <span class="token string">'../public/other.html'</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>      filename<span class="token punctuation">:</span> <span class="token string">'other.html'</span><span class="token punctuation">,</span>      chunks<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'other'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      filename<span class="token punctuation">:</span> <span class="token string">'[name].[hash:8].css'</span><span class="token punctuation">,</span>      chunkFilename<span class="token punctuation">:</span> <span class="token string">'[id].css'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 配置模块规则</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>          MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span>          <span class="token string">'css-loader'</span><span class="token punctuation">,</span>          <span class="token string">'postcss-loader'</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.less$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>          MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span>          <span class="token string">'css-loader'</span><span class="token punctuation">,</span>          <span class="token string">'postcss-loader'</span><span class="token punctuation">,</span>          <span class="token string">'less-loader'</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.(jp?g|png|gif)$/i</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            loader<span class="token punctuation">:</span> <span class="token string">'url-loader'</span><span class="token punctuation">,</span>            options<span class="token punctuation">:</span> <span class="token punctuation">{</span>              limit<span class="token punctuation">:</span> <span class="token number">10240</span><span class="token punctuation">,</span>              fallback<span class="token punctuation">:</span> <span class="token punctuation">{</span>                loader<span class="token punctuation">:</span> <span class="token string">'file-loader'</span><span class="token punctuation">,</span>                options<span class="token punctuation">:</span> <span class="token punctuation">{</span>                  <span class="token comment" spellcheck="true">// 超出限制之后使用file-loader;ext是文件本来的扩展名</span>                  name<span class="token punctuation">:</span> <span class="token string">'image/[name].[hash:8].[ext]'</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>              <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.(mp4|webm|ogg|mp3|wav|flac|aac)(\?.*)?$/</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//媒体文件</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            loader<span class="token punctuation">:</span> <span class="token string">'url-loader'</span><span class="token punctuation">,</span>            options<span class="token punctuation">:</span> <span class="token punctuation">{</span>              limit<span class="token punctuation">:</span> <span class="token number">10240</span><span class="token punctuation">,</span>              fallback<span class="token punctuation">:</span> <span class="token punctuation">{</span>                loader<span class="token punctuation">:</span> <span class="token string">'file-loader'</span><span class="token punctuation">,</span>                options<span class="token punctuation">:</span> <span class="token punctuation">{</span>                  name<span class="token punctuation">:</span> <span class="token string">'media/[name].[hash:8].[ext]'</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>              <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.(woff2?|eot|ttf|otf)(\?.*)?$/i</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 字体</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            loader<span class="token punctuation">:</span> <span class="token string">'url-loader'</span><span class="token punctuation">,</span>            options<span class="token punctuation">:</span> <span class="token punctuation">{</span>              limit<span class="token punctuation">:</span> <span class="token number">10240</span><span class="token punctuation">,</span>              fallback<span class="token punctuation">:</span> <span class="token punctuation">{</span>                loader<span class="token punctuation">:</span> <span class="token string">'file-loader'</span><span class="token punctuation">,</span>                options<span class="token punctuation">:</span> <span class="token punctuation">{</span>                  name<span class="token punctuation">:</span> <span class="token string">'fonts/[name].[hash:8].[ext]'</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>              <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.js$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            loader<span class="token punctuation">:</span> <span class="token string">'babel-loader'</span><span class="token punctuation">,</span>            options<span class="token punctuation">:</span> <span class="token punctuation">{</span>              presets<span class="token punctuation">:</span> <span class="token punctuation">[</span>                <span class="token string">'@babel/preset-env'</span><span class="token punctuation">,</span>              <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 排除依赖下的js</span>        exclude<span class="token punctuation">:</span> <span class="token regex">/node_modules/</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><h1 id="四、搭建一个vue-cli"><a href="#四、搭建一个vue-cli" class="headerlink" title="四、搭建一个vue-cli"></a>四、搭建一个vue-cli</h1><h2 id="1、准备"><a href="#1、准备" class="headerlink" title="1、准备"></a>1、准备</h2><ol><li>vue是单文件组件，使用的是.vue文件，需要使用vue-loader来解析.vue文件</li><li>每个vue文件里面包含三个部分template(模板)、script(逻辑)、style(样式)；需要使用vue-template-compiler来编译模板,vue-style-loader来应用样式</li></ol><h2 id="2、依赖安装"><a href="#2、依赖安装" class="headerlink" title="2、依赖安装"></a>2、依赖安装</h2><ul><li><code>npm i -D vue-loader vue-template-compiler vue-style-loader </code></li><li><code>npm i -S vue</code></li></ul><h3 id="2-1、配置-webpack-dev-server-进行热更新"><a href="#2-1、配置-webpack-dev-server-进行热更新" class="headerlink" title="2.1、配置 webpack-dev-server 进行热更新"></a>2.1、配置 <code>webpack-dev-server</code> 进行热更新</h3><ul><li>热更新允许在运行时替换，添加，删除各种模块，而无需进行完全刷新重新加载整个页面。热更新中的<strong>热</strong>我们可以理解为这个模块正在运行中，<strong>热替换</strong>就是将<strong>正在运行的模块</strong>进行替换。</li></ul><pre class=" language-js"><code class="language-js">npm i <span class="token operator">-</span>D webpack<span class="token operator">-</span>dev<span class="token operator">-</span>serverwebpack<span class="token punctuation">.</span>config<span class="token punctuation">.</span>js新增配置<span class="token number">1</span><span class="token punctuation">.</span> 配置开发服务器  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>    port<span class="token punctuation">:</span> <span class="token number">8080</span><span class="token punctuation">,</span>    hot<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//开启热更新</span>    contentBase<span class="token punctuation">:</span> <span class="token string">'../dist'</span> <span class="token comment" spellcheck="true">//告诉服务器内容来源</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">.</span> src目录下新增App<span class="token punctuation">.</span>vue作为根组件<span class="token number">3</span><span class="token punctuation">.</span> 修改<span class="token keyword">public</span>文件下的index<span class="token punctuation">.</span>html<span class="token punctuation">;</span>它添加 div<span class="token number">4</span><span class="token punctuation">.</span> <span class="token keyword">package</span><span class="token punctuation">.</span>json 新增配置 <span class="token string">"dev"</span><span class="token punctuation">:</span> <span class="token string">"webpack-dev-server --config build/webpack.config.js --open"</span><span class="token number">5</span><span class="token punctuation">.</span> 更改webpack<span class="token operator">-</span>cli版本号 npm i <span class="token operator">-</span>D webpack<span class="token operator">-</span>cli@<span class="token number">3</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">package</span><span class="token punctuation">.</span>json<span class="token punctuation">{</span>  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"webpack_4"</span><span class="token punctuation">,</span>  <span class="token string">"version"</span><span class="token punctuation">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>  <span class="token string">"description"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token string">"main"</span><span class="token punctuation">:</span> <span class="token string">"index.js"</span><span class="token punctuation">,</span>  <span class="token string">"scripts"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"test"</span><span class="token punctuation">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span><span class="token punctuation">,</span>    <span class="token string">"dev"</span><span class="token punctuation">:</span> <span class="token string">"webpack-dev-server --config build/webpack.config.js --open"</span><span class="token punctuation">,</span>    <span class="token string">"build"</span><span class="token punctuation">:</span> <span class="token string">"webpack --config build/webpack.config.js"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">"keywords"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string">"author"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token string">"license"</span><span class="token punctuation">:</span> <span class="token string">"ISC"</span><span class="token punctuation">,</span>  <span class="token string">"devDependencies"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"@babel/core"</span><span class="token punctuation">:</span> <span class="token string">"^7.18.2"</span><span class="token punctuation">,</span>    <span class="token string">"@babel/preset-env"</span><span class="token punctuation">:</span> <span class="token string">"^7.18.2"</span><span class="token punctuation">,</span>    <span class="token string">"@webpack-cli/serve"</span><span class="token punctuation">:</span> <span class="token string">"^1.6.1"</span><span class="token punctuation">,</span>    <span class="token string">"autoprefixer"</span><span class="token punctuation">:</span> <span class="token string">"^8.6.5"</span><span class="token punctuation">,</span>    <span class="token string">"babel-loader"</span><span class="token punctuation">:</span> <span class="token string">"^8.2.5"</span><span class="token punctuation">,</span>    <span class="token string">"babel-preset-es2015"</span><span class="token punctuation">:</span> <span class="token string">"^6.24.1"</span><span class="token punctuation">,</span>    <span class="token string">"clean-webpack-plugin"</span><span class="token punctuation">:</span> <span class="token string">"^4.0.0"</span><span class="token punctuation">,</span>    <span class="token string">"css-loader"</span><span class="token punctuation">:</span> <span class="token string">"^3.6.0"</span><span class="token punctuation">,</span>    <span class="token string">"file-loader"</span><span class="token punctuation">:</span> <span class="token string">"^4.3.0"</span><span class="token punctuation">,</span>    <span class="token string">"html-webpack-plugin"</span><span class="token punctuation">:</span> <span class="token string">"^4.5.2"</span><span class="token punctuation">,</span>    <span class="token string">"less"</span><span class="token punctuation">:</span> <span class="token string">"^4.1.2"</span><span class="token punctuation">,</span>    <span class="token string">"less-loader"</span><span class="token punctuation">:</span> <span class="token string">"^5.0.0"</span><span class="token punctuation">,</span>    <span class="token string">"mini-css-extract-plugin"</span><span class="token punctuation">:</span> <span class="token string">"^0.9.0"</span><span class="token punctuation">,</span>    <span class="token string">"postcss-loader"</span><span class="token punctuation">:</span> <span class="token string">"^4.3.0"</span><span class="token punctuation">,</span>    <span class="token string">"style-loader"</span><span class="token punctuation">:</span> <span class="token string">"^2.0.0"</span><span class="token punctuation">,</span>    <span class="token string">"url-loader"</span><span class="token punctuation">:</span> <span class="token string">"^4.1.1"</span><span class="token punctuation">,</span>    <span class="token string">"vue"</span><span class="token punctuation">:</span> <span class="token string">"^2.6.14"</span><span class="token punctuation">,</span>    <span class="token string">"vue-loader"</span><span class="token punctuation">:</span> <span class="token string">"^15.7.0"</span><span class="token punctuation">,</span>    <span class="token string">"vue-style-loader"</span><span class="token punctuation">:</span> <span class="token string">"^4.1.3"</span><span class="token punctuation">,</span>    <span class="token string">"vue-template-compiler"</span><span class="token punctuation">:</span> <span class="token string">"^2.6.14"</span><span class="token punctuation">,</span>    <span class="token string">"webpack"</span><span class="token punctuation">:</span> <span class="token string">"^4.46.0"</span><span class="token punctuation">,</span>    <span class="token string">"webpack-cli"</span><span class="token punctuation">:</span> <span class="token string">"^4.9.2"</span><span class="token punctuation">,</span>    <span class="token string">"webpack-dev-server"</span><span class="token punctuation">:</span> <span class="token string">"^4.9.0"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">"dependencies"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"@babel/polyfill"</span><span class="token punctuation">:</span> <span class="token string">"^7.12.1"</span><span class="token punctuation">,</span>    <span class="token string">"@vue/compiler-sfc"</span><span class="token punctuation">:</span> <span class="token string">"^3.2.36"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-js"><code class="language-js">webpack<span class="token punctuation">.</span>config<span class="token punctuation">.</span>js<span class="token comment" spellcheck="true">// 引入内置模块path, 用于获取文件路径</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/* 插件plugin */</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">{</span> CleanWebpackPlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'clean-webpack-plugin'</span><span class="token punctuation">)</span><span class="token keyword">const</span> MiniCssExtractPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mini-css-extract-plugin'</span><span class="token punctuation">)</span><span class="token keyword">const</span> VueLoaderPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'vue-loader/lib/plugin'</span><span class="token punctuation">)</span><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 导出配置信息</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 配置开发服务器</span>  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>      directory<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//告诉服务器内容来源</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    port<span class="token punctuation">:</span> <span class="token number">8080</span><span class="token punctuation">,</span>    hot<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//开启热更新</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/* 设置模式，默认为生产模式 production;也可以是none*/</span>  mode<span class="token punctuation">:</span> <span class="token string">'development'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/*     入口文件 【单个入口是属性，配置多个入口是需要配置成对象】    path.reslove() 由相对路劲计算出绝对路径; __dirname指的是当前模块的目录名称  */</span>  entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>    main<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../src/main.js'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">/* 出口信息 */</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 输出文件名 确保每次生成的文件名不重复，防止文件更新后浏览器仍使用缓存文件</span>    filename<span class="token punctuation">:</span> <span class="token string">'[name].[hash:8].js'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 输出文件路径</span>    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token comment" spellcheck="true">// 该插件会自动引入生成的js文件</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      template<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>        __dirname<span class="token punctuation">,</span>        <span class="token string">'../public/index.html'</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 设置html模板</span>      filename<span class="token punctuation">:</span> <span class="token string">'index.html'</span><span class="token punctuation">,</span>      chunks<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'main'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//用于关联entry的文件</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      filename<span class="token punctuation">:</span> <span class="token string">'[name].[hash:8].css'</span><span class="token punctuation">,</span>      chunkFilename<span class="token punctuation">:</span> <span class="token string">'[id].css'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">VueLoaderPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>HotModuleReplacementPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token punctuation">]</span><span class="token punctuation">,</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 配置模块规则</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.vue$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'vue-loader'</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>          MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span>          <span class="token string">'css-loader'</span><span class="token punctuation">,</span>          <span class="token string">'postcss-loader'</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.less$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>          MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span>          <span class="token string">'css-loader'</span><span class="token punctuation">,</span>          <span class="token string">'postcss-loader'</span><span class="token punctuation">,</span>          <span class="token string">'less-loader'</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.(jp?g|png|gif)$/i</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            loader<span class="token punctuation">:</span> <span class="token string">'url-loader'</span><span class="token punctuation">,</span>            options<span class="token punctuation">:</span> <span class="token punctuation">{</span>              limit<span class="token punctuation">:</span> <span class="token number">10240</span><span class="token punctuation">,</span>              fallback<span class="token punctuation">:</span> <span class="token punctuation">{</span>                loader<span class="token punctuation">:</span> <span class="token string">'file-loader'</span><span class="token punctuation">,</span>                options<span class="token punctuation">:</span> <span class="token punctuation">{</span>                  <span class="token comment" spellcheck="true">// 超出限制之后使用file-loader;ext是文件本来的扩展名</span>                  name<span class="token punctuation">:</span> <span class="token string">'image/[name].[hash:8].[ext]'</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>              <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.(mp4|webm|ogg|mp3|wav|flac|aac)(\?.*)?$/</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//媒体文件</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            loader<span class="token punctuation">:</span> <span class="token string">'url-loader'</span><span class="token punctuation">,</span>            options<span class="token punctuation">:</span> <span class="token punctuation">{</span>              limit<span class="token punctuation">:</span> <span class="token number">10240</span><span class="token punctuation">,</span>              fallback<span class="token punctuation">:</span> <span class="token punctuation">{</span>                loader<span class="token punctuation">:</span> <span class="token string">'file-loader'</span><span class="token punctuation">,</span>                options<span class="token punctuation">:</span> <span class="token punctuation">{</span>                  name<span class="token punctuation">:</span> <span class="token string">'media/[name].[hash:8].[ext]'</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>              <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.(woff2?|eot|ttf|otf)(\?.*)?$/i</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 字体</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            loader<span class="token punctuation">:</span> <span class="token string">'url-loader'</span><span class="token punctuation">,</span>            options<span class="token punctuation">:</span> <span class="token punctuation">{</span>              limit<span class="token punctuation">:</span> <span class="token number">10240</span><span class="token punctuation">,</span>              fallback<span class="token punctuation">:</span> <span class="token punctuation">{</span>                loader<span class="token punctuation">:</span> <span class="token string">'file-loader'</span><span class="token punctuation">,</span>                options<span class="token punctuation">:</span> <span class="token punctuation">{</span>                  name<span class="token punctuation">:</span> <span class="token string">'fonts/[name].[hash:8].[ext]'</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>              <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.js$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            loader<span class="token punctuation">:</span> <span class="token string">'babel-loader'</span><span class="token punctuation">,</span>            options<span class="token punctuation">:</span> <span class="token punctuation">{</span>              presets<span class="token punctuation">:</span> <span class="token punctuation">[</span>                <span class="token string">'@babel/preset-env'</span><span class="token punctuation">,</span>              <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 排除依赖下的js</span>        exclude<span class="token punctuation">:</span> <span class="token regex">/node_modules/</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 配置模块的解析规则</span>  resolve<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建别名</span>    alias<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">'vue$'</span><span class="token punctuation">:</span> <span class="token string">'vue/dist/vue.runtime.esm.js'</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 设置@引用的地址为根目录下的src</span>      <span class="token string">'@'</span><span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../src'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//按顺序解析以下数组后缀名的文件</span>    extensions<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'*'</span><span class="token punctuation">,</span> <span class="token string">'.js'</span><span class="token punctuation">,</span> <span class="token string">'.json'</span><span class="token punctuation">,</span> <span class="token string">'.vue'</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3、区分开发环境与生产环境"><a href="#3、区分开发环境与生产环境" class="headerlink" title="3、区分开发环境与生产环境"></a>3、区分开发环境与生产环境</h2><ul><li>在build目录下新增两个文件,webpack.dev.js     webpack.prod.js</li><li><strong>开发环境</strong>主要是要实现热更新,不需要压缩代码，完整的sourceMap</li><li><strong>生产环境</strong>需要压缩代码、提取css文件、合理的sourceMap、分割代码等</li></ul><pre class=" language-js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">.</span> 使用webpack<span class="token operator">-</span>marge 合并配置采用<span class="token number">4</span>版本<span class="token number">2</span><span class="token punctuation">.</span> 使用copy<span class="token operator">-</span>webpack<span class="token operator">-</span>plugin 拷贝静态资源采用<span class="token number">5</span>版本<span class="token number">3</span><span class="token punctuation">.</span> 使用optimize<span class="token operator">-</span>css<span class="token operator">-</span>assets<span class="token operator">-</span>webpack<span class="token operator">-</span>plugin  压缩css采用<span class="token number">5</span>版本<span class="token number">4</span><span class="token punctuation">.</span> 使用uglifyjs<span class="token operator">-</span>webpack<span class="token operator">-</span>plugin 压缩js采用<span class="token number">2</span>版本</code></pre><h3 id="3-1、开发环境配置"><a href="#3-1、开发环境配置" class="headerlink" title="3.1、开发环境配置"></a>3.1、开发环境配置</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 主要实现热更新，不用压缩代码，完整的sourceMap</span><span class="token keyword">const</span> Path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> Webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span><span class="token keyword">const</span> WebpackConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./webpack.config'</span><span class="token punctuation">)</span><span class="token keyword">const</span> WebpackMerge <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack-merge'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">WebpackMerge</span><span class="token punctuation">(</span>WebpackConfig<span class="token punctuation">,</span> <span class="token punctuation">{</span>  mode<span class="token punctuation">:</span> <span class="token string">'development'</span><span class="token punctuation">,</span>  devtool<span class="token punctuation">:</span> <span class="token string">'cheap-module-eval-source-map'</span><span class="token punctuation">,</span>  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>    port<span class="token punctuation">:</span> <span class="token number">3000</span><span class="token punctuation">,</span>    hot<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token keyword">static</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>      directory<span class="token punctuation">:</span> Path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">Webpack<span class="token punctuation">.</span>HashedModuleIdsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="3-2、生产环境配置"><a href="#3-2、生产环境配置" class="headerlink" title="3.2、生产环境配置"></a>3.2、生产环境配置</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//实现css,js代码压缩</span><span class="token keyword">const</span> Path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> WebpackConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./webpack.config'</span><span class="token punctuation">)</span><span class="token keyword">const</span> WebpackMerge <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack-merge'</span><span class="token punctuation">)</span><span class="token keyword">const</span> CopyWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'copy-webpack-plugin'</span><span class="token punctuation">)</span><span class="token keyword">const</span> OptimizeCssAssetsWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'optimize-css-assets-webpack-plugin'</span><span class="token punctuation">)</span><span class="token keyword">const</span> UglifyJsPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'uglifyjs-webpack-plugin'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">WebpackMerge</span><span class="token punctuation">(</span>  WebpackConfig<span class="token punctuation">,</span>  <span class="token punctuation">{</span>    mode<span class="token punctuation">:</span> <span class="token string">'production'</span><span class="token punctuation">,</span>    devtool<span class="token punctuation">:</span> <span class="token string">'cheap-module-source-map'</span><span class="token punctuation">,</span>    plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token keyword">new</span> <span class="token class-name">CopyWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token keyword">from</span><span class="token punctuation">:</span> Path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>            __dirname<span class="token punctuation">,</span>            <span class="token string">'../public'</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>          to<span class="token punctuation">:</span> Path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>            __dirname<span class="token punctuation">,</span>            <span class="token string">'../dist'</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    optimization<span class="token punctuation">:</span> <span class="token punctuation">{</span>      minimizer<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token keyword">new</span> <span class="token class-name">UglifyJsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          cache<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>          parallel<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>          sourceMap<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">OptimizeCssAssetsWebpackPlugin</span><span class="token punctuation">(</span>          <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      splitChunks<span class="token punctuation">:</span> <span class="token punctuation">{</span>        chunks<span class="token punctuation">:</span> <span class="token string">'all'</span><span class="token punctuation">,</span>        cacheGroups<span class="token punctuation">:</span> <span class="token punctuation">{</span>          libs<span class="token punctuation">:</span> <span class="token punctuation">{</span>            name<span class="token punctuation">:</span> <span class="token string">'chunk-libs'</span><span class="token punctuation">,</span>            test<span class="token punctuation">:</span> <span class="token regex">/[\\/]node_modules[\\/]/</span><span class="token punctuation">,</span>            priority<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>            chunks<span class="token punctuation">:</span> <span class="token string">'initial'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//只打包初始时依赖的第三方库</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="3-3、package-json"><a href="#3-3、package-json" class="headerlink" title="3.3、package.json"></a>3.3、package.json</h3><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"webpack_4"</span><span class="token punctuation">,</span>  <span class="token string">"version"</span><span class="token punctuation">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>  <span class="token string">"description"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token string">"main"</span><span class="token punctuation">:</span> <span class="token string">"index.js"</span><span class="token punctuation">,</span>  <span class="token string">"scripts"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"test"</span><span class="token punctuation">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span><span class="token punctuation">,</span>    <span class="token string">"dev"</span><span class="token punctuation">:</span> <span class="token string">"webpack-dev-server --config build/webpack.config.js --open"</span><span class="token punctuation">,</span>    <span class="token string">"build:prod"</span><span class="token punctuation">:</span> <span class="token string">"webpack --config build/webpack.prod.js"</span><span class="token punctuation">,</span>    <span class="token string">"build:dev"</span><span class="token punctuation">:</span> <span class="token string">"webpack --config build/webpack.dev.js"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">"keywords"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string">"author"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token string">"license"</span><span class="token punctuation">:</span> <span class="token string">"ISC"</span><span class="token punctuation">,</span>  <span class="token string">"devDependencies"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"@babel/core"</span><span class="token punctuation">:</span> <span class="token string">"^7.18.2"</span><span class="token punctuation">,</span>    <span class="token string">"@babel/preset-env"</span><span class="token punctuation">:</span> <span class="token string">"^7.18.2"</span><span class="token punctuation">,</span>    <span class="token string">"@webpack-cli/serve"</span><span class="token punctuation">:</span> <span class="token string">"^1.6.1"</span><span class="token punctuation">,</span>    <span class="token string">"autoprefixer"</span><span class="token punctuation">:</span> <span class="token string">"^8.6.5"</span><span class="token punctuation">,</span>    <span class="token string">"babel-loader"</span><span class="token punctuation">:</span> <span class="token string">"^8.2.5"</span><span class="token punctuation">,</span>    <span class="token string">"babel-preset-es2015"</span><span class="token punctuation">:</span> <span class="token string">"^6.24.1"</span><span class="token punctuation">,</span>    <span class="token string">"clean-webpack-plugin"</span><span class="token punctuation">:</span> <span class="token string">"^4.0.0"</span><span class="token punctuation">,</span>    <span class="token string">"copy-webpack-plugin"</span><span class="token punctuation">:</span> <span class="token string">"^5.1.2"</span><span class="token punctuation">,</span>    <span class="token string">"css-loader"</span><span class="token punctuation">:</span> <span class="token string">"^3.6.0"</span><span class="token punctuation">,</span>    <span class="token string">"file-loader"</span><span class="token punctuation">:</span> <span class="token string">"^4.3.0"</span><span class="token punctuation">,</span>    <span class="token string">"html-webpack-plugin"</span><span class="token punctuation">:</span> <span class="token string">"^4.5.2"</span><span class="token punctuation">,</span>    <span class="token string">"less"</span><span class="token punctuation">:</span> <span class="token string">"^4.1.2"</span><span class="token punctuation">,</span>    <span class="token string">"less-loader"</span><span class="token punctuation">:</span> <span class="token string">"^5.0.0"</span><span class="token punctuation">,</span>    <span class="token string">"mini-css-extract-plugin"</span><span class="token punctuation">:</span> <span class="token string">"^0.9.0"</span><span class="token punctuation">,</span>    <span class="token string">"optimize-css-assets-webpack-plugin"</span><span class="token punctuation">:</span> <span class="token string">"^5.0.8"</span><span class="token punctuation">,</span>    <span class="token string">"postcss-loader"</span><span class="token punctuation">:</span> <span class="token string">"^4.3.0"</span><span class="token punctuation">,</span>    <span class="token string">"style-loader"</span><span class="token punctuation">:</span> <span class="token string">"^2.0.0"</span><span class="token punctuation">,</span>    <span class="token string">"uglifyjs-webpack-plugin"</span><span class="token punctuation">:</span> <span class="token string">"^2.2.0"</span><span class="token punctuation">,</span>    <span class="token string">"url-loader"</span><span class="token punctuation">:</span> <span class="token string">"^4.1.1"</span><span class="token punctuation">,</span>    <span class="token string">"vue"</span><span class="token punctuation">:</span> <span class="token string">"^2.6.14"</span><span class="token punctuation">,</span>    <span class="token string">"vue-loader"</span><span class="token punctuation">:</span> <span class="token string">"^15.7.0"</span><span class="token punctuation">,</span>    <span class="token string">"vue-style-loader"</span><span class="token punctuation">:</span> <span class="token string">"^4.1.3"</span><span class="token punctuation">,</span>    <span class="token string">"vue-template-compiler"</span><span class="token punctuation">:</span> <span class="token string">"^2.6.14"</span><span class="token punctuation">,</span>    <span class="token string">"webpack"</span><span class="token punctuation">:</span> <span class="token string">"^4.46.0"</span><span class="token punctuation">,</span>    <span class="token string">"webpack-cli"</span><span class="token punctuation">:</span> <span class="token string">"^4.9.2"</span><span class="token punctuation">,</span>    <span class="token string">"webpack-dev-server"</span><span class="token punctuation">:</span> <span class="token string">"^4.9.0"</span><span class="token punctuation">,</span>    <span class="token string">"webpack-merge"</span><span class="token punctuation">:</span> <span class="token string">"^4.2.2"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">"dependencies"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"@babel/polyfill"</span><span class="token punctuation">:</span> <span class="token string">"^7.12.1"</span><span class="token punctuation">,</span>    <span class="token string">"@vue/compiler-sfc"</span><span class="token punctuation">:</span> <span class="token string">"^3.2.36"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-4、优化配置-TODO"><a href="#3-4、优化配置-TODO" class="headerlink" title="3.4、优化配置 TODO"></a>3.4、优化配置 TODO</h3><h2 id="4、配置路由-vue-router"><a href="#4、配置路由-vue-router" class="headerlink" title="4、配置路由 vue-router"></a>4、配置路由 vue-router</h2><ul><li><code>npm i -D vue-router@3</code></li></ul><h3 id="4-1、src下新增router文件夹，配置路由文件"><a href="#4-1、src下新增router文件夹，配置路由文件" class="headerlink" title="4.1、src下新增router文件夹，配置路由文件"></a>4.1、src下新增router文件夹，配置路由文件</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token keyword">import</span> Home <span class="token keyword">from</span> <span class="token string">'@/components/Home.vue'</span><span class="token keyword">import</span> Hello <span class="token keyword">from</span> <span class="token string">'@/components/Hello.vue'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> Home    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">'/hello'</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> Hello    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> router</code></pre><h3 id="4-2、main-js引入router-components文件夹下新增两个组件，在根组件引用"><a href="#4-2、main-js引入router-components文件夹下新增两个组件，在根组件引用" class="headerlink" title="4.2、main.js引入router, components文件夹下新增两个组件，在根组件引用"></a>4.2、main.js引入router, components文件夹下新增两个组件，在根组件引用</h3><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span><span class="token operator">&lt;</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"container"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>msg<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>router<span class="token operator">-</span>link to<span class="token operator">=</span><span class="token string">"/"</span><span class="token operator">></span>首页<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span>    <span class="token operator">&lt;</span>router<span class="token operator">-</span>link to<span class="token operator">=</span><span class="token string">"/hello"</span><span class="token operator">></span>nihao<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> Hello <span class="token keyword">from</span> <span class="token string">'./components/Hello'</span><span class="token keyword">import</span> Home <span class="token keyword">from</span> <span class="token string">'./components/Home'</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'App'</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        msg<span class="token punctuation">:</span> <span class="token string">'测试配置dsad'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    components<span class="token punctuation">:</span> <span class="token punctuation">{</span>      Hello<span class="token punctuation">,</span> Home    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style scoped<span class="token operator">></span>  <span class="token punctuation">.</span>container <span class="token punctuation">{</span>    background<span class="token operator">-</span>color<span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre><h3 id="4-3、最终package-json"><a href="#4-3、最终package-json" class="headerlink" title="4.3、最终package.json"></a>4.3、最终package.json</h3><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"webpack_4"</span><span class="token punctuation">,</span>  <span class="token string">"version"</span><span class="token punctuation">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>  <span class="token string">"description"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token string">"main"</span><span class="token punctuation">:</span> <span class="token string">"index.js"</span><span class="token punctuation">,</span>  <span class="token string">"scripts"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"test"</span><span class="token punctuation">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span><span class="token punctuation">,</span>    <span class="token string">"dev"</span><span class="token punctuation">:</span> <span class="token string">"webpack-dev-server --config build/webpack.config.js --open"</span><span class="token punctuation">,</span>    <span class="token string">"build:prod"</span><span class="token punctuation">:</span> <span class="token string">"webpack --config build/webpack.prod.js"</span><span class="token punctuation">,</span>    <span class="token string">"build:dev"</span><span class="token punctuation">:</span> <span class="token string">"webpack --config build/webpack.dev.js"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">"keywords"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string">"author"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token string">"license"</span><span class="token punctuation">:</span> <span class="token string">"ISC"</span><span class="token punctuation">,</span>  <span class="token string">"devDependencies"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"@babel/core"</span><span class="token punctuation">:</span> <span class="token string">"^7.18.2"</span><span class="token punctuation">,</span>    <span class="token string">"@babel/preset-env"</span><span class="token punctuation">:</span> <span class="token string">"^7.18.2"</span><span class="token punctuation">,</span>    <span class="token string">"@webpack-cli/serve"</span><span class="token punctuation">:</span> <span class="token string">"^1.6.1"</span><span class="token punctuation">,</span>    <span class="token string">"autoprefixer"</span><span class="token punctuation">:</span> <span class="token string">"^8.6.5"</span><span class="token punctuation">,</span>    <span class="token string">"babel-loader"</span><span class="token punctuation">:</span> <span class="token string">"^8.2.5"</span><span class="token punctuation">,</span>    <span class="token string">"babel-preset-es2015"</span><span class="token punctuation">:</span> <span class="token string">"^6.24.1"</span><span class="token punctuation">,</span>    <span class="token string">"clean-webpack-plugin"</span><span class="token punctuation">:</span> <span class="token string">"^4.0.0"</span><span class="token punctuation">,</span>    <span class="token string">"copy-webpack-plugin"</span><span class="token punctuation">:</span> <span class="token string">"^5.1.2"</span><span class="token punctuation">,</span>    <span class="token string">"css-loader"</span><span class="token punctuation">:</span> <span class="token string">"^3.6.0"</span><span class="token punctuation">,</span>    <span class="token string">"file-loader"</span><span class="token punctuation">:</span> <span class="token string">"^4.3.0"</span><span class="token punctuation">,</span>    <span class="token string">"html-webpack-plugin"</span><span class="token punctuation">:</span> <span class="token string">"^4.5.2"</span><span class="token punctuation">,</span>    <span class="token string">"less"</span><span class="token punctuation">:</span> <span class="token string">"^4.1.2"</span><span class="token punctuation">,</span>    <span class="token string">"less-loader"</span><span class="token punctuation">:</span> <span class="token string">"^5.0.0"</span><span class="token punctuation">,</span>    <span class="token string">"mini-css-extract-plugin"</span><span class="token punctuation">:</span> <span class="token string">"^0.9.0"</span><span class="token punctuation">,</span>    <span class="token string">"optimize-css-assets-webpack-plugin"</span><span class="token punctuation">:</span> <span class="token string">"^5.0.8"</span><span class="token punctuation">,</span>    <span class="token string">"postcss-loader"</span><span class="token punctuation">:</span> <span class="token string">"^4.3.0"</span><span class="token punctuation">,</span>    <span class="token string">"style-loader"</span><span class="token punctuation">:</span> <span class="token string">"^2.0.0"</span><span class="token punctuation">,</span>    <span class="token string">"uglifyjs-webpack-plugin"</span><span class="token punctuation">:</span> <span class="token string">"^2.2.0"</span><span class="token punctuation">,</span>    <span class="token string">"url-loader"</span><span class="token punctuation">:</span> <span class="token string">"^4.1.1"</span><span class="token punctuation">,</span>    <span class="token string">"vue"</span><span class="token punctuation">:</span> <span class="token string">"^2.6.14"</span><span class="token punctuation">,</span>    <span class="token string">"vue-loader"</span><span class="token punctuation">:</span> <span class="token string">"^15.7.0"</span><span class="token punctuation">,</span>    <span class="token string">"vue-style-loader"</span><span class="token punctuation">:</span> <span class="token string">"^4.1.3"</span><span class="token punctuation">,</span>    <span class="token string">"vue-template-compiler"</span><span class="token punctuation">:</span> <span class="token string">"^2.6.14"</span><span class="token punctuation">,</span>    <span class="token string">"webpack"</span><span class="token punctuation">:</span> <span class="token string">"^4.46.0"</span><span class="token punctuation">,</span>    <span class="token string">"webpack-cli"</span><span class="token punctuation">:</span> <span class="token string">"^4.9.2"</span><span class="token punctuation">,</span>    <span class="token string">"webpack-dev-server"</span><span class="token punctuation">:</span> <span class="token string">"^4.9.0"</span><span class="token punctuation">,</span>    <span class="token string">"webpack-merge"</span><span class="token punctuation">:</span> <span class="token string">"^4.2.2"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">"dependencies"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"@babel/polyfill"</span><span class="token punctuation">:</span> <span class="token string">"^7.12.1"</span><span class="token punctuation">,</span>    <span class="token string">"@vue/compiler-sfc"</span><span class="token punctuation">:</span> <span class="token string">"^3.2.36"</span><span class="token punctuation">,</span>    <span class="token string">"vue-router"</span><span class="token punctuation">:</span> <span class="token string">"^3.5.2"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> vuecli </category>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vuecli </tag>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo简介</title>
      <link href="/2022/060816107.html"/>
      <url>/2022/060816107.html</url>
      
        <content type="html"><![CDATA[<p>官网： <a href="https://hexo.io/">Hexo</a><br>官方文档： <a href="https://hexo.io/docs/">documentation</a><br>社区： <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a><br>反馈： <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h2><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="启动本地服务"><a href="#启动本地服务" class="headerlink" title="启动本地服务"></a>启动本地服务</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="同步至远程仓库"><a href="#同步至远程仓库" class="headerlink" title="同步至远程仓库"></a>同步至远程仓库</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo初识 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
