<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>搬砖日记</title>
      <link href="/2022/070115134.html"/>
      <url>/2022/070115134.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-vue页面内同级组件切换（v-show-与-v-if）"><a href="#1-vue页面内同级组件切换（v-show-与-v-if）" class="headerlink" title="1. vue页面内同级组件切换（v-show 与 v-if）"></a>1. vue页面内同级组件切换（v-show 与 v-if）</h1><h2 id="1-1-问题一；"><a href="#1-1-问题一；" class="headerlink" title="1.1 问题一；"></a>1.1 问题一；</h2><ul><li><strong>场景描述</strong>： <ol><li>父组件index.vue中存在两个平级的子组件A.vue和B.vue，在父组件中通过v-show控制子组件显隐（因为要保证切换子组件时子组件已经填写的数据不丢失）；</li><li>但是A组件切换至B组件时，B组件的数据需要根据A组件动态新增；因此在A组件切换时调用异步请求获取数据，但是由于子组件绑定的数据源无法感知到数据的变化，导致A组件请求的数据无法实时展示到B组件。</li></ol></li><li><strong>解决方式</strong>：（需要重新触发子组件的生命周期函数 或是 重新渲染子组件页面）<ol><li>在B组件外部包裹 div 使用v-if控制页面的重排 </li><li>A组件在异步请求前 <code>v-if=&quot;false&quot;</code>干掉B组件dom元素；请求结束后通过<code>v-if=&quot;true&quot;</code>重新渲染页面，实现vue组件重新执行生命周期函数 从而获取实时最新的数据。</li></ol></li></ul><h2 id="1-2-组件的函数，watch执行顺序："><a href="#1-2-组件的函数，watch执行顺序：" class="headerlink" title="1.2 组件的函数，watch执行顺序："></a>1.2 组件的函数，watch执行顺序：</h2><ul><li>当<code>watch函数</code>被设置为立即执行时，也就是 <code>immediate为true</code>时，watch函数先于生命周期函数<code>created</code>执行；</li><li>接着是执行 <code>get</code> 属性里的值，然后是<code>mounted</code>。</li></ul><h1 id="2-el-form表单校验以及自定义校验规则"><a href="#2-el-form表单校验以及自定义校验规则" class="headerlink" title="2. el-form表单校验以及自定义校验规则"></a>2. el-form表单校验以及自定义校验规则</h1><h2 id="2-1-使用form表单校验"><a href="#2-1-使用form表单校验" class="headerlink" title="2.1 使用form表单校验:"></a>2.1 使用form表单校验:</h2><ol><li>需要在 <code>el-form</code> 标签动态绑定数据源 :model;</li><li>需要<code>el-form</code>标签动态绑定校验规则对象 :rules, 校验规则写在rules对象里，形式为 属性名 + 属性名对应的数组（数组里面是配置对应规则，包括是否必填，触发方式，错误提示等等）; 如果需要自定义校验规则，那么就需要自行定义一个回调函数，把message 属性替换为 validator: callback;</li><li>需要在 <code>el-form-item</code>标签配置 prop 属性，prop&#x3D;’属性名’，并且这个属性名 需要是model 绑定对象的下一级;比如下面model 绑定ruleForm对象，那么prop绑定 name 属性就能正常触发校验。<pre class=" language-JavaScript"><code class="language-JavaScript">// 自定义校验const checkName = (rule, value, cb) => { if (!value) cb(new Error('错误提示')) }把 message 属性替换为 validator: this.checkName// 普通校验ruleForm = {  name: ''}rules = {  name: [{required: true, message:'这是错误提示语', trigger: 'blur'}]}</code></pre></li></ol><h1 id="3-el-upload文件上传（视频，图片，pdf文件）"><a href="#3-el-upload文件上传（视频，图片，pdf文件）" class="headerlink" title="3. el-upload文件上传（视频，图片，pdf文件）"></a>3. el-upload文件上传（视频，图片，pdf文件）</h1>]]></content>
      
      
      
        <tags>
            
            <tag> 经验总结 </tag>
            
            <tag> 功能复盘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3入门</title>
      <link href="/2022/062334107.html"/>
      <url>/2022/062334107.html</url>
      
        <content type="html"><![CDATA[<h2 id="1、初始化项目"><a href="#1、初始化项目" class="headerlink" title="1、初始化项目"></a>1、初始化项目</h2><h2 id="1-1-快速搭建vite项目"><a href="#1-1-快速搭建vite项目" class="headerlink" title="1.1 快速搭建vite项目"></a>1.1 快速搭建vite项目</h2><ul><li>全局安装vue-cli v4.5<pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g @vue/cli</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> create vite</code></pre></li><li>选择 <code>vue</code> ; <code>vue-ts</code><h2 id="1-2-项目启动"><a href="#1-2-项目启动" class="headerlink" title="1.2 项目启动"></a>1.2 项目启动</h2></li><li>进入项目目录，<code>npm i</code> 安装依赖; 接着执行 <code>npm run dev</code> 启动项目。</li></ul><h2 id="1-2-1-vscode-插件"><a href="#1-2-1-vscode-插件" class="headerlink" title="1.2.1 vscode 插件"></a>1.2.1 vscode 插件</h2><ul><li>vue2使用的是 vetur进行vue的代码提示；vue3需要使用 volar</li><li>并且使用volar需要禁用vetur<pre class=" language-json"><code class="language-json">Vue Language Features(Volar<span class="token punctuation">)</span>TypeScript Vue Plugin(Volar<span class="token punctuation">)</span>vue3-snippets-for-vscode</code></pre><h2 id="1-2-2-插件功能"><a href="#1-2-2-插件功能" class="headerlink" title="1.2.2 插件功能"></a>1.2.2 插件功能</h2></li><li>右上角绿色三角点击实现代码切片功能，会自动分两屏并且把template与script代码分开</li><li>右上角点击vite图标，选择 <code>preview vite app</code> 预览代码实现效果 <h2 id="2、npm-run-dev"><a href="#2、npm-run-dev" class="headerlink" title="2、npm run dev"></a>2、npm run dev</h2><h2 id="2-1-为什么运行运行-vite无法启动项目，但是npm-run-dev-却可以？"><a href="#2-1-为什么运行运行-vite无法启动项目，但是npm-run-dev-却可以？" class="headerlink" title="2.1 为什么运行运行 vite无法启动项目，但是npm run dev 却可以？"></a>2.1 为什么运行运行 vite无法启动项目，但是npm run dev 却可以？</h2><pre class=" language-json"><code class="language-json">// package.json<span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"dev"</span><span class="token operator">:</span> <span class="token string">"vite"</span><span class="token punctuation">,</span><span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"vue-tsc --noEmit &amp;&amp; vite build"</span><span class="token punctuation">,</span><span class="token property">"preview"</span><span class="token operator">:</span> <span class="token string">"vite preview"</span><span class="token punctuation">}</span></code></pre></li><li>直接执行 vite，cmd命令是无法识别的；</li><li><img src="https://cdn.jsdelivr.net/gh/polarisWrp/photo_stage/images/pic202206251500479.png" alt="image-20220625150033430"></li><li>为什么<code> npm run dev</code>可以执行的原因，在node_modules中查看vite源码</li></ul><p><img src="https://cdn.jsdelivr.net/gh/polarisWrp/photo_stage/images/pic202206251450340.png" alt="image-20220625145035236"></p><ul><li>可以看到，在package.json中配置了软链接<pre class=" language-json"><code class="language-json"><span class="token property">"bin"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"vite"</span><span class="token operator">:</span> <span class="token string">"vite/vite.js"</span><span class="token punctuation">}</span></code></pre></li><li>执行npm run dev;会先从当前目录下查找bin目录下的vite文件；</li><li>找不到的情况下，会去全局node_modules查找bin目录里的vite文件；<br><img src="https://cdn.jsdelivr.net/gh/polarisWrp/photo_stage/images/pic202206251458628.png" alt="image-20220625145830565"></li><li>如果还是找不到,那么就会去环境变量中查找。</li><li>已经bin下面已经写好的指令，分别用于 linux,windows,以及跨平台系统（linux和Windows都能用）</li></ul><p><img src="https://cdn.jsdelivr.net/gh/polarisWrp/photo_stage/images/pic202206251507215.png" alt="image-20220625150749155"></p><h2 id="3、模板插值语法"><a href="#3、模板插值语法" class="headerlink" title="3、模板插值语法"></a>3、模板插值语法</h2><h2 id="3-1-模板语法，输出文字信息"><a href="#3-1-模板语法，输出文字信息" class="headerlink" title="3.1 模板语法，输出文字信息"></a>3.1 模板语法，输出文字信息</h2><pre class=" language-vue"><code class="language-vue"><template>  {{msg}}</template><script setup lang="ts">  const msg: string = '我是北极星'</script><style></style></code></pre><h2 id="3-2-为什么模板中不需要写div根标签？"><a href="#3-2-为什么模板中不需要写div根标签？" class="headerlink" title="3.2 为什么模板中不需要写div根标签？"></a>3.2 为什么模板中不需要写div根标签？</h2><h2 id="4、-ref全家桶"><a href="#4、-ref全家桶" class="headerlink" title="4、 ref全家桶"></a>4、 ref全家桶</h2><h2 id="4-1-ref"><a href="#4-1-ref" class="headerlink" title="4.1 ref"></a>4.1 ref</h2><ul><li>ref 接收一个内部值，并且返回一个响应式且可变的对象；</li><li>ref对象有且仅有一个 <code>.value</code> property,指向的是它内部的值。<br>&#96;&#96;&#96;vue<template><div>  <button @click="changeMsg">change</button>  介绍：</div></template></li></ul><script setup lang="ts">import {Ref, ref} from 'vue'  let msg: Ref<string> = ref('我是北极星')  const changeMsg = () => {    msg.value = '我是大白'    console.log(msg);  }</script><pre><code>- 页面更新为 “我是大白”;控制台输出 RefImpl 对象## 4.2 为什么ref返回一个对象？- ref是一个重载函数，函数内部返回一个 createRef函数- createRef函数判断传入的值是否为ref对象，不是的话会返回 RefImpl实例- RefImpl内部通过get 和 set 方法对传入的值进行设置和返回![image-20220625204614453](https://cdn.jsdelivr.net/gh/polarisWrp/photo_stage/images/pic202206252046553.png)![image-20220625204850794](https://cdn.jsdelivr.net/gh/polarisWrp/photo_stage/images/pic202206252048880.png)## 4.3 shallowRef， triggerRef，customRef## 4.3.1 shallowRef 创建一个跟踪自身 .value 变化的ref,但是值不会是响应式- 使用shallowRef包装的对象，只有到 `.value`这一级具有响应式；- 所以以下修改方式，不生效；控制台输出的是变化的值，但是页面不会更新；- 想要具备响应式，只能修改整个对象，写法 `obj.value = &#123;name: &#39;woshidaibai&#39; &#125;`**使用场景**： 对于不需要响应式的属性，用shallowRef包裹```vue&lt;template&gt;  &lt;div&gt;    &lt;button @click=&quot;changeMsg&quot;&gt;change&lt;/button&gt;    &#123;&#123;obj&#125;&#125;  &lt;/div&gt;&lt;/template&gt;&lt;script setup lang=&quot;ts&quot;&gt;import &#123;shallowRef&#125; from &#39;vue&#39;  let obj = shallowRef(&#123;    name: &#39;我是大白&#39;  &#125;)  const changeMsg = () =&gt; &#123;    obj.value.name = &#39;woshidaibai&#39;    // obj.value = &#123;name: &#39;woshidaibai&#39; &#125;    console.log(obj);  &#125;&lt;/script&gt;</code></pre><h2 id="4-3-2-triggerRef-强制更新页面的dom"><a href="#4-3-2-triggerRef-强制更新页面的dom" class="headerlink" title="4.3.2 triggerRef 强制更新页面的dom"></a>4.3.2 triggerRef 强制更新页面的dom</h2><ul><li>使用triggerRef强制更新dom,在修改值后将修改对象传入 triggerRef，页面能够获取修改后得到值。<pre class=" language-vue"><code class="language-vue"><script setup lang="ts">import {shallowRef, triggerRef} from 'vue'let obj = shallowRef({  name: '我是大白'})const changeMsg = () => {  obj.value.name = 'woshidaibai'  triggerRef(obj)  // console.log(obj);}</script></code></pre><h2 id="4-3-3-customRef-自定义ref"><a href="#4-3-3-customRef-自定义ref" class="headerlink" title="4.3.3 customRef 自定义ref"></a>4.3.3 customRef 自定义ref</h2></li><li>customRef 是一个工厂函数，函数内部要求返回一个对象，对象内部要有get和set方法</li><li>点击按钮触发set方法，模板的msg值修改为 “大白”<br>&#96;&#96;&#96;vue<template><div>  <button @click="changeMsg">change</button>  </div></template></li></ul><script setup lang="ts">import {shallowRef, triggerRef,customRef} from 'vue'  function myRef<T>(value: T) {    return customRef((track, trigger) => {      return {        get() {          track() //用于收集依赖          return value        },        set(newValue: T) {          value = newValue          trigger()        }      }    })  }  let msg = myRef<string>('北极星')  const changeMsg = () => {    msg.value = '大白'  }</script><pre><code>## 4.4 shallowRef造成视图更新的问题- 上面的案例中提到了，使用shallowRef包裹的属性，会失去响应式；- 但是，如果在一个方法中同时改变响应式数据（就是ref包裹的属性）和shallowRef内的属性，shallowRef中的属性也会变为响应式，从而造成视图的更新。- TODO （源码）本质就是ref触发依赖更新时一并将shallowRef属性更新了```vue&lt;script setup lang=&quot;ts&quot;&gt;import &#123;shallowRef, triggerRef,customRef, ref&#125; from &#39;vue&#39;  const msg1 = ref(&#39;这是msg1&#39;)  const msg = shallowRef(&#123;    name: &#39;大白&#39;,    age: &#39;dsad&#39;  &#125;)  const changeMsg = () =&gt; &#123;    demo.value = &#39;ppp&#39;    msg.value.name = &#39;kkk&#39;    console.log(msg);    console.log(&#39;这是msg1&#39;, msg1);      &#125;&lt;/script&gt;</code></pre><h2 id="5、reactive全家桶"><a href="#5、reactive全家桶" class="headerlink" title="5、reactive全家桶"></a>5、reactive全家桶</h2><ul><li>reactive内部接收复杂数据类型，将其转化为响应式，如果传入基本数据类型，那么会控制台会报错并且将数据直接返回。</li><li>传入的数据经过转化返回一个Proxy对象，对象内部则是属性名称，所以页面使用时 <code>obj.property</code>;不需要<code>obj.value.property</code></li></ul><h2 id="5-1数组赋值时注意："><a href="#5-1数组赋值时注意：" class="headerlink" title="5.1数组赋值时注意："></a>5.1数组赋值时注意：</h2><ul><li>当我们在给响应式的数组赋值时，不能将接口返回数据直接覆盖原来的数组，这样会使原数组丢失响应式;</li><li>应该是将返回的数组中的元素添加到响应式数组当中；</li></ul><h3 id="方式一："><a href="#方式一：" class="headerlink" title="方式一："></a>方式一：</h3><pre class=" language-vue"><code class="language-vue"><script setup lang="ts">import {shallowRef, triggerRef,customRef, ref, reactive} from 'vue'const msg = reactive({  name: '北极星'})let arr = reactive<number[]>([])setTimeout(() => {  let temp = [1,2,3,4]  arr = temp //不合理  arr.push(...temp) //合理  console.log(arr); //[1,2,3,4]}, 0)</script></code></pre><h3 id="方式二："><a href="#方式二：" class="headerlink" title="方式二："></a>方式二：</h3><pre class=" language-vue"><code class="language-vue"><script setup lang="ts">import {shallowRef, triggerRef,customRef, ref, reactive} from 'vue'type List = {  list: number[]}let msg = reactive<List>({  list: []})setTimeout(() => {  msg.list = [1,2,33]  console.log(msg);}, 0)</script></code></pre><h2 id="5-2readonly方法"><a href="#5-2readonly方法" class="headerlink" title="5.2readonly方法"></a>5.2readonly方法</h2><ul><li>将数据拷贝一份，并且此数据不允许被更改</li></ul><pre class=" language-vue"><code class="language-vue"><script setup lang="ts">import {readonly, reactive} from 'vue'let msg = reactive({  count: 1})let copy = readonly(msg)copy.count++ //报错</script></code></pre><h2 id="5-3shallowReactive"><a href="#5-3shallowReactive" class="headerlink" title="5.3shallowReactive"></a>5.3shallowReactive</h2><ul><li>只有第一层对象的属性为响应式，改变深层次的属性值时，会修改数据但是不会在页面上更新数据</li></ul><h2 id="5-3-1使用的注意点："><a href="#5-3-1使用的注意点：" class="headerlink" title="5.3.1使用的注意点："></a>5.3.1使用的注意点：</h2><ul><li>在dom挂在之前，比如我们在自调用函数内部改变属性值时，shallowReactive不会生效；</li><li>在一个方法中同时修改浅层次和深层次属性时，shallowReactive也不生效</li></ul><pre class=" language-vue"><code class="language-vue"><script setup lang="ts">import {readonly, reactive, shallowReactive} from 'vue'const test = shallowReactive({  demo: 'kkk',  obj: {    child: {      name: 'dadadada'    }  }})//warning： 一个方法同时修改浅深层次属性时，两者属性都会响应式更新const changeMsg = () => {  test.demo = 'kkk被改了。。。'  test.obj.child.name = '这回里面被改了' //需要单独写，并且正常来说也应该拆分出来，一个函数做一件事}const changeInner = ()=> {  test.obj.child.name = '这回里面被改了'}/*  1. 函数自调用，这是dom还没挂载结束，shallowReactive不会生效；  2. 应该在页面手动触发变更事件*/changeMsg()changeInner()</script></code></pre><h2 id="6、to全家桶（toRef-toRefs-toRaw）"><a href="#6、to全家桶（toRef-toRefs-toRaw）" class="headerlink" title="6、to全家桶（toRef,toRefs,toRaw）"></a>6、to全家桶（toRef,toRefs,toRaw）</h2><h2 id="6-1-toRef"><a href="#6-1-toRef" class="headerlink" title="6.1 toRef"></a>6.1 toRef</h2><ul><li>它接收一个属性，将其变为响应式属性</li></ul><pre class=" language-vue"><code class="language-vue"><script setup lang="ts">import {toRef, toRefs, toRaw} from 'vue'const obj = {  name: '北极星',  age: 15}const state = toRef(obj, 'age') //age属性变为响应式</script></code></pre><h2 id="6-2-toRefs"><a href="#6-2-toRefs" class="headerlink" title="6.2 toRefs"></a>6.2 toRefs</h2><ul><li>我们在将对象解构的时候，依然希望响应式里面对象的属性解构出来的每个属性都是响应式的；</li></ul><pre class=" language-vue"><code class="language-vue"><script setup lang="ts">import {toRef, toRefs, toRaw, reactive} from 'vue'const obj = reactive({  name: '北极星',  age: 15})// const {name, age} = obj  // 解构出来的属性不是响应式// 这时候需要toRefsconst {name, age} = toRefs(obj)console.log(name, age); const changeMsg = () => {  name.value = '大白'  age.value++}</script></code></pre><h2 id="6-3-toRaw"><a href="#6-3-toRaw" class="headerlink" title="6.3 toRaw"></a>6.3 toRaw</h2><ul><li>将一个响应式对象改为非响应式</li></ul><pre class=" language-vue"><code class="language-vue"><script setup lang="ts">import {toRef, toRefs, toRaw} from 'vue'const obj = reactive({  name: '北极星',  age: 15})const res = toRaw(obj)console.log(res); // 输出 {name:'北极星', age: 15}</script></code></pre><h2 id="7、computed计算属性"><a href="#7、computed计算属性" class="headerlink" title="7、computed计算属性"></a>7、computed计算属性</h2><ul><li>基本用法</li></ul><pre class=" language-vue"><code class="language-vue"><template>  <div>      <input type="text" v-model="first" />      <input type="text" v-model="second" />       {{fullName}}  </div></template><script setup lang="ts">import {computed, ref} from 'vue'const first = ref('北极')const second = ref('星星')//方式一const fullName = computed(() => {  return first.value + second.value})//方式二const fullName = computed({  get() {    return first.value + second.value  },  set() {    first.value + second.value  }})</script></code></pre><h2 id="8、Wath监听函数"><a href="#8、Wath监听函数" class="headerlink" title="8、Wath监听函数"></a>8、Wath监听函数</h2><h2 id="8-1基本用法"><a href="#8-1基本用法" class="headerlink" title="8.1基本用法"></a>8.1基本用法</h2><pre class=" language-vue"><code class="language-vue"><script setup lang="ts">import {watch, ref} from 'vue'const msg = ref<string>('北极')watch(msg, (newVal, oldVal) => {  console.log('新值：', newVal, '旧的值：',oldVal);})</script></code></pre><h2 id="8-2监听多个属性时"><a href="#8-2监听多个属性时" class="headerlink" title="8.2监听多个属性时"></a>8.2监听多个属性时</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 第一个参数传入一个数组，数组中元素为监听的属性</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">[</span>msg1<span class="token punctuation">,</span>msg2<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>newVal<span class="token punctuation">,</span> oldVal<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'新值：'</span><span class="token punctuation">,</span> newVal<span class="token punctuation">,</span> <span class="token string">'旧的值：'</span><span class="token punctuation">,</span>oldVal<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="8-3watch函数配置"><a href="#8-3watch函数配置" class="headerlink" title="8.3watch函数配置"></a>8.3watch函数配置</h2><h2 id="8-3-1-监听ref响应式对象"><a href="#8-3-1-监听ref响应式对象" class="headerlink" title="8.3.1 监听ref响应式对象"></a>8.3.1 监听ref响应式对象</h2><ul><li>当监听的属性层级超过一层时，需要配置第三个参数<code>deep(深度监听)</code>，<code>immediate(监听立即执行)</code>;</li><li>这里有个bug,就是deep开启后，新值和旧值输出都一致（原因？TODO）</li></ul><pre class=" language-vue"><code class="language-vue"><template>  <div>      <input type="text" v-model="msg.far.son.name" />  </div></template><script setup lang="ts">import {watch, ref} from 'vue'const msg = ref({  far: {    son: {      name: '北极星'    }  }})watch(msg, (newVal, oldVal) => {  console.log(msg);  console.log('新值：', newVal, '旧的值：',oldVal);}, {  deep: true})</script></code></pre><h2 id="8-3-2-监听reactive响应式对象"><a href="#8-3-2-监听reactive响应式对象" class="headerlink" title="8.3.2 监听reactive响应式对象"></a>8.3.2 监听reactive响应式对象</h2><ul><li>监听reactive响应式对象时，默认就开启了深度监听deep，这时使用watch函数不需要配置deep;</li></ul><pre class=" language-vue"><code class="language-vue"><script setup lang="ts">import {watch, ref, reactive} from 'vue'const msg = reactive({  far: {    son: {      name: '北极星'    }  }})watch(msg, (newVal, oldVal) => {  console.log(msg);  console.log('新值：', newVal, '旧的值：',oldVal);}, {  immediate: true})</script></code></pre><h2 id="8-3-3-监听对象中指定属性"><a href="#8-3-3-监听对象中指定属性" class="headerlink" title="8.3.3 监听对象中指定属性"></a>8.3.3 监听对象中指定属性</h2><ul><li>对watch函数，第一个参数指定返回被监听对象的指定属性；这时候除了对象中指定属性改变，其他属性改变则不会触发监听函数；</li></ul><pre class=" language-vue"><code class="language-vue"><script setup lang="ts">import {watch, ref, reactive} from 'vue'const msg = reactive({  far: '大白',  son: '小黑'})watch(() => msg.son, (newVal, oldVal) => {  // 只有son属性变化，才会触发监听函数内的逻辑  console.log('新值：', newVal, '旧的值：',oldVal);}, {  immediate: true})</script></code></pre><h2 id="9、watchEffect高级侦听器"><a href="#9、watchEffect高级侦听器" class="headerlink" title="9、watchEffect高级侦听器"></a>9、watchEffect高级侦听器</h2><h2 id="9-1-首次加载就会执行侦听器里的逻辑代码"><a href="#9-1-首次加载就会执行侦听器里的逻辑代码" class="headerlink" title="9.1 首次加载就会执行侦听器里的逻辑代码"></a>9.1 首次加载就会执行侦听器里的逻辑代码</h2><pre class=" language-vue"><code class="language-vue"><script setup lang="ts">import {watchEffect, ref, reactive} from 'vue'const msg1 = ref('这是大白')const msg2 = ref('这是我的')watchEffect(() => {  console.log(msg1.value);  console.log(msg2.value);})</script></code></pre><h2 id="9-2-watchEffect内部自定义回调函数"><a href="#9-2-watchEffect内部自定义回调函数" class="headerlink" title="9.2 watchEffect内部自定义回调函数"></a>9.2 watchEffect内部自定义回调函数</h2><ul><li>watchEffect内部可以接收一个回调函数，用于在数据变化之前做预处理；</li><li>这个预处理函数除了首次加载，每次数据变化时会优先执行。</li></ul><pre class=" language-vue"><code class="language-vue"><script setup lang="ts">import {watchEffect, ref, reactive} from 'vue'const msg1 = ref('这是大白')const msg2 = ref('这是我的')// 执行顺序watchEffect((onInput) => {  console.log(msg1.value); // 2  console.log(msg2.value); // 3  onInput(() => {    console.log('do something...'); // 1   }) })</script></code></pre><h2 id="9-3-定义停止函数"><a href="#9-3-定义停止函数" class="headerlink" title="9.3 定义停止函数"></a>9.3 定义停止函数</h2><pre class=" language-vue"><code class="language-vue"><template>  <div>    <div>      <input type="text" v-model="msg1" />      <input type="text" v-model="msg2" />    </div>    <button @click="stopWatch">停止监听</button>  </div></template><script setup lang="ts">import {watchEffect, ref, reactive} from 'vue'const msg1 = ref('这是大白')const msg2 = ref('这是我的')const stop = watchEffect((onInput) => {  console.log(msg1.value);  console.log(msg2.value);  onInput(() => {    console.log('do something...');  }) })const stopWatch = () => stop()</script></code></pre><h2 id="9-4-watchEffect的配置项"><a href="#9-4-watchEffect的配置项" class="headerlink" title="9.4 watchEffect的配置项"></a>9.4 watchEffect的配置项</h2><pre class=" language-vue"><code class="language-vue"><script setup lang="ts">import {watchEffect, ref, reactive} from 'vue'const msg = reactive({  far: '大白',  son: '小黑'})const msg1 = ref('这是大白')const msg2 = ref('这是我的')const stop = watchEffect((onInput) => {  const item: HTMLInputElement = document.querySelector('#msgId') as HTMLInputElement  // 没有配置 flush 之前item获取不到dom元素  console.log('--------------',item);  onInput(() => {    console.log('do something...');  }) }, {  flush: "post", //dom加载完之后获取元素   // sync : 强制效果始终同步触发  // pre : 组件更新前执行})</script></code></pre><h2 id="9-5-调试函数-onTrigger-在监听属性改变后会触发监听函数；用于开发时断点调试"><a href="#9-5-调试函数-onTrigger-在监听属性改变后会触发监听函数；用于开发时断点调试" class="headerlink" title="9.5 调试函数 onTrigger,在监听属性改变后会触发监听函数；用于开发时断点调试"></a>9.5 调试函数 onTrigger,在监听属性改变后会触发监听函数；用于开发时断点调试</h2><pre class=" language-vue"><code class="language-vue"><script setup lang="ts">import {watchEffect, ref, reactive} from 'vue'const msg1 = ref('这是大白')const msg2 = ref('这是我的')const stop = watchEffect((onInput) => {  console.log(msg1.value);  console.log(msg2.value);  onInput(() => {    console.log('do something...');  }) }, {  onTrigger(e) {    //用于调试    console.log(e);  }})</script></code></pre><h2 id="10、组件生命周期"><a href="#10、组件生命周期" class="headerlink" title="10、组件生命周期"></a>10、组件生命周期</h2><pre class=" language-vue"><code class="language-vue"><template>  <h1>{{ msg }}</h1>  <div id="idK">这是dog</div></template><script setup lang="ts">import { ref, onBeforeMount, onMounted, onBeforeUpdate, onUpdated,onBeforeUnmount, onUnmounted } from 'vue'// 首先是执行 setupconsole.log('setup');let msg = ref('')onBeforeMount(() => {const item = document.querySelector('#idK')// dom挂载之前获取dom元素失败  null   console.log('这是item', item);})onMounted(() => {  const item = document.querySelector('#idK')  console.log('挂载完了、、',item);})// 接着是 更新前，更新完成，卸载前，卸载后</script></code></pre><h2 id="11、父子组件传值"><a href="#11、父子组件传值" class="headerlink" title="11、父子组件传值"></a>11、父子组件传值</h2><h2 id="11-1-父传子，子传父"><a href="#11-1-父传子，子传父" class="headerlink" title="11.1 父传子，子传父"></a>11.1 父传子，子传父</h2><ul><li>简单数据类型直接传值，复杂数据类型v-bind传值；</li><li>子传父，需要子组件派发一个事件，父组件监听并且自定义处理函数进行接收；</li><li>父组件获取子组件实例时使用<code>ref=&#39;自定义一个属性名&#39;</code>，并且子组件需要指定暴露 <code>defineExpose</code> 那些数据</li></ul><pre class=" language-vue"><code class="language-vue"><template>  <div class="layout">    <Menu ref="menuRef" :list="data" title="这是一套衣服" @on-click="handleClick"></Menu>    <div>---{{arr}}</div>    <div class="layout-right">      <Header></Header>      <Content></Content>    </div>  </div></template><script setup lang="ts">import { ref } from 'vue';import Content from '../layout/content/index.vue'import Header from '../layout/header/index.vue'import Menu from '../layout/menu/index.vue'const data = ref([1,2,3])const arr = [] as number[]// 获取 menu组件的实例，子组件可以选择性暴露数据；父组件只能拿到子组件暴露出的数据const menuRef = ref(null)const handleClick = (val: number[]) => {  console.log(val);}</script></code></pre><pre class=" language-vue"><code class="language-vue">//子组件<template>  <div class="menu">这是菜单    <div style="color: red" >{{title}}</div>    <div>{{list}}</div>    <div>      <button @click="toParent">派发</button>    </div>  </div></template><script setup lang="ts">import { reactive } from 'vue';  type Props = {    title: string,    list: number[]  }  defineProps<Props>()  const temp = reactive([111,222])  const emit = defineEmits(['on-click'])  const toParent = () => {    emit('on-click', temp)  }    // 父组件获取当前组件实例时能拿到的数据，暴露给父组件的数据  defineExpose({    temp  })  </script></code></pre><h2 id="11-2-当不确定父组件是否传值时，子组件可设置默认值"><a href="#11-2-当不确定父组件是否传值时，子组件可设置默认值" class="headerlink" title="11.2 当不确定父组件是否传值时，子组件可设置默认值"></a>11.2 当不确定父组件是否传值时，子组件可设置默认值</h2><ul><li>withDefaults 以及 defineProps</li></ul><pre class=" language-vue"><code class="language-vue"><template>  <div class="menu">这是菜单    <div>---{{title}}</div>    <div>---{{data}}</div>  </div></template><script setup lang="ts">import { reactive } from 'vue';  type Props = {    title?: string,    data?: number[]  }  withDefaults(defineProps<Props>(), {    title: '默认标题',    data: () => [11, 22, 33]  })</script></code></pre><h2 id="12、全局组件，递归组件"><a href="#12、全局组件，递归组件" class="headerlink" title="12、全局组件，递归组件"></a>12、全局组件，递归组件</h2><h2 id="12-1-注册全局组件"><a href="#12-1-注册全局组件" class="headerlink" title="12.1 注册全局组件"></a>12.1 注册全局组件</h2><ul><li>定义的全局组件需要在 <code>main.ts</code>文件中引入，注册时需要在app挂载之前，链式调用的写法；</li><li>全局组件的组件在其他页面使用时，不需要导入，直接以标签的方式使用即可。</li></ul><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> Card <span class="token keyword">from</span> <span class="token string">'./components/card/index.vue'</span><span class="token comment" spellcheck="true">// 注册组件时需要在挂载之前</span><span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'Card'</span><span class="token punctuation">,</span> Card<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span></code></pre><h2 id="12-2-递归组件"><a href="#12-2-递归组件" class="headerlink" title="12.2 递归组件"></a>12.2 递归组件</h2><ul><li>递归组件适用于渲染嵌套的数据结构；</li><li>渲染逻辑需要终止条件，否则会造成内存泄漏；</li><li>引用递归组件（本质就是引用自身）时有两种方式，1.使用import方式导入 2.定义一个script标签，导出组件名；</li><li>绑定点击事件时，需要注意冒泡事件。</li></ul><pre class=" language-vue"><code class="language-vue"><template>  <div>    <div      v-for="(item, index) in data"      :key="index"      style="margin-left: 10px; color: red;"      @click.stop="clickItem(item)"    >      {{ item.name }}      <TreeItem        @on-click="clickItem"        :data="item.children"        v-if="item.children?.length"      ></TreeItem>    </div>  </div></template><script setup lang="ts">// 引入递归组件，实际就是引用自身；这是写法一// import TreeItem from './index.vue'type TreeList = {  name?: string | undefined  icon?: string | undefined  children?: TreeList[] | []}type Props = {  data?: TreeList[]}defineProps<Props>()const emit = defineEmits(['on-click'])const clickItem = (item: TreeList) => {  console.log(item);  // alert(item)  emit('on-click', item)}</script>// 写法二<script lang="ts">export default {  name: 'TreeItem'}</script></code></pre><h2 id="13、动态组件"><a href="#13、动态组件" class="headerlink" title="13、动态组件"></a>13、动态组件</h2><ul><li>和v2一样，使用内置的<code>&lt;component :is=&quot;组件名&quot;&gt;</code>动态展示对应组件；</li><li>对于不需要代理的内容，比如下面的A,B,C组件，使用<code>markraw</code>来跳过<code>proxy</code>代理从而节省性能；</li><li><code>markraw</code>本质会将代理的对象设置 <code>_v_skip</code> 属性设置为 true, 标识需要跳过代理。</li></ul><pre class=" language-vue"><code class="language-vue"><template>  <div class="content">    <div class="content-item" v-for="item in data" :key="item.name">        {{ item.name }}      </div>      <component :is="current.comName"></component>  </div></template><script setup lang="ts">  import { reactive, markraw } from 'vue';  import A from './A.vue'  import B from './B.vue'  import C from './C.vue'type Tabs = {  name: string  comName: string}type Com = Pick<Tabs, 'comName'>const data = reactive<Tabs[]>([  {    name: '这是a组件',    comName: markRaw(A)  },  {    name: '这是b组件',    comName: markRaw(B)  },  {    name: '这是c组件',    comName: markRaw(C)  },])let current = reactive<Com>({  comName: data[0].comName})</script></code></pre><h2 id="14、插槽全家桶"><a href="#14、插槽全家桶" class="headerlink" title="14、插槽全家桶"></a>14、插槽全家桶</h2><h2 id="14-1-命名插槽，作用域插槽"><a href="#14-1-命名插槽，作用域插槽" class="headerlink" title="14.1 命名插槽，作用域插槽"></a>14.1 命名插槽，作用域插槽</h2><ul><li>子组件通过插槽给父组件提供占位，父组件传过来的值会覆盖掉原有的值；</li><li>通过 <code>v-slot:名称</code>的方式定义具名插槽，子组件内部使用 <code>&lt;slot name=&quot;名称&quot;&gt;</code>接收到父组件传过来的值；</li><li>同时子组件可以通过 <code>:属性名</code>的形式向父组件传值，父组件通过<code>v-slot=&#123;属性名&#125;</code>的方式接收；</li><li>并且<code>v-slot</code>可以使用 <code>#</code>简写，没有指定名称的插槽也可以用<code>#default</code>定义。</li></ul><pre class=" language-vue"><code class="language-vue">// 父组件<template>  <div class="content">    <Dialog>      <template v-slot:header>        <div>这是header</div>      </template>      <template v-slot="{data}">        {{data}}      </template>      <template v-slot:footer>        <div>这是footer</div>      </template>    </Dialog>  </div></template><script setup lang="ts">  import { markRaw, reactive } from 'vue';  import Dialog from '../../components/dialog/index.vue'</script>// 子组件<template>  <div>    <div class="header">      <slot name="header">jjj</slot>    </div>    <div class="center">      <div v-for="item in data" :key="item.name">        <!-- 作用域插槽，把值传给父组件 -->        <slot :data="item"></slot>      </div>    </div>    <div class="footer">      <slot name="footer"></slot>    </div>  </div></template><script setup lang="ts">import { reactive } from 'vue';type List = {  name: string}  const data = reactive<List[]>([    {name: '大白'},    {name: '解决'},    {name: '十点多'}  ])</script></code></pre><h2 id="14-2-动态插槽"><a href="#14-2-动态插槽" class="headerlink" title="14.2 动态插槽"></a>14.2 动态插槽</h2><ul><li>在父组件动态使用插槽名称，可以将内容动态插入到子组件指定命名插槽的位置当中；</li><li>如下：把内容插入到子组件的 footer 中</li></ul><pre class=" language-vue"><code class="language-vue"><template>  <div class="content">    <Dialog>      <template #[name]>        <div>动态内容</div>      </template>    </Dialog>  </div></template><script setup lang="ts">  import { markRaw, reactive, ref } from 'vue';  import Dialog from '../../components/dialog/index.vue'  let name = ref<string>('footer')</script></code></pre><h2 id="15、异步组件与代码分包"><a href="#15、异步组件与代码分包" class="headerlink" title="15、异步组件与代码分包"></a>15、异步组件与代码分包</h2><h2 id="15-1打包"><a href="#15-1打包" class="headerlink" title="15.1打包"></a>15.1打包</h2><ul><li>在命令窗口执行 <code>npm run build</code>打包命令，会把vue文件、css文件以及第三方库打包至dist目录下，但是当代码量大的时候，打包出得到js文件就会比较大，首次加载就需要比较久，那么等待过程就会处于白屏状态。</li><li>这里通过异步组件优化加载；</li></ul><h2 id="15-2异步组件"><a href="#15-2异步组件" class="headerlink" title="15.2异步组件"></a>15.2异步组件</h2><ul><li>在<code>public</code>文件夹下新建一个<code>data.json</code>文件模拟异步数据；</li><li>新建一个 <code>server.ts</code>文件，内部模拟一个<code>get</code>请求方法，返回数据之前使用定时器延时返回，模拟异步数据；</li><li>修改父组件引用方式，使用<code>defineAsyncComponent</code>方法；该方法接收一个工厂函数，咱们内部传入一个import函数，而后会返回一个Promise函数，而 <code>defineAsyncComponent</code>会接收这个Promise函数并且返回<code>await</code>的结果;</li><li>因此将普通的 import导入组件写法修改为 <code>const AsyncCom = defineAsyncComponent(() =&gt; import(&#39;../../components/async/index.vue&#39;))</code></li><li>页面需要配合使用 <code>Suspense</code>,在他内部提供 <code>default</code> 和 <code>fallback</code>插槽，前者用于数据展示，后者可以用于数据加载中时的提示；</li><li>这时候再执行 <code>npm run build</code>,异步组件的代码被拆分出了新的打包文件；</li></ul><h3 id="15-2-1栗子"><a href="#15-2-1栗子" class="headerlink" title="15.2.1栗子"></a>15.2.1栗子</h3><ul><li>模拟的json数据</li></ul><pre class=" language-json"><code class="language-json"><span class="token punctuation">[</span>  <span class="token punctuation">{</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"这是大白"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"这是各个"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"这是大萨达撒"</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><ul><li>模拟get请求</li></ul><pre class=" language-typescript"><code class="language-typescript">type NameList <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">const</span> axios <span class="token operator">=</span> <span class="token punctuation">(</span>url<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Promise<span class="token operator">&lt;</span>NameList<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>reslove<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>    xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token function">reslove</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1500</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><ul><li>父组件逻辑</li></ul><pre class=" language-vue"><code class="language-vue"><template>  <div class="content">    <Suspense>      <template #default>        <AsyncCom></AsyncCom>      </template>      <template #fallback>        <div>loading.....</div>      </template>    </Suspense>  </div></template><script setup lang="ts">  import { defineAsyncComponent, markRaw, reactive, ref } from 'vue';  const AsyncCom = defineAsyncComponent(() => import('../../components/async/index.vue'))</script></code></pre><ul><li>子组件逻辑</li></ul><pre class=" language-vue"><code class="language-vue"><template>  <div>    <div v-for="item in list" :key="item.name">      {{ item.name }}    </div>  </div></template><script setup lang="ts">  import { axios } from './server';  //  setup 语法糖中可以直接使用 await  // 自定义函数使用异步则需要在函数前加 async  const demo = async () => { await... }  const list = await axios('../../../public/data.json')  console.log(list);</script></code></pre><h2 id="16、Teleport-传送组件（v3-新特性之一）"><a href="#16、Teleport-传送组件（v3-新特性之一）" class="headerlink" title="16、Teleport 传送组件（v3 新特性之一）"></a>16、Teleport 传送组件（v3 新特性之一）</h2><ul><li>teleport能够将模板渲染至指定的dom节点，并且不受父级<code>style, v-show</code>的影响，同时<code>data, prop</code>数据依旧可以共用</li><li>通过 <code>to</code>属性，插入至指定元素的位置，<code>to=&#39;body&#39;</code>,由此将 <code>Teleport</code>内的内容传送至<code>body</code>中；</li><li>用于将组件传送到vue树之外的html页面，但是该组件仍然可以接收父组件的传值；</li></ul><pre class=" language-vue"><code class="language-vue"><template>  <div v-show="false" style="background: red;" class="content">    <teleport to="body">      这是望远镜。。。    </teleport>  </div></template></code></pre><h2 id="17、keep-alive缓存组件"><a href="#17、keep-alive缓存组件" class="headerlink" title="17、keep-alive缓存组件"></a>17、keep-alive缓存组件</h2><h2 id="17-1使用场景"><a href="#17-1使用场景" class="headerlink" title="17.1使用场景"></a>17.1使用场景</h2><ul><li>不希望组件被重新渲染，或者处于性能考虑避免组件被多次重复渲染；</li><li>希望组件缓存下来，保持当前状态；</li></ul><h2 id="17-2-登录，注册组件切换栗子"><a href="#17-2-登录，注册组件切换栗子" class="headerlink" title="17.2 登录，注册组件切换栗子"></a>17.2 登录，注册组件切换栗子</h2><ul><li>正常使用v-if控制组件显隐时，默认情况由于dom结构被删除，每次显隐切换都会重新渲染，使用keep-alive包裹后则不会；</li></ul><pre class=" language-vue"><code class="language-vue"><template>  <div class="content">    <button @click="switchCom">      切换    </button>    <keep-alive>      <Login v-if="flag"></Login>      <Register v-else></Register>    </keep-alive>  </div></template><script setup lang="ts">import { ref } from 'vue'import Login from '../../components/login/login.vue'import Register from '../../components/login/register.vue'const flag = ref(true)const switchCom = () => {  flag.value = !flag.value}</script><style lang="less" scoped></code></pre><ul><li>栗子分别为登录和注册组件，切换组件显隐时，组件内部双向绑定的值依旧存在，组件不会重新渲染；</li></ul><h2 id="17-3-keep-alive的生命周期"><a href="#17-3-keep-alive的生命周期" class="headerlink" title="17.3 keep-alive的生命周期"></a>17.3 keep-alive的生命周期</h2><ul><li>以子组件Login的生命周期为栗子，首次加载时执行onMounted -&gt; onActivated -&gt; onDeactivated -&gt; onActivated -&gt; onDeactivated</li></ul><pre class=" language-vue"><code class="language-vue"><template>  <div>    <table>      <tr>        <td>账号</td> <td>           <input v-model="form.account" type="text">        </td>         <td>密码</td>        <td>          <input v-model="form.psd" type="text">        </td>      </tr>    </table>      <button @click="login">登录</button>  </div></template><script setup lang="ts">import { onActivated, onDeactivated, onMounted, onUnmounted, reactive } from 'vue';   const form = reactive({    account: '',    psd: ''  })  const login = () => {    console.log(form);  }  onMounted(() => {    console.log('登录组件的 onmounted');  })  onUnmounted(() => {    console.log('登录组件的 onUnmounted');  })  onActivated(() => {    console.log('登录组件的 onActivated');  })  onDeactivated(() => {    console.log('登录组件的 onDeactivated');  })</script></code></pre><ul><li><p>由此可知： </p><ol><li>onActivated、onDeactivated只有在使用keep-alive组件时存在；</li><li>使用keep-alive的组件，可以把只执行一次的逻辑或者数据请求放在onMounted中执行；</li><li>需要多次执行的逻辑放在 onActivated 以及 onDeactivated</li></ol></li></ul><h2 id="17-4-通过-include属性指定缓存的组件"><a href="#17-4-通过-include属性指定缓存的组件" class="headerlink" title="17.4 通过 include属性指定缓存的组件"></a>17.4 通过 include属性指定缓存的组件</h2><ul><li>在需要被缓存的子组件中暴露出组件名称，在keep-alive 组件中 <code>:included=[&#39;组件名&#39;]</code>的方式指定需要被缓存的组件，其他在<code>keep-alive</code>中的组件数据切换时就不会被缓存；</li><li>或者使用 <code>exclude=[&#39;组件名&#39;]</code>，指定不被缓存的组件；</li></ul><pre class=" language-vue"><code class="language-vue">// 子组件暴露出名字<script lang="ts">  export default {    name: 'Login'  }</script>// 父组件<template>  <div class="content">    <button @click="switchCom">      切换    </button>    <keep-alive :include="['Login']">      <Login v-if="flag"></Login>      <Register v-else></Register>    </keep-alive>  </div></template></code></pre><h2 id="18、transition组件"><a href="#18、transition组件" class="headerlink" title="18、transition组件"></a>18、transition组件</h2><ul><li><p>在以下情况中，可以给任何元素和组件添加进入&#x2F;离开过渡</p><ol><li>条件渲染（v-if）</li><li>条件展示（v-show）</li><li>动态组件</li><li>组件根节点</li></ol></li><li><p>自定义过渡效果，需要对transition组件的name属性自定义，并且在css中定义对应样式；</p></li></ul><h2 id="18-1-基本使用"><a href="#18-1-基本使用" class="headerlink" title="18.1 基本使用"></a>18.1 基本使用</h2><ul><li>将需要加入过渡的组件或者<code>div</code>元素用<code>&lt;transition&gt;</code>组件包裹，自定义一个属性名，自定义定义样式；</li><li>定义属性名 <code>name=fade</code>, 定义进入时的样式变化，以及离开时的样式变化；</li></ul><pre class=" language-vue"><code class="language-vue"><template>  <div class="content">    <button @click="switchCom">      切换    </button>    <transition name="fade">      <div v-if="flag" class="box"></div>    </transition>  </div></template><script setup lang="ts">import { ref } from 'vue'const flag = ref(true)const switchCom = () => {  flag.value = !flag.value}</script><style lang="less" scoped>.content {  .bnox {    width: 200px;    height: 200px;    background-color: aqua;  }  .fade-enter-from {    width: 0;    height: 0;  }  .fade-enter-active {    transition: all ease 1.5s;  }  .fade-enter-to {    width: 200px;    height: 200px;    transform: scale(2);  }  // background-color: aqua;  flex: 1;  margin: 20px;  border: 1px solid red;  overflow: auto;  &-item {    padding: 20px;    border: 1px solid pink;  }}</style></code></pre><h2 id="18-2通过引用类名的方式使用自定义样式"><a href="#18-2通过引用类名的方式使用自定义样式" class="headerlink" title="18.2通过引用类名的方式使用自定义样式"></a>18.2通过引用类名的方式使用自定义样式</h2><ul><li>我们可以自定义样式类，通过给组件的 <code>enter-to-class,enter-to-active</code>属性赋值的方式使用自定义的过渡样式；<pre class=" language-vue"><code class="language-vue"><template><transition name="fade"       enter-from-class="e-from"       enter-active-class="e-active"      enter-to-class="e-to"    >  <div v-if="flag" class="bnox">  </div></transition></template><style lang="less" scoped>.content {.e-from {  width: 0;  height: 0;}.e-active {  transition: all ease 1.5s;}.e-to {  width: 200px;  height: 200px;  transform: scale(2);}}</style></code></pre><h2 id="18-3-通过自定义class结合第三方动画库animate-css"><a href="#18-3-通过自定义class结合第三方动画库animate-css" class="headerlink" title="18.3 通过自定义class结合第三方动画库animate.css"></a>18.3 通过自定义class结合第三方动画库<code>animate.css</code></h2><h2 id="18-3-1-引用animate-css"><a href="#18-3-1-引用animate-css" class="headerlink" title="18.3.1 引用animate.css"></a>18.3.1 引用animate.css</h2></li><li>安装animate.css  <code>npm i animate.css -S</code></li><li>使用时在组件引入样式 <code>import animate.css</code></li><li>在 <code>animate@4</code>版本，使用样式时需要加上<code>animate__animated</code>前缀</li></ul><pre class=" language-vue"><code class="language-vue"><template>  <transition       enter-active-class="animate__animated animate__fadeIn"       leave-active-class="animate__animated animate__fadeOut"    >      <div v-if="flag" class="bnox">      </div>  </transition></template><script setup lang="ts">import { ref } from 'vue'import 'animate.css'</script></code></pre><h3 id="18-3-2-通过duration属性指定动画时长"><a href="#18-3-2-通过duration属性指定动画时长" class="headerlink" title="18.3.2 通过duration属性指定动画时长"></a>18.3.2 通过duration属性指定动画时长</h3><ul><li>在transition组件中动态绑定 <code>duration</code>属性，可以直接赋值或者动态绑定对象<pre class=" language-vue"><code class="language-vue"><template><transition     :duration="{enter: 500, leave: 55}"    enter-active-class="animate__animated animate__fadeIn"     leave-active-class="animate__animated animate__fadeOut"  >    <div v-if="flag" class="bnox"></div></transition></template></code></pre><h2 id="18-4-transition组件生命周期"><a href="#18-4-transition组件生命周期" class="headerlink" title="18.4 transition组件生命周期"></a>18.4 transition组件生命周期</h2></li><li>一共有八个钩子函数</li><li>before-enter、enter、after-enter、enter-cancelled 分别为进入之前，进入中，进入后，进入被打断；</li><li>before-leave、leave、after-leave、leave-cancelled 分别为离开之前，离开中，离开后，离开被打断；</li></ul><h2 id="18-4-1-使用第三方库-gsap，结合生命周期钩子实现动画过渡"><a href="#18-4-1-使用第三方库-gsap，结合生命周期钩子实现动画过渡" class="headerlink" title="18.4.1 使用第三方库 gsap，结合生命周期钩子实现动画过渡"></a>18.4.1 使用第三方库 gsap，结合生命周期钩子实现动画过渡</h2><ul><li>安装 gsap <code>npm i gsap -S</code></li><li>组件导入 <code>import gsap from &#39;gsap&#39;</code><br>使用栗子：<br>&#96;&#96;&#96;vue<template><div class="content">  <button @click="switchCom">    切换  </button>  <transition     @before-enter="hadleBeforeEnter"    @enter="handleEnter"    @leave="handleLeave"  >   <div v-if="flag" class="bnox"></div>  </transition> </div></template></li></ul><script setup lang="ts">import { ref } from 'vue'import gsap from 'gsap'const hadleBeforeEnter = (el: Element) => {  gsap.set(el, {    width: 0,    height: 0  })}const handleEnter = (el: Element, done: gsap.Callback) =>{  gsap.to(el, {    width: 200,    height: 200,    onComplete: done  })}const handleLeave = (el: Element,done: gsap.Callback) => {gsap.to(el, {    width: 200,    height: 200,    onComplete: done  })}const flag = ref(true)const switchCom = () => {  flag.value = !flag.value}</script><pre><code>## 18.5 transition组件的 appear属性- 这个属性可以设置初始节点过渡，即页面加载完成后开始进行动画；- 3中状态 `appear-from-class appear-active-class appear-to-class appear````vue&lt;template&gt;  &lt;div class=&quot;content&quot;&gt;    &lt;button @click=&quot;switchCom&quot;&gt;      切换    &lt;/button&gt;    &lt;transition       appear      appear-from-class=&quot;handleFrom&quot;      appear-active-class=&quot;handleActive&quot;      appear-to-class=&quot;handleTo&quot;    &gt;     &lt;div v-if=&quot;flag&quot; class=&quot;bnox&quot;&gt;&lt;/div&gt;    &lt;/transition&gt;   &lt;/div&gt;&lt;/template&gt;&lt;style lang=&quot;less&quot; scoped&gt;.content &#123;  .bnox &#123;    width: 200px;    height: 200px;    background-color: aqua;  &#125;  .handleFrom &#123;    width: 0;    height: 0;  &#125;  .handleActive &#123;    transition: all ease 2s;  &#125;  .handleTo &#123;    width: 200px;    height: 200px;  &#125;  // background-color: aqua;  flex: 1;  margin: 20px;  border: 1px solid red;  overflow: auto;  &amp;-item &#123;    padding: 20px;    border: 1px solid pink;  &#125;&#125;&lt;/style&gt;</code></pre><h2 id="18-6、transition-group过渡列表"><a href="#18-6、transition-group过渡列表" class="headerlink" title="18.6、transition-group过渡列表"></a>18.6、transition-group过渡列表</h2><ul><li>使用方法和 transition 相同</li><li>区别在于transition-group中可以内嵌for循环列表；</li></ul><h2 id="19、Provide-x2F-Inject-组件传值"><a href="#19、Provide-x2F-Inject-组件传值" class="headerlink" title="19、Provide&#x2F;Inject 组件传值"></a>19、Provide&#x2F;Inject 组件传值</h2><ul><li>一般用于跨层级组件传值，父传孙组件；</li><li>为了保证数据单向流动，尽量避免使用，尽可能在父组件设置时定义为只读属性；</li><li>否则，子组件获取到该属性时一旦修改，那么其他组件拿到的值也将会是修改后的，具体看源码实现；</li></ul><h2 id="19-1-使用栗子"><a href="#19-1-使用栗子" class="headerlink" title="19.1 使用栗子"></a>19.1 使用栗子</h2><ul><li>父组件中使用 <code>provide</code> 定义属性；</li><li>可以通过 <code>ref, reactive</code>将属性值定义为响应式数据；<br>&#96;&#96;&#96;vue<template><div id="app">  <h1>我是根组件</h1>  <B></B></div></template></li></ul><script setup lang="ts">import B from './layout/demo/B.vue'import { provide, ref } from 'vue'; provide('flag', ref(false))</script><pre><code>- 子组件中通过 inject 获取到父组件定义的属性;- 但是子组件修改属性值时,由于没有类型声明导致修改赋值时类型报错；- 由inject 源码可知，解决方式为设置默认值或是将默认值定义为函数 `() =&gt; T`- 解决方式为使用泛型进行类型声明，`Ref&lt;boolean&gt;`;但是仍然存在类型可能为 `undefine `的情况，通过设置初始值`ref(false)`解决；```vue&lt;template&gt;  &lt;div class=&quot;a&quot;&gt;    &lt;h1&gt;AAAA组件&lt;/h1&gt;    &lt;button @click=&quot;changeFlag&quot;&gt;changeFlag&lt;/button&gt;    &#123;&#123;data&#125;&#125;  &lt;/div&gt;&lt;/template&gt;&lt;script setup lang=&quot;ts&quot;&gt;import &#123; inject, ref, Ref &#125; from &#39;vue&#39;;const data = inject&lt;Ref&lt;boolean&gt;&gt;(&#39;flag&#39;, ref(false))const changeFlag = () =&gt; &#123;  data.value = true&#125;&lt;/script&gt;</code></pre><h2 id="19-2-依赖注入的实现原理"><a href="#19-2-依赖注入的实现原理" class="headerlink" title="19.2 依赖注入的实现原理"></a>19.2 依赖注入的实现原理</h2><ul><li>首先判断当前环境，不是setup()环境是不能使用 provide()函数</li><li>读取当前实例的 provides,组件中通过 <code>getCurrentInstance</code>方法获取当前实例的信息；</li><li>默认情况下，实例继承自父类的provides对象,</li><li>子组件使用父组件的 provides 对象作为原型，通过 <code>Object.create()</code>方法来创建自己的 provides 对象，从而子组件在 inject 时只需要查询原型链获取属性值；同时这也是为什么子组件中更改注入的属性值时，所有使用到 provide注入的属性值都会更改的原因；</li></ul><h2 id="20、兄弟组件传参以及事件总线"><a href="#20、兄弟组件传参以及事件总线" class="headerlink" title="20、兄弟组件传参以及事件总线"></a>20、兄弟组件传参以及事件总线</h2><h2 id="20-1-通过父组件除了其中一个子组件派发出的事件"><a href="#20-1-通过父组件除了其中一个子组件派发出的事件" class="headerlink" title="20.1 通过父组件除了其中一个子组件派发出的事件"></a>20.1 通过父组件除了其中一个子组件派发出的事件</h2><ul><li>假定A,B为兄弟组件，A组件通过 emit 派发出一个事件；</li><li>父组件通过 v-on 监听到事件，并且A 组件传递出的参数通过 v-bind 的形式传入 B 组件；</li><li>B组件通过 props 接收父组件传入的值，由此通过父组件作为桥梁实现兄弟组件传值；<h2 id="20-2-事件总线（Bus）"><a href="#20-2-事件总线（Bus）" class="headerlink" title="20.2 事件总线（Bus）"></a>20.2 事件总线（Bus）</h2></li><li>主要原理是利用js的发布订阅模式实现;</li><li>定义list全局对象用于缓存回调函数， emit 用于触发事件， on 方法用于事件监听；</li><li>当on方法执行时，先从缓存<code>list</code>中查找传入的事件名是否已经存在对应的缓存数组，1.不存在则创建向<code>list</code>中存入一个 <code>事件名: 空数组</code> 的<code>key-value</code>结构数据，并且将传入的 回调函数 callback 存入数组中；2.存在的话，那么根据事件名取出数组，将回调函数存入即可；</li><li>当emit方法执行时，根据传入的事件名取出回到函数数组，遍历数组中的回调函数逐个执行；<h2 id="20-3-栗子"><a href="#20-3-栗子" class="headerlink" title="20.3 栗子"></a>20.3 栗子</h2></li><li>默认导出一个Bus实例<h2 id="20-3-1-事件总线实例"><a href="#20-3-1-事件总线实例" class="headerlink" title="20.3.1 事件总线实例"></a>20.3.1 事件总线实例</h2>&#96;&#96;&#96;TypeScript<br>type BusClass &#x3D; {<br>emit: (name: string) &#x3D;&gt; void<br>on: (name: string, callback: Function) &#x3D;&gt; void<br>off: (name: string) &#x3D;&gt; void<br>}</li></ul><p>type PramsKey &#x3D; number | string | symbol<br>type List &#x3D; {<br>  [key: PramsKey]: Array<Function><br>}</p><p>class Bus implements BusClass {<br>  list: List<br>  constructor() {<br>    this.list &#x3D; {}<br>  }<br>  emit(name: string, …args: Array<any>) {<br>    let fnList: Array<Function> &#x3D; this.list[name]<br>    fnList.forEach(fn &#x3D;&gt; {<br>      fn.apply(this, args)<br>    })<br>  }<br>  on(name: string, callback: Function) {<br>    let fn: Array<Function> &#x3D; this.list[name] || []<br>    fn.push(callback)<br>    this.list[name] &#x3D; fn<br>  }<br>  off(name: string) {<br>    const res &#x3D; this.list[name] || []<br>    if (res.length) Reflect.deleteProperty(this.list, name)<br>  }<br>}</p><p>export default new Bus()</p><pre><code>## 20.3.2 组件使用栗子- 两个组件A,B 各自导入事件总线；- B组件派发事件，A组件接收事件；```vue&lt;template&gt;  &lt;div class=&quot;b&quot;&gt;    &lt;h1&gt;BBBB组件&lt;/h1&gt;    &lt;button @click=&quot;emitA&quot;&gt;派发给A&lt;/button&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script setup lang=&quot;ts&quot;&gt;import &#123; ref &#125; from &#39;vue&#39;;import Bus from &#39;../../Bus&#39;;let flagB = ref(false)const emitA = () =&gt; &#123;  // 修改flagB的值，派发给A  flagB.value = !flagB.value  Bus.emit(&#39;on-click&#39;, flagB)&#125;&lt;/script&gt;</code></pre><pre class=" language-vue"><code class="language-vue"><template>  <div class="a">    <h1>AAAA组件</h1>    {{Flag}}  </div></template><script setup lang="ts">import { ref } from 'vue';import Bus from '../../Bus'let Flag = ref(false)Bus.on('on-click', (flag: boolean) => {  // 接收B组件的值，并且赋值  Flag.value = flag})</script></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> vue3 </tag>
            
            <tag> TypeScript </tag>
            
            <tag> Composition Api </tag>
            
            <tag> vite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Js闭包</title>
      <link href="/2022/062237937.html"/>
      <url>/2022/062237937.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-什么是闭包"><a href="#1-什么是闭包" class="headerlink" title="1. 什么是闭包"></a>1. 什么是闭包</h2><h3 id="1-1-定义："><a href="#1-1-定义：" class="headerlink" title="1.1 定义："></a>1.1 定义：</h3><ul><li>闭包指的是有权访问另一个函数作用域中的变量的函数<h3 id="1-2-Js代码执行过程"><a href="#1-2-Js代码执行过程" class="headerlink" title="1.2 Js代码执行过程"></a>1.2 Js代码执行过程</h3></li><li>执行过程分为 <code>编译阶段</code> 和 <code>代码执行</code> 阶段</li></ul><ol><li>代码编译阶段: 由编译器完成，将代码翻译为可执行的代码，并且<code>确定作用域规则</code></li><li>执行阶段由Js引擎完成：执行可执行的代码，创建 <code>执行上下文</code><h2 id="2-作用域和作用域链"><a href="#2-作用域和作用域链" class="headerlink" title="2. 作用域和作用域链"></a>2. 作用域和作用域链</h2><h3 id="2-1-作用域"><a href="#2-1-作用域" class="headerlink" title="2.1 作用域"></a>2.1 作用域</h3></li></ol><ul><li>作用域包括 <code>全局作用域</code> 和 <code>函数作用域</code></li><li>Js中将作用域定义为一套规则，用于管理引擎如何在 <code>当前作用域</code> 以及 <code>嵌套子作用域</code> 中根据 <code>标识符名称</code> 进行变量（变量名或者函数名）查找<h3 id="2-2作用域链"><a href="#2-2作用域链" class="headerlink" title="2.2作用域链"></a>2.2作用域链</h3></li></ul><ol><li>当访问一个变量，编译器执行代码是<code>从当前的作用域查找</code>是否存在这个<code>标识符</code>(指变量名或函数名)，没找到就会<code>去父作用域查找</code>，<br>直到<code>全局作用域</code>为止。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/polarisWrp/photo_stage/images/pic202206220047608.png" alt="image-20220622004703513"></p><ol start="2"><li>作用域链就是由<code>当前作用域</code>与<code>上层作用域</code>的一系列变量对象组成，保证了当前执行的作用域符合 <code>访问权限的变量</code> 和 <code>函数的有序访问</code><br>  函数在<code>调用</code>激活时，会开始创建对应的<code>执行上下文</code>，在执行上下文生成的过程中，<code>变量对象，作用域链，以及this的值</code>会分别被确定。</li></ol><h2 id="3-闭包如何产生"><a href="#3-闭包如何产生" class="headerlink" title="3. 闭包如何产生"></a>3. 闭包如何产生</h2><h3 id="3-1产生的本质"><a href="#3-1产生的本质" class="headerlink" title="3.1产生的本质"></a>3.1产生的本质</h3><ul><li>当前环境存在指向对父级作用域的引用<h3 id="3-2-闭包"><a href="#3-2-闭包" class="headerlink" title="3.2 闭包"></a>3.2 闭包</h3></li><li>闭包是一个特殊的对象，由 执行上下文和在执行上下文中创建的函数组成；当函数执行时，如果访问了上下文中变量对象的值，闭包就产生了。</li></ul><h4 id="3-2-1栗子1"><a href="#3-2-1栗子1" class="headerlink" title="3.2.1栗子1"></a>3.2.1栗子1</h4><pre class=" language-javascript"><code class="language-javascript">  <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> bar<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol><li>如上案例：首先有 <code>执行上下文foo</code>，在<code>foo</code>中定义了<code>函数bar</code>，而通过<code>return</code>返回bar的方式使<code>bar执行</code>。</li></ol><pre><code>当bar执行时，`访问了foo内部的变量a，b`。因此这个时候`闭包产生`。</code></pre><p><img src="https://cdn.jsdelivr.net/gh/polarisWrp/photo_stage/images/pic202206220103484.png" alt="image-20220622010328426"></p><pre><code>2. JavaScript的自动`垃圾回收机制`: 当一个`值在内存中失去引用`时，立即回收机制会根据特殊算法找到并将其回收;3. 函数的 `执行上下文` 在执行完毕之后，`生命周期结束`，该函数的执行上下文就会`失去引用`;其占用的`内存空间`很快就会被 垃圾回收器 释放,可是 `闭包的存在，会阻止这一过程`。 </code></pre><h4 id="3-2-2栗子2"><a href="#3-2-2栗子2" class="headerlink" title="3.2.2栗子2"></a>3.2.2栗子2</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">innnerFoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    fn <span class="token operator">=</span> innnerFoo<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将 innnerFoo的引用，赋值给全局变量中的fn</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 此处的保留的innerFoo的引用</span><span class="token punctuation">}</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ol><li><code>foo()</code>执行完毕,生命周期结束，所占内存本该被垃圾收集器释放。 但是通过 <code>fn= innerFoo</code> 赋值给了全局变量，<br>函数<code>innerFoo引用</code>被保留。</li><li>函数 <code>fn</code> 在<code>bar</code> 中执行，innnerFoo函数内访问了外层a变量；foo的变量对象，也被保留了下来。</li><li>所以 可以称 foo 为闭包函数</li></ol><p><img src="https://cdn.jsdelivr.net/gh/polarisWrp/photo_stage/images/pic202206220116443.png" alt="image-20220622011600388"></p><h3 id="3-3产生闭包原因"><a href="#3-3产生闭包原因" class="headerlink" title="3.3产生闭包原因"></a>3.3产生闭包原因</h3><ul><li>返回函数 </li><li>函数作为参数传递</li></ul><h2 id="4-创建函数"><a href="#4-创建函数" class="headerlink" title="4. 创建函数"></a>4. 创建函数</h2><h3 id="4-1函数分类"><a href="#4-1函数分类" class="headerlink" title="4.1函数分类"></a>4.1函数分类</h3><ul><li>函数分为 <strong>具名函数</strong> 和 <strong>匿名函数</strong></li></ul><h3 id="4-2函数创建方式"><a href="#4-2函数创建方式" class="headerlink" title="4.2函数创建方式"></a>4.2函数创建方式</h3><h4 id="4-2-1声明函数"><a href="#4-2-1声明函数" class="headerlink" title="4.2.1声明函数"></a>4.2.1声明函数</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h4 id="4-2-2创建匿名函数表达式"><a href="#4-2-2创建匿名函数表达式" class="headerlink" title="4.2.2创建匿名函数表达式"></a>4.2.2创建匿名函数表达式</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/**    * 获取指定函数的函数名称（用于兼容IE）    * @param {Function} fun 任意函数    */</span><span class="token keyword">function</span> <span class="token function">getFunctionName</span><span class="token punctuation">(</span>fun<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fun<span class="token punctuation">.</span>name <span class="token operator">!==</span> undefined<span class="token punctuation">)</span>        <span class="token keyword">return</span> fun<span class="token punctuation">.</span>name<span class="token punctuation">;</span>    <span class="token keyword">var</span> ret <span class="token operator">=</span> fun<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ret <span class="token operator">=</span> ret<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token string">'function '</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    ret <span class="token operator">=</span> ret<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> ret<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'('</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="4-2-3创建一个变量，变量的内容为表达式"><a href="#4-2-3创建一个变量，变量的内容为表达式" class="headerlink" title="4.2.3创建一个变量，变量的内容为表达式"></a>4.2.3创建一个变量，变量的内容为<strong>表达式</strong></h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 并且由此创建出来的函数没有函数名, 即为匿名函数</span><span class="token function">getFunctionName</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">.</span>length  <span class="token comment" spellcheck="true">// 0</span></code></pre><h4 id="4-2-4创建具名函数"><a href="#4-2-4创建具名函数" class="headerlink" title="4.2.4创建具名函数"></a>4.2.4创建具名函数</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//创建一个变量，内容为一个带有名称的函数</span><span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 注意： </span>具名函数表达式的 函数名 只能在创建函数内部使用<span class="token number">1</span><span class="token punctuation">.</span> 即采用此种方法创建的函数在函数外层只能使用 fn 不能使用 getName 的函数名。<span class="token number">2</span><span class="token punctuation">.</span> getName 的命名只能在创建的函数内部使用<span class="token comment" spellcheck="true">// 在对象内定义函数如</span><span class="token keyword">var</span> o<span class="token operator">=</span><span class="token punctuation">{</span> fn <span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>…<span class="token punctuation">}</span> <span class="token punctuation">}</span>，也属于函数表达式</code></pre><h4 id="4-2-5Function构造函数"><a href="#4-2-5Function构造函数" class="headerlink" title="4.2.5Function构造函数"></a>4.2.5Function构造函数</h4><ul><li>可以给 Function 构造函数传一个<strong>函数字符串</strong>，返回 包含这个字符串命令的函数，此种方法创建的是<strong>匿名函数</strong>。</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token string">'alert(1)'</span><span class="token punctuation">)</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/polarisWrp/photo_stage/images/pic202206220131077.png" alt="image-20220622013146034"></p><h4 id="4-2-6自执行函数"><a href="#4-2-6自执行函数" class="headerlink" title="4.2.6自执行函数"></a>4.2.6自执行函数</h4><ul><li>自执行函数属于上述的 <code>函数表达式</code></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="5-作用域链"><a href="#5-作用域链" class="headerlink" title="5.作用域链"></a>5.作用域链</h2><h3 id="5-1-函数作用域问题"><a href="#5-1-函数作用域问题" class="headerlink" title="5.1 函数作用域问题"></a>5.1 函数作用域问题</h3><ul><li>对象内部的函数表达式<pre class=" language-JavaScript"><code class="language-JavaScript">var o={fn:function (){  console.log(fn);}};o.fn();//ERROR报错</code></pre></li><li>非对象内部的函数表达式<pre class=" language-JavaScript"><code class="language-JavaScript">var fn=function (){console.log(fn);};fn(); //function (){console.log(fn);};正确</code></pre><h3 id="5-2总结"><a href="#5-2总结" class="headerlink" title="5.2总结"></a>5.2总结</h3></li><li>使用 var或是’非对象内部的函数表达式内’，可以访问到存放当前函数的变量；在对象内部的不能访问到。</li></ul><ol><li>因为<code>函数作用域链</code>的问题，采用var的是在<code>外部创建了一个fn变量</code>，函数在内部寻找不到fn后向上作用域查找fn，</li><li>而在<code>创建对象内部时</code>，因为<code>没有在函数作用域内创建fn</code>，所以无法访问。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 作用域 </tag>
            
            <tag> Js闭包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Js执行机制(Event Loop)</title>
      <link href="/2022/06207209.html"/>
      <url>/2022/06207209.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-Js单线程"><a href="#1-Js单线程" class="headerlink" title="1.Js单线程"></a>1.Js单线程</h2><h3 id="Js不是多线程原因："><a href="#Js不是多线程原因：" class="headerlink" title="Js不是多线程原因："></a>Js不是多线程原因：</h3><ul><li>因为JS有操作Dom节点的api方法，如果两个线程同时操作一个DOM节点，一个执行删除操作，另一个执行修改等操作就会产生矛盾。<h2 id="2-宏任务与微任务"><a href="#2-宏任务与微任务" class="headerlink" title="2. 宏任务与微任务"></a>2. 宏任务与微任务</h2></li><li>Js引擎分类：把任务分为两类包括 <code>宏任务</code>与<code>微任务</code><h3 id="2-1-宏任务"><a href="#2-1-宏任务" class="headerlink" title="2.1 宏任务"></a>2.1 宏任务</h3></li><li>script 整体代码</li><li>setTimeout、setInterval</li><li>I&#x2F;O</li><li>UI渲染</li><li>postMessage</li><li>MessageChannel</li><li>requestAnimationFrame</li><li>setImmediate(Node.js 环境)<h3 id="2-2-微任务"><a href="#2-2-微任务" class="headerlink" title="2.2 微任务"></a>2.2 微任务</h3></li><li>new Promise.then()</li><li>MutationObserver</li><li>process.nextTick() Node.js环境<h2 id="3-执行规则"><a href="#3-执行规则" class="headerlink" title="3.执行规则"></a>3.执行规则</h2><h3 id="3-1-事件循环机制-Event-Loop"><a href="#3-1-事件循环机制-Event-Loop" class="headerlink" title="3.1 事件循环机制(Event Loop)"></a>3.1 事件循环机制(Event Loop)</h3></li><li>Js异步处理以及多线程的实现由事件循环机制实现</li><li>大体分为 调用栈、消息队列、微任务队列</li></ul><p><img src="https://cdn.jsdelivr.net/gh/polarisWrp/photo_stage/images/pic202206202254999.png" alt="image-20220620225400880"></p><ul><li>事件循环开始时，会从全局栈开始逐行执行代码</li><li>遇到<code>函数</code>会把函数压入调用栈中，被压入的函数称为<code>帧</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/polarisWrp/photo_stage/images/pic202206202259501.png" alt="image-20220620225950452"></p><ul><li>函数执行完成，会在栈中弹出</li></ul><h3 id="3-2普通函数执行-栗子"><a href="#3-2普通函数执行-栗子" class="headerlink" title="3.2普通函数执行 栗子"></a>3.2普通函数执行 栗子</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 2 1 3</span></code></pre><ul><li>首先函数 <code>fn2()</code> 被压入栈，输出<code>2</code> 此时栈底为 <code>fn2()</code></li><li>而后函数 <code>fn1()</code>被压入栈，输出<code>1 </code>弹出 <code>fn1()</code></li><li>最后执行 <code>console.log(3)</code>, 输出<code>3</code> 弹出<code>fn2()</code></li></ul><h3 id="3-3存在宏任务时的执行栗子"><a href="#3-3存在宏任务时的执行栗子" class="headerlink" title="3.3存在宏任务时的执行栗子"></a>3.3存在宏任务时的执行栗子</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1 3 2</span></code></pre><ul><li>首先 <code>fn2()</code> 被压入栈，而后<code>setTimeout</code>里面的回调函数也就是 <code>console.log(2)</code> 会入队在<code>消息队列</code>当中；当<code>调用栈被清空时</code>执行消息队列的函数。</li><li>接着 <code>fn1()</code> 被压入栈，输出<code>1</code>后弹出；接着输出<code> 3</code>，弹出<code>fn2()</code></li><li>此时调用栈清空，执行<code>消息队列</code>函数，输出 2 【这也是为什么setTimeout的延时是最小延时时间】</li></ul><p><img src="https://cdn.jsdelivr.net/gh/polarisWrp/photo_stage/images/pic202206202321748.png" alt="image-20220620232121700"></p><h3 id="3-4微任务栗子"><a href="#3-4微任务栗子" class="headerlink" title="3.4微任务栗子"></a>3.4微任务栗子</h3><ul><li>Async await 创建的微任务会存放在<code>微任务队列</code>中，当<code>调用栈清空时会立即执行</code>，同时<code>在这期间存储的其他微任务</code>也会<code>一并执行</code>。</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>reslove <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    <span class="token function">reslove</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>resloved <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>resloved<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 4、1、3、5、6、2</span></code></pre><ul><li>首先 <code>new Promise</code>被压入栈中，依次输出 <code>4,5</code>后弹出</li><li>接着<code> fn2()</code> 被压入栈中，<code>setTimeout</code>中的回调进入<code>消息队列</code>；<br>-<code> fn1()</code>压入栈 输出<code>1</code>后弹出；接着输出 <code>3</code></li><li><code>then方法</code>中的回调进入微任务队列中；此时弹出<code>fn2()</code> ;调用栈被清空</li><li>立即执行微任务队列，清空消息队列；依次输出了 <code>5(resloved )、 6、2</code>。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/polarisWrp/photo_stage/images/pic202206202334192.png" alt="image-20220620233457135"></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 事件循环机制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Js栈内存与堆内存</title>
      <link href="/2022/061760149.html"/>
      <url>/2022/061760149.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h2><ul><li>JS的内存空间分为<strong>栈(stack)<strong>、</strong>堆(heap)<strong>、</strong>池</strong>(一般也会归类为栈中)。</li><li>其中 <code>栈</code> 存放变量，<code>堆</code> 存放复杂对象，<code>池</code> 存放常量，所以也叫常量池。</li></ul><h2 id="2-栈的数据结构"><a href="#2-栈的数据结构" class="headerlink" title="2.栈的数据结构"></a>2.栈的数据结构</h2><ul><li>存放在栈内的元素只能通过栈的栈顶访问，获取的元素的方式类似于日常生活中从乒乓球筒内取出乒乓球</li><li>栈被称为是后入先出的数据结构 (LIFO last-in-first-out)</li></ul><p><img src="https://cdn.jsdelivr.net/gh/polarisWrp/photo_stage/images/pic202206170021769.png" alt="image-20220617002142687"></p><h2 id="3-堆的数据结构"><a href="#3-堆的数据结构" class="headerlink" title="3.堆的数据结构"></a>3.堆的数据结构</h2><ol><li>堆是一种经过排序的<strong>树形数据结构</strong>，每个结点都有一个值。</li><li>通常我们所说的堆的数据结构，是指<code>二叉堆</code>。</li><li><code>堆的特点</code>是根结点的值最小（或最大），且<code>根结点</code>的两个子树也是一个堆。</li><li>由于堆的这个特性，常用来实现优先队列，堆的存取是随意，这就如同我们在图书馆的书架上取书，<br>虽然书的摆放是有顺序的，但是我们想取任意一本都可以。</li></ol><h2 id="4-变量的类型与内存的关系"><a href="#4-变量的类型与内存的关系" class="headerlink" title="4.变量的类型与内存的关系"></a>4.变量的类型与内存的关系</h2><h3 id="4-1基本数据类型"><a href="#4-1基本数据类型" class="headerlink" title="4.1基本数据类型"></a>4.1基本数据类型</h3><pre class=" language-JavaScript"><code class="language-JavaScript">String Number Boolean null undefined Symbol</code></pre><ul><li>基本数据类型保存在<code>栈内存</code>中;</li><li>基本数据类型占用空间小，大小固定，按值访问;</li><li>但是<code>闭包</code>中的基本数据类型的变量不存于栈内存中，而是存储在<code>堆内存</code>中。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/polarisWrp/photo_stage/images/pic202206170033969.png" alt="image-20220617003337927"></p><h3 id="4-2引用数据类型"><a href="#4-2引用数据类型" class="headerlink" title="4.2引用数据类型"></a>4.2引用数据类型</h3><ul><li>例如 <code>Array,Function,Object</code>可以认为除了上文提到的基本数据类型以外，所有类型都是引用数据类型;</li><li><code>引用数据类型</code>存储在<code>堆内存</code>中;</li><li>引用数据类型占据空间大、大小不固定。</li></ul><ol><li>引用数据类型在栈中存储了<code>指针</code>，该指针<code>指向堆中该实体的起始地址</code>。 </li><li>当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实体</li></ol><pre class=" language-JavaScript"><code class="language-JavaScript">// 基本数据类型-栈内存let a1 = 0;// 基本数据类型-栈内存let a2 = 'this is string';// 基本数据类型-栈内存let a3 = null;// 对象的指针存放在栈内存中，指针指向的对象存放在堆内存中let b = { m: 20 };// 数组的指针存放在栈内存中，指针指向的数组存放在堆内存中let c = [1, 2, 3];</code></pre><p><img src="https://cdn.jsdelivr.net/gh/polarisWrp/photo_stage/images/pic202206170034135.png" alt="image-20220617003402086"></p><ul><li>当我们要访问堆内存中的<code>引用数据类型</code>时，实际上我们首先是从变量中获取了该 <strong>对象的地址指针</strong>， 然后再从 <strong>堆内存</strong> 中取得我们需要的数据。</li></ul><h2 id="5-内存角度分析变量复制"><a href="#5-内存角度分析变量复制" class="headerlink" title="5.内存角度分析变量复制"></a>5.内存角度分析变量复制</h2><h3 id="5-1基本数据类型复制"><a href="#5-1基本数据类型复制" class="headerlink" title="5.1基本数据类型复制"></a>5.1基本数据类型复制</h3><pre class=" language-JavaScript"><code class="language-JavaScript">let a = 20;let b = a;b = 30;console.log(a); // 20</code></pre><p><img src="https://cdn.jsdelivr.net/gh/polarisWrp/photo_stage/images/pic202206170036999.png" alt="image-20220617003655920"></p><ul><li>基本数据类型复制时，栈中会分配新的存储空间；</li><li>这也是使用 <code>JSON.parse(JSON.stringify(data))</code>可以对数据进行深拷贝的原因。</li></ul><h3 id="5-2引用数据类型的复制"><a href="#5-2引用数据类型的复制" class="headerlink" title="5.2引用数据类型的复制"></a>5.2引用数据类型的复制</h3><pre class=" language-JavaScript"><code class="language-JavaScript">let m = { a: 10, b: 20 }let n = mn.a = 15console.log(m.a) //15</code></pre><p><img src="https://cdn.jsdelivr.net/gh/polarisWrp/photo_stage/images/pic202206170038079.png" alt="image-20220617003829031"></p><ul><li>引用数据类型复制时，堆内存会复制一个数据源的地址，指向的是同一个堆内存数据；</li><li>日常开发中对于引用数据类型的复制，应考虑使用深拷贝；从而不影响到数据源。</li></ul><h2 id="6-栈内存与堆内存的比较"><a href="#6-栈内存与堆内存的比较" class="headerlink" title="6.栈内存与堆内存的比较"></a>6.栈内存与堆内存的比较</h2><ul><li>在JS中，基本数据类型变量<code>大小固定</code>，并且<code>操作简单</code>容易，所以把它们放入栈中存储; </li><li>引用类型变量<code>大小不固定</code>，所以把它们分配给堆中，让他们<code>申请空间的时候自己确定大小</code>，这样把它们分开存储能够使得程序运行起来占用的内存最小;</li><li><code>栈内存</code>由于它的特点，所以它的系统效率较高。 <code>堆内存</code>需要分配<code>空间和地址</code>，还<code>要把地址存在栈中</code>，所以效率低于栈。</li></ul><h2 id="7-引用数据类型的深浅拷贝"><a href="#7-引用数据类型的深浅拷贝" class="headerlink" title="7.引用数据类型的深浅拷贝"></a>7.引用数据类型的深浅拷贝</h2><ul><li>手写对象深浅拷贝函数</li></ul><h3 id="7-1-实现思路："><a href="#7-1-实现思路：" class="headerlink" title="7.1 实现思路："></a>7.1 实现思路：</h3><ol><li>判断传入的数据类型，基本数据类型直接返回;</li><li>复杂数据类型判断是null 或是数组还是对象 ;初始化一个空数组或者空对象用于缓存数据;</li><li>递归遍历传入的数组和对象，拷贝到 2 创建出的缓存当中，返回最终结果。</li></ol><h3 id="7-2-栗子"><a href="#7-2-栗子" class="headerlink" title="7.2 栗子"></a>7.2 栗子</h3><pre class=" language-JavaScript"><code class="language-JavaScript">const arr = [1, 2, [22], 23]const testObj = {  a: 1,  b: 2,  c: {    d: 4,  },}function cloneFn(obj) {  // 基本数据类型直接返回  if (typeof obj !== 'object' && typeof obj != null) return obj  const temp = Array.isArray(obj) ? [] : {}  if (Array.isArray(temp)) {    // 数组    obj.forEach(item => {       temp.push(Array.isArray(item) ? cloneFn(item) : item)    })  } else {    // 对象    for (const key in obj) {      if (!obj.hasOwnProperty(key)) return      const valIsObj = typeof obj[key] === 'object'      temp[key] = valIsObj ? cloneFn(obj[key]) : obj[key]    }  }  return temp}const res = cloneFn(testObj)res.a = 9999// res.push(99)console.log(res);console.log(testObj);</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手写常见js函数or方法</title>
      <link href="/2022/061421649.html"/>
      <url>/2022/061421649.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、常见功能函数"><a href="#一、常见功能函数" class="headerlink" title="一、常见功能函数"></a>一、常见功能函数</h2><h3 id="1-防抖，节流函数"><a href="#1-防抖，节流函数" class="headerlink" title="1. 防抖，节流函数"></a>1. 防抖，节流函数</h3><h4 id="1-1-函数防抖"><a href="#1-1-函数防抖" class="headerlink" title="1.1 函数防抖"></a>1.1 函数防抖</h4><ul><li>在延时时间内多次点击，每次点击都会重置延时时间；类似于坐电梯，在一定时间内只要有人按开关，那么电梯就不会关上。</li></ul><pre class=" language-JavaScript"><code class="language-JavaScript">//执行函数， 延迟时长， 是否立即执行debounceFn(fn, delay, immediate){    let timer = null    return function () {        const arg = arguments        cons that = this        if (immediate) {          fn.apply(that,arg)          immediate = false          return        }        if (timer) clearTimeout(timer)        timer = setTimeout(() => {            fn.apply(that, arg)        }, 1000)    }}</code></pre><h4 id="1-2-函数节流"><a href="#1-2-函数节流" class="headerlink" title="1.2 函数节流"></a>1.2 函数节流</h4><ul><li>一定时间内多次点击，执行固定次数</li></ul><pre class=" language-JavaScript"><code class="language-JavaScript">function throttle(fn, wait, immediate) {  let timer = null   return function () {    let _this = this    let args = arguments    if (immediate) {        fn.apply(_this, args)        immediate = false        return    }    if (!timer) {       timeout = setTimeout(() => {        timer = null;        fn.apply(_this, args)      }, wait)    }  }}</code></pre><h3 id="2-递归函数"><a href="#2-递归函数" class="headerlink" title="2. 递归函数"></a>2. 递归函数</h3><h4 id="2-1-递归取出数组中指定的属性值"><a href="#2-1-递归取出数组中指定的属性值" class="headerlink" title="2.1 递归取出数组中指定的属性值"></a>2.1 递归取出数组中指定的属性值</h4><ul><li>数据结构类似如下，嵌套的数据模型与外层相同</li></ul><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Type</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token keyword">string</span>    children<span class="token punctuation">:</span> <span class="token keyword">Array</span><span class="token operator">&lt;</span>Type<span class="token operator">></span> <span class="token operator">|</span> undefined<span class="token punctuation">}</span> list<span class="token punctuation">:</span> <span class="token keyword">Array</span><span class="token operator">&lt;</span>Type<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'kkk'</span><span class="token punctuation">,</span>        children<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            name<span class="token punctuation">:</span> <span class="token string">'ppp'</span><span class="token punctuation">,</span>            children<span class="token punctuation">:</span> <span class="token punctuation">[</span>              <span class="token punctuation">{</span>                name<span class="token punctuation">:</span> <span class="token string">'uuu'</span><span class="token punctuation">,</span>                children<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">}</span>            <span class="token punctuation">]</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span> <span class="token punctuation">]</span></code></pre><ul><li>需求：将数组中name属性值取出，拼接成字符串</li><li>关键点在于 temp 这个数据需要与递归函数隔离开，否则每次调用函数都会重置temp函数；从而无法获取所有名称集合</li></ul><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">getTypeName</span><span class="token punctuation">(</span>arr<span class="token punctuation">:</span> <span class="token keyword">Array</span><span class="token operator">&lt;</span>Type<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">'-'</span>    <span class="token keyword">let</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">function</span> <span class="token function">recursiveFn</span><span class="token punctuation">(</span>list<span class="token punctuation">:</span> <span class="token keyword">Array</span><span class="token operator">&lt;</span>Type<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>                temp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>name<span class="token punctuation">)</span>                <span class="token function">recursiveFn</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>children<span class="token punctuation">)</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                temp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>name<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">recursiveFn</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>    <span class="token keyword">return</span> temp<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">'-'</span><span class="token punctuation">}</span></code></pre><h4 id="2-2-将嵌套的数组数据转为json树形结构"><a href="#2-2-将嵌套的数组数据转为json树形结构" class="headerlink" title="2.2 将嵌套的数组数据转为json树形结构"></a>2.2 将嵌套的数组数据转为json树形结构</h4><ul><li>数据源如下</li></ul><pre class=" language-JavaScript"><code class="language-JavaScript">const arr = [1, 2, [3, [4, 5], 6], 7, [8], 9]方法一function recursiveFn(list) {    const result = []    for (let i = 0; i < list?.length; i++) {        if (typeof list[i] === 'number') {            result.push({                value: list[i]            })        } else if (Array.isArray(list[i])){            result.push({                children: recursiveFn(list[i])            })        }    }    return result}方法二function recursiveFn2(arr) {    if (typeof arr === 'number') {        return {            value: arr        }    } else if (Array.isArray(arr)) {        return arr?.map(item => recursiveFn2(item))    }}recursiveFn(arr)</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日计划-Day Day Up</title>
      <link href="/2022/061312805.html"/>
      <url>/2022/061312805.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、手写js题目"><a href="#一、手写js题目" class="headerlink" title="一、手写js题目"></a>一、手写js题目</h1><h2 id="1-1-JavaScript"><a href="#1-1-JavaScript" class="headerlink" title="1.1 JavaScript"></a>1.1 JavaScript</h2><ul><li><del>防抖节流</del>，promise函数，<del>对象的深浅拷贝</del>，js原型、原型链，instanceof</li><li><del>js事件循环机制（nextTick原理）</del>，浏览器回流与重绘，js闭包，js精度丢失</li><li>常用排序算法 插入，冒泡，快速，选择 </li><li><del>js函数作用域</del> <del>js内存栈与堆</del><h1 id="二、Vue2核心api的手写"><a href="#二、Vue2核心api的手写" class="headerlink" title="二、Vue2核心api的手写"></a>二、Vue2核心api的手写</h1><h2 id="2-1-Vue-Api"><a href="#2-1-Vue-Api" class="headerlink" title="2.1 Vue-Api"></a>2.1 Vue-Api</h2></li><li>双向绑定（响应式原理）</li><li>nextTick原理</li><li>diff算法</li><li>AST抽象语法树</li><li>事件总线（发布订阅模式）<h1 id="三、了解Vue3"><a href="#三、了解Vue3" class="headerlink" title="三、了解Vue3"></a>三、了解Vue3</h1><h2 id="3-1-Vue-3"><a href="#3-1-Vue-3" class="headerlink" title="3.1 Vue-3"></a>3.1 Vue-3</h2></li><li>搭建项目，熟悉api使用</li><li>区分V3提升点</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> My Schedule </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用webpack搭建vuecli</title>
      <link href="/2022/061258326.html"/>
      <url>/2022/061258326.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、基础步骤"><a href="#一、基础步骤" class="headerlink" title="一、基础步骤"></a>一、基础步骤</h1><ol><li><code>npm init</code> 初始化 <code>package.json</code>文件</li><li>创建src目录-&gt;在此目录下创建 main.js 文件作为入口文件</li><li>在 <code>package.json</code> 文件内新增打包命令</li><li>执行 <code>npm run build</code> 查看是否打包成功 （成功的话dist文件夹下会新增打包的文件）<h1 id="二、webpack基础配置"><a href="#二、webpack基础配置" class="headerlink" title="二、webpack基础配置"></a>二、webpack基础配置</h1><h2 id="1、新建文件"><a href="#1、新建文件" class="headerlink" title="1、新建文件"></a>1、新建文件</h2><ul><li>在项目根目录下新增build目录，并且创建<code>webpack.config.js</code>文件<h2 id="2、配置文件"><a href="#2、配置文件" class="headerlink" title="2、配置文件"></a>2、配置文件</h2></li></ul></li></ol><ul><li>webpack.config.js 写入</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 引入核心模块path，用户获取文件路径</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 导出配置信息</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 设置模式</span>    development， production 开发、生产模式    默认生产模式，也可以设置为 none <span class="token operator">*</span><span class="token operator">/</span>    mode<span class="token punctuation">:</span> <span class="token string">'development'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 设置入口文件路径</span>    entry<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../src/main.js'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 设置输出信息</span>        output<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 输出文件名</span>            filename<span class="token punctuation">:</span> <span class="token string">'budle.js'</span><span class="token punctuation">,</span>                path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../build'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3、更改打包"><a href="#3、更改打包" class="headerlink" title="3、更改打包"></a>3、更改打包</h2><ul><li>在<code>package.json</code>文件中更改打包命令，并且执行<code>npm run build</code><pre><code>&quot;build&quot;: &quot;webpack --config build/webpack.config.js&quot;</code></pre></li></ul><p><img src="https://cdn.jsdelivr.net/gh/polarisWrp/photo_stage/images/pic202206120412542.png" alt="image-20220612041213620"></p><h2 id="4、缓存以及自动引入js"><a href="#4、缓存以及自动引入js" class="headerlink" title="4、缓存以及自动引入js"></a>4、缓存以及自动引入js</h2><ul><li>HTML自动引入打包后的js文件</li></ul><ol><li>使用 webpack 来打包我们的模块化后的应用程序，webpack 会生成一个可部署的 &#x2F;dist 目录，然后把打包后的内容放置在此目录中。</li><li>只要 <strong>dist</strong> 目录中的内容部署到 <strong>server</strong> 上，client（通常是浏览器）就能够访问此 server 的网站及其资源。而最后一步获取资源是比较耗费时间的，所以浏览器会使用 <strong>缓存</strong> 。</li><li>浏览器通过<strong>命中缓存</strong>，以降低网络流量，使网站加载速度更快；但是如果我们在部署新版本时不更改资源的文件名，浏览器可能会认为它没有被更新，就会使用它的缓存版本。由于缓存的存在，当你需要获取新的代码时，就会显得很棘手。</li></ol><ul><li>基于以上我们不能每次打包生成同样的文件名，也不会每次打包后去更改 <code>index.html</code> 文件里面引入的打包后的js文件 </li><li>每次打包生成不同名称的文件 <code> html-webpack-plugin</code></li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 安装</span>npm i <span class="token operator">-</span>D html<span class="token operator">-</span>webpack<span class="token operator">-</span>plugin@<span class="token number">4</span></code></pre><h3 id="4-1、新增-public-文件夹，创建-index-html-作为我们的模板文件"><a href="#4-1、新增-public-文件夹，创建-index-html-作为我们的模板文件" class="headerlink" title="4.1、新增 public 文件夹，创建 index.html 作为我们的模板文件"></a>4.1、新增 public 文件夹，创建 index.html 作为我们的模板文件</h3><ul><li>在<code>webpack.config.js</code>中新增配置</li><li>修改输出文件名，确保每次生成的js文件名称不重复</li><li>新增<code>plugin</code>配置，查看生成的<code>index.html</code>文件中是否自动引入了js文件</li></ul><p><img src="https://cdn.jsdelivr.net/gh/polarisWrp/photo_stage/images/pic202206120422014.png" alt="image-20220612042202935"></p><h2 id="5、多入口文件的开发"><a href="#5、多入口文件的开发" class="headerlink" title="5、多入口文件的开发"></a>5、多入口文件的开发</h2><ul><li>定义：多入口文件就是<strong>设置</strong>多个入口文件和<strong>输出</strong>对应打包后的文件</li></ul><ol><li><p>配置单个入口文件时： entry为一个属性</p></li><li><p>配置多个入口文件： entry需要配置成一个对象</p><p>2.1 对象里面的 <strong>属性名</strong> 就是该入口文件的标识，<strong>属性值</strong>就是对应的文件路径，输出时需要在对应的<code>html</code>文件中引入，我们可以通过配置多个<code>html-webpack-plugin</code>的方式实现。</p><p>2.2 在<code>html-webpack-plugin</code>中需要 设置<code>filename</code>来设置输出的<code>html</code>文件名，<code>chunks</code>来关联上面<code>entry</code>里面的入口文件</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/polarisWrp/photo_stage/images/pic202206120426600.png" alt="image-20220612042639527"></p><h3 id="5-1、配置栗子"><a href="#5-1、配置栗子" class="headerlink" title="5.1、配置栗子"></a>5.1、配置栗子</h3><p><del>Talk is cheap,show the code</del></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 引入核心模块path，用户获取文件路径</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"html-webpack-plugin"</span><span class="token punctuation">)</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 导出配置信息</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* 设置模式  development， production 开发、生产模式  默认生产模式，也可以设置为 none */</span>  mode<span class="token punctuation">:</span> <span class="token string">'development'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 设置入口文件路径</span>  entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>    main<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../src/main.js'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    other<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../src/other.js'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 设置输出信息</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 输出文件名</span>    filename<span class="token punctuation">:</span> <span class="token string">'[name].[hash:8].js'</span><span class="token punctuation">,</span>    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../build'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 设置模板</span>      template<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../public/index.html'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      filename<span class="token punctuation">:</span> <span class="token string">'index.html'</span><span class="token punctuation">,</span>      chunks<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'main'</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      template<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../public/other.html'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      filename<span class="token punctuation">:</span> <span class="token string">'other.html'</span><span class="token punctuation">,</span>      chunks<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'other'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//关联上面entry的类名</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h3 id="5-2、清除残余文件，插件-clean-webpack-plugin"><a href="#5-2、清除残余文件，插件-clean-webpack-plugin" class="headerlink" title="5.2、清除残余文件，插件 clean-webpack-plugin"></a>5.2、清除残余文件，插件 <code>clean-webpack-plugin</code></h3><ul><li>由于每次打包都会生成新的文件，旧的文件依旧残留在dist目录里；我们需要的是新的生成之后删除旧的文件</li></ul><pre class=" language-js"><code class="language-js">npm i <span class="token operator">-</span>D clean<span class="token operator">-</span>webpack<span class="token operator">-</span>plugin<span class="token comment" spellcheck="true">//引入</span><span class="token keyword">const</span> <span class="token punctuation">{</span> CleanWebpackPlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"clean-webpack-plugin"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 注册</span>plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span></code></pre><h1 id="三、处理除了js以外的文件"><a href="#三、处理除了js以外的文件" class="headerlink" title="三、处理除了js以外的文件"></a>三、处理除了js以外的文件</h1><ul><li><code>webpack</code>默认只能处理 <strong>js</strong> 和 <strong>json</strong> 文件，要想对其他文件生效，需要加载对应的<code>loader</code></li></ul><h3 id="1、引用css文件"><a href="#1、引用css文件" class="headerlink" title="1、引用css文件"></a>1、引用css文件</h3><ol><li>新建<code>assets</code>静态文件夹，新增<code>normal.css</code>文件</li><li>使用预处理器如 <code>less  sass </code>等，需要安装对应加载器以及新增 <code>.less</code>或 <code>.scss</code>文件</li></ol><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//**注意版本号是否兼容**</span>npm i <span class="token operator">-</span>D style<span class="token operator">-</span>loader@<span class="token number">2</span> css<span class="token operator">-</span>loader@<span class="token number">3</span>  <span class="token comment" spellcheck="true">//如果使用预处理器，则需要多安装相应的预处理器和loader</span>npm i <span class="token operator">-</span>D less less<span class="token operator">-</span>loader@<span class="token number">5</span></code></pre><ul><li>在<code>webpack.config.js</code>文件中新增 <code>loader</code>配置</li></ul><pre class=" language-js"><code class="language-js"> module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    module<span class="token punctuation">:</span> <span class="token punctuation">{</span>        rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 正则匹配所有 .css 结尾的文件</span>            test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 匹配到之后使用的loader，从右向左解析</span>            use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">]</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            test<span class="token punctuation">:</span> <span class="token regex">/\.less$/</span><span class="token punctuation">,</span>            use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span> <span class="token string">'less-loader'</span><span class="token punctuation">]</span>          <span class="token punctuation">}</span>        <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2、添加浏览器前缀"><a href="#2、添加浏览器前缀" class="headerlink" title="2、添加浏览器前缀"></a>2、添加浏览器前缀</h3><ul><li><code>**postcss-loader autoprefixer**</code></li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//注意版本号</span>npm i <span class="token operator">-</span>D postcss<span class="token operator">-</span>loader@<span class="token number">4</span> autoprefixer@<span class="token number">8</span><span class="token number">1</span><span class="token punctuation">.</span>在module中配置postcss<span class="token operator">-</span>loader    module<span class="token punctuation">:</span> <span class="token punctuation">{</span>        rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>             <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">//正则匹配所有.css结尾的文件</span>              test<span class="token punctuation">:</span><span class="token regex">/\.css$/</span><span class="token punctuation">,</span>              <span class="token comment" spellcheck="true">//匹配到之后使用的loader,从右向左解析</span>              use<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span><span class="token string">'css-loader'</span><span class="token punctuation">,</span><span class="token string">'postcss-loader'</span><span class="token punctuation">]</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>              test<span class="token punctuation">:</span><span class="token regex">/\.less$/</span><span class="token punctuation">,</span>              use<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span><span class="token string">'css-loader'</span><span class="token punctuation">,</span><span class="token string">'postcss-loader'</span><span class="token punctuation">,</span><span class="token string">'less-loader'</span><span class="token punctuation">]</span>          <span class="token punctuation">}</span>        <span class="token punctuation">]</span>     <span class="token punctuation">}</span><span class="token number">2</span><span class="token punctuation">.</span> 使autoperfixer生效的方式  <span class="token number">2.1</span>方式一：在<span class="token number">1</span><span class="token punctuation">.</span>基础上还需要在项目根目录新增postcss<span class="token punctuation">.</span>config<span class="token punctuation">.</span>js配置文件；添加如下配置    module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>      plugins<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'autoprefixer'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token number">2.2</span>方式二：在<span class="token number">1</span><span class="token punctuation">.</span> 的基础上修改配置如下     use<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span><span class="token string">'css-loader'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>         loader<span class="token punctuation">:</span> <span class="token string">'postcss-loader'</span><span class="token punctuation">,</span>         options<span class="token punctuation">:</span> <span class="token punctuation">{</span>             plugins<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'autoprefixer'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">'less-loader'</span><span class="token punctuation">]</span></code></pre><ul><li>在<code>index.html</code>中样式被添加到了style标签中；但如果样式文件过多的时候；index文件就会过于混乱，咱们需要把css文件拆分出去。通过外链的方式引入。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/polarisWrp/photo_stage/images/pic202206120444950.png" alt="image-20220612044417880"></p><h3 id="3、抽离css文件-mini-css-extract-plugin-，以外链的方式引入它"><a href="#3、抽离css文件-mini-css-extract-plugin-，以外链的方式引入它" class="headerlink" title="3、抽离css文件  **mini-css-extract-plugin** ，以外链的方式引入它"></a>3、抽离css文件  <code>**mini-css-extract-plugin** </code>，以外链的方式引入它</h3><pre class=" language-js"><code class="language-js">npm i <span class="token operator">-</span>D mini<span class="token operator">-</span>css<span class="token operator">-</span>extract<span class="token operator">-</span>plugin@<span class="token number">0.9</span><span class="token punctuation">.</span><span class="token number">0</span>module<span class="token punctuation">:</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//配置模块规则</span>        rules<span class="token punctuation">:</span><span class="token punctuation">[</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//正则匹配所有.css结尾的文件</span>                test<span class="token punctuation">:</span><span class="token regex">/\.css$/i</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">//匹配到之后使用的loader,从右向左解析</span>                use<span class="token punctuation">:</span><span class="token punctuation">[</span>MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span><span class="token string">'css-loader'</span><span class="token punctuation">,</span><span class="token string">'postcss-loader'</span><span class="token punctuation">]</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                test<span class="token punctuation">:</span><span class="token regex">/\.less$/i</span><span class="token punctuation">,</span>                use<span class="token punctuation">:</span><span class="token punctuation">[</span>MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span><span class="token string">'css-loader'</span><span class="token punctuation">,</span><span class="token string">'postcss-loader'</span><span class="token punctuation">,</span><span class="token string">'less-loader'</span><span class="token punctuation">]</span>            <span class="token punctuation">}</span>                    <span class="token punctuation">]</span> <span class="token punctuation">}</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/polarisWrp/photo_stage/images/pic202206120445073.png" alt="image-20220612044525018"></p><h3 id="4、打包其他文件：图片，字体，媒体等"><a href="#4、打包其他文件：图片，字体，媒体等" class="headerlink" title="4、打包其他文件：图片，字体，媒体等"></a>4、打包其他文件：图片，字体，媒体等</h3><pre class=" language-js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">.</span> 对图片、字体、媒体等静态资源一般使用url<span class="token operator">-</span>loader进行处理后放入打包目录里面，<span class="token number">2</span><span class="token punctuation">.</span> url<span class="token operator">-</span>loader<span class="token punctuation">:</span>如果文件小于限制的大小会转成base64编码<span class="token punctuation">,</span>否则使用file<span class="token operator">-</span>loader将文件移动到输出的目录中<span class="token number">3</span><span class="token punctuation">.</span> url<span class="token operator">-</span>loader内置了file<span class="token operator">-</span>loader所以不需要安装file<span class="token operator">-</span>loadernpm i <span class="token operator">-</span>D  url<span class="token operator">-</span>loader@<span class="token number">4</span> file<span class="token operator">-</span>loader@<span class="token number">4</span>rules<span class="token punctuation">:</span><span class="token punctuation">[</span>       <span class="token comment" spellcheck="true">//处理图片</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//正则匹配图片格式</span>        test<span class="token punctuation">:</span><span class="token regex">/\.(jpe?g|png|gif)$/i</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span><span class="token punctuation">[</span>            <span class="token punctuation">{</span>                loader<span class="token punctuation">:</span><span class="token string">'url-loader'</span><span class="token punctuation">,</span>                options<span class="token punctuation">:</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//限制文件大小</span>                    limit<span class="token punctuation">:</span><span class="token number">10240</span><span class="token punctuation">,</span>                    <span class="token comment" spellcheck="true">//超出上面限制之后使用的loader ext是文件本来的扩展名</span>                    name<span class="token punctuation">:</span><span class="token string">'image/[name].[hash:8].[ext]'</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span>执行npm run build 可以看到dist文件下下面多了image文件夹，里面包含刚才在main<span class="token punctuation">.</span>js里引入的图片，其他静态资源配置类似。</code></pre><h3 id="5、babel-loader需要和babel-core搭配使用"><a href="#5、babel-loader需要和babel-core搭配使用" class="headerlink" title="5、babel-loader需要和babel-core搭配使用"></a>5、babel-loader需要和babel-core搭配使用</h3><ul><li>因为不是所有浏览器都能支持es6+语法，需要我们转义成es5</li></ul><pre class=" language-js"><code class="language-js">babel<span class="token operator">-</span>loader <span class="token number">8</span><span class="token punctuation">.</span>x 对应babel<span class="token operator">-</span>core <span class="token number">7</span><span class="token punctuation">.</span>xbabel<span class="token operator">-</span>loader <span class="token number">7</span><span class="token punctuation">.</span>x 对应babel<span class="token operator">-</span>core <span class="token number">6</span><span class="token punctuation">.</span>xnpm i <span class="token operator">-</span>D babel<span class="token operator">-</span>loader @babel<span class="token operator">/</span>preset<span class="token operator">-</span>env @babel<span class="token operator">/</span>corerules<span class="token punctuation">:</span><span class="token punctuation">[</span>       <span class="token comment" spellcheck="true">//处理js语法浏览器兼容问题</span>    <span class="token punctuation">{</span>        test<span class="token punctuation">:</span><span class="token string">'/\.js$/'</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span><span class="token punctuation">{</span>            loader<span class="token punctuation">:</span><span class="token string">'bable-loader'</span><span class="token punctuation">,</span>            options<span class="token punctuation">:</span><span class="token punctuation">{</span>                presets<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'@babel/preset-env'</span><span class="token punctuation">]</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//排除依赖下的js</span>        exclude<span class="token punctuation">:</span><span class="token regex">/node_modules/</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><ul><li>使用<code>babel-loader</code>不能处理如promise,generator,set,map,proxy等新的api，需要借助<code>babel-polyfill</code></li></ul><pre class=" language-js"><code class="language-js">npm i <span class="token operator">-</span>D bable<span class="token operator">/</span>polyfill<span class="token comment" spellcheck="true">// 更改入口文件配置</span>entry<span class="token punctuation">:</span><span class="token punctuation">{</span>    main<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">"@babel/polyfill"</span><span class="token punctuation">,</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'../src/main.js'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    other<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">"@babel/polyfill"</span><span class="token punctuation">,</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'../src/other.js'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><ul><li>至此，都是基础webpack4版本对js,css等静态资源的基础配置</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 引入内置模块path, 用于获取文件路径</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/* 插件plugin */</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">{</span> CleanWebpackPlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'clean-webpack-plugin'</span><span class="token punctuation">)</span><span class="token keyword">const</span> MiniCssExtractPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mini-css-extract-plugin'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">{</span> loader <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mini-css-extract-plugin'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 导出配置信息</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/*     设置模式，默认为生产模式 production;也可以是none  */</span>  mode<span class="token punctuation">:</span> <span class="token string">'development'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/*     入口文件 【单个入口是属性，配置多个入口是需要配置成对象】    path.reslove() 由相对路劲计算出绝对路径; __dirname指的是当前模块的目录名称  */</span>  <span class="token comment" spellcheck="true">// entry: path.resolve(__dirname, '../src/main.js'),</span>  entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>    main<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"@babel/polyfill"</span><span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>      __dirname<span class="token punctuation">,</span>      <span class="token string">'../src/main.js'</span>    <span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    other<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">"@babel/polyfill"</span><span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>      __dirname<span class="token punctuation">,</span>      <span class="token string">'../src/other.js'</span>    <span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/* 出口信息 */</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 输出文件名 确保每次生成的文件名不重复，防止文件更新后浏览器仍使用缓存文件</span>    filename<span class="token punctuation">:</span> <span class="token string">'[name].[hash:8].js'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 输出文件路径</span>    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>      __dirname<span class="token punctuation">,</span>      <span class="token string">'../dist'</span>    <span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token comment" spellcheck="true">// 该插件会自动引入生成的js文件</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      template<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>        __dirname<span class="token punctuation">,</span>        <span class="token string">'../public/index.html'</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 设置html模板</span>      filename<span class="token punctuation">:</span> <span class="token string">'index.html'</span><span class="token punctuation">,</span>      chunks<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'main'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//用于关联entry的文件</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      template<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>        __dirname<span class="token punctuation">,</span>        <span class="token string">'../public/other.html'</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>      filename<span class="token punctuation">:</span> <span class="token string">'other.html'</span><span class="token punctuation">,</span>      chunks<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'other'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      filename<span class="token punctuation">:</span> <span class="token string">'[name].[hash:8].css'</span><span class="token punctuation">,</span>      chunkFilename<span class="token punctuation">:</span> <span class="token string">'[id].css'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 配置模块规则</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>          MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span>          <span class="token string">'css-loader'</span><span class="token punctuation">,</span>          <span class="token string">'postcss-loader'</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.less$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>          MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span>          <span class="token string">'css-loader'</span><span class="token punctuation">,</span>          <span class="token string">'postcss-loader'</span><span class="token punctuation">,</span>          <span class="token string">'less-loader'</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.(jp?g|png|gif)$/i</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            loader<span class="token punctuation">:</span> <span class="token string">'url-loader'</span><span class="token punctuation">,</span>            options<span class="token punctuation">:</span> <span class="token punctuation">{</span>              limit<span class="token punctuation">:</span> <span class="token number">10240</span><span class="token punctuation">,</span>              fallback<span class="token punctuation">:</span> <span class="token punctuation">{</span>                loader<span class="token punctuation">:</span> <span class="token string">'file-loader'</span><span class="token punctuation">,</span>                options<span class="token punctuation">:</span> <span class="token punctuation">{</span>                  <span class="token comment" spellcheck="true">// 超出限制之后使用file-loader;ext是文件本来的扩展名</span>                  name<span class="token punctuation">:</span> <span class="token string">'image/[name].[hash:8].[ext]'</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>              <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.(mp4|webm|ogg|mp3|wav|flac|aac)(\?.*)?$/</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//媒体文件</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            loader<span class="token punctuation">:</span> <span class="token string">'url-loader'</span><span class="token punctuation">,</span>            options<span class="token punctuation">:</span> <span class="token punctuation">{</span>              limit<span class="token punctuation">:</span> <span class="token number">10240</span><span class="token punctuation">,</span>              fallback<span class="token punctuation">:</span> <span class="token punctuation">{</span>                loader<span class="token punctuation">:</span> <span class="token string">'file-loader'</span><span class="token punctuation">,</span>                options<span class="token punctuation">:</span> <span class="token punctuation">{</span>                  name<span class="token punctuation">:</span> <span class="token string">'media/[name].[hash:8].[ext]'</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>              <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.(woff2?|eot|ttf|otf)(\?.*)?$/i</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 字体</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            loader<span class="token punctuation">:</span> <span class="token string">'url-loader'</span><span class="token punctuation">,</span>            options<span class="token punctuation">:</span> <span class="token punctuation">{</span>              limit<span class="token punctuation">:</span> <span class="token number">10240</span><span class="token punctuation">,</span>              fallback<span class="token punctuation">:</span> <span class="token punctuation">{</span>                loader<span class="token punctuation">:</span> <span class="token string">'file-loader'</span><span class="token punctuation">,</span>                options<span class="token punctuation">:</span> <span class="token punctuation">{</span>                  name<span class="token punctuation">:</span> <span class="token string">'fonts/[name].[hash:8].[ext]'</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>              <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.js$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            loader<span class="token punctuation">:</span> <span class="token string">'babel-loader'</span><span class="token punctuation">,</span>            options<span class="token punctuation">:</span> <span class="token punctuation">{</span>              presets<span class="token punctuation">:</span> <span class="token punctuation">[</span>                <span class="token string">'@babel/preset-env'</span><span class="token punctuation">,</span>              <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 排除依赖下的js</span>        exclude<span class="token punctuation">:</span> <span class="token regex">/node_modules/</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><h1 id="四、搭建一个vue-cli"><a href="#四、搭建一个vue-cli" class="headerlink" title="四、搭建一个vue-cli"></a>四、搭建一个vue-cli</h1><h2 id="1、准备"><a href="#1、准备" class="headerlink" title="1、准备"></a>1、准备</h2><ol><li>vue是单文件组件，使用的是.vue文件，需要使用vue-loader来解析.vue文件</li><li>每个vue文件里面包含三个部分template(模板)、script(逻辑)、style(样式)；需要使用vue-template-compiler来编译模板,vue-style-loader来应用样式</li></ol><h2 id="2、依赖安装"><a href="#2、依赖安装" class="headerlink" title="2、依赖安装"></a>2、依赖安装</h2><ul><li><code>npm i -D vue-loader vue-template-compiler vue-style-loader </code></li><li><code>npm i -S vue</code></li></ul><h3 id="2-1、配置-webpack-dev-server-进行热更新"><a href="#2-1、配置-webpack-dev-server-进行热更新" class="headerlink" title="2.1、配置 webpack-dev-server 进行热更新"></a>2.1、配置 <code>webpack-dev-server</code> 进行热更新</h3><ul><li>热更新允许在运行时替换，添加，删除各种模块，而无需进行完全刷新重新加载整个页面。热更新中的<strong>热</strong>我们可以理解为这个模块正在运行中，<strong>热替换</strong>就是将<strong>正在运行的模块</strong>进行替换。</li></ul><pre class=" language-js"><code class="language-js">npm i <span class="token operator">-</span>D webpack<span class="token operator">-</span>dev<span class="token operator">-</span>serverwebpack<span class="token punctuation">.</span>config<span class="token punctuation">.</span>js新增配置<span class="token number">1</span><span class="token punctuation">.</span> 配置开发服务器  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>    port<span class="token punctuation">:</span> <span class="token number">8080</span><span class="token punctuation">,</span>    hot<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//开启热更新</span>    contentBase<span class="token punctuation">:</span> <span class="token string">'../dist'</span> <span class="token comment" spellcheck="true">//告诉服务器内容来源</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">.</span> src目录下新增App<span class="token punctuation">.</span>vue作为根组件<span class="token number">3</span><span class="token punctuation">.</span> 修改<span class="token keyword">public</span>文件下的index<span class="token punctuation">.</span>html<span class="token punctuation">;</span>它添加 div<span class="token number">4</span><span class="token punctuation">.</span> <span class="token keyword">package</span><span class="token punctuation">.</span>json 新增配置 <span class="token string">"dev"</span><span class="token punctuation">:</span> <span class="token string">"webpack-dev-server --config build/webpack.config.js --open"</span><span class="token number">5</span><span class="token punctuation">.</span> 更改webpack<span class="token operator">-</span>cli版本号 npm i <span class="token operator">-</span>D webpack<span class="token operator">-</span>cli@<span class="token number">3</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">package</span><span class="token punctuation">.</span>json<span class="token punctuation">{</span>  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"webpack_4"</span><span class="token punctuation">,</span>  <span class="token string">"version"</span><span class="token punctuation">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>  <span class="token string">"description"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token string">"main"</span><span class="token punctuation">:</span> <span class="token string">"index.js"</span><span class="token punctuation">,</span>  <span class="token string">"scripts"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"test"</span><span class="token punctuation">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span><span class="token punctuation">,</span>    <span class="token string">"dev"</span><span class="token punctuation">:</span> <span class="token string">"webpack-dev-server --config build/webpack.config.js --open"</span><span class="token punctuation">,</span>    <span class="token string">"build"</span><span class="token punctuation">:</span> <span class="token string">"webpack --config build/webpack.config.js"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">"keywords"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string">"author"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token string">"license"</span><span class="token punctuation">:</span> <span class="token string">"ISC"</span><span class="token punctuation">,</span>  <span class="token string">"devDependencies"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"@babel/core"</span><span class="token punctuation">:</span> <span class="token string">"^7.18.2"</span><span class="token punctuation">,</span>    <span class="token string">"@babel/preset-env"</span><span class="token punctuation">:</span> <span class="token string">"^7.18.2"</span><span class="token punctuation">,</span>    <span class="token string">"@webpack-cli/serve"</span><span class="token punctuation">:</span> <span class="token string">"^1.6.1"</span><span class="token punctuation">,</span>    <span class="token string">"autoprefixer"</span><span class="token punctuation">:</span> <span class="token string">"^8.6.5"</span><span class="token punctuation">,</span>    <span class="token string">"babel-loader"</span><span class="token punctuation">:</span> <span class="token string">"^8.2.5"</span><span class="token punctuation">,</span>    <span class="token string">"babel-preset-es2015"</span><span class="token punctuation">:</span> <span class="token string">"^6.24.1"</span><span class="token punctuation">,</span>    <span class="token string">"clean-webpack-plugin"</span><span class="token punctuation">:</span> <span class="token string">"^4.0.0"</span><span class="token punctuation">,</span>    <span class="token string">"css-loader"</span><span class="token punctuation">:</span> <span class="token string">"^3.6.0"</span><span class="token punctuation">,</span>    <span class="token string">"file-loader"</span><span class="token punctuation">:</span> <span class="token string">"^4.3.0"</span><span class="token punctuation">,</span>    <span class="token string">"html-webpack-plugin"</span><span class="token punctuation">:</span> <span class="token string">"^4.5.2"</span><span class="token punctuation">,</span>    <span class="token string">"less"</span><span class="token punctuation">:</span> <span class="token string">"^4.1.2"</span><span class="token punctuation">,</span>    <span class="token string">"less-loader"</span><span class="token punctuation">:</span> <span class="token string">"^5.0.0"</span><span class="token punctuation">,</span>    <span class="token string">"mini-css-extract-plugin"</span><span class="token punctuation">:</span> <span class="token string">"^0.9.0"</span><span class="token punctuation">,</span>    <span class="token string">"postcss-loader"</span><span class="token punctuation">:</span> <span class="token string">"^4.3.0"</span><span class="token punctuation">,</span>    <span class="token string">"style-loader"</span><span class="token punctuation">:</span> <span class="token string">"^2.0.0"</span><span class="token punctuation">,</span>    <span class="token string">"url-loader"</span><span class="token punctuation">:</span> <span class="token string">"^4.1.1"</span><span class="token punctuation">,</span>    <span class="token string">"vue"</span><span class="token punctuation">:</span> <span class="token string">"^2.6.14"</span><span class="token punctuation">,</span>    <span class="token string">"vue-loader"</span><span class="token punctuation">:</span> <span class="token string">"^15.7.0"</span><span class="token punctuation">,</span>    <span class="token string">"vue-style-loader"</span><span class="token punctuation">:</span> <span class="token string">"^4.1.3"</span><span class="token punctuation">,</span>    <span class="token string">"vue-template-compiler"</span><span class="token punctuation">:</span> <span class="token string">"^2.6.14"</span><span class="token punctuation">,</span>    <span class="token string">"webpack"</span><span class="token punctuation">:</span> <span class="token string">"^4.46.0"</span><span class="token punctuation">,</span>    <span class="token string">"webpack-cli"</span><span class="token punctuation">:</span> <span class="token string">"^4.9.2"</span><span class="token punctuation">,</span>    <span class="token string">"webpack-dev-server"</span><span class="token punctuation">:</span> <span class="token string">"^4.9.0"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">"dependencies"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"@babel/polyfill"</span><span class="token punctuation">:</span> <span class="token string">"^7.12.1"</span><span class="token punctuation">,</span>    <span class="token string">"@vue/compiler-sfc"</span><span class="token punctuation">:</span> <span class="token string">"^3.2.36"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-js"><code class="language-js">webpack<span class="token punctuation">.</span>config<span class="token punctuation">.</span>js<span class="token comment" spellcheck="true">// 引入内置模块path, 用于获取文件路径</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/* 插件plugin */</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">{</span> CleanWebpackPlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'clean-webpack-plugin'</span><span class="token punctuation">)</span><span class="token keyword">const</span> MiniCssExtractPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mini-css-extract-plugin'</span><span class="token punctuation">)</span><span class="token keyword">const</span> VueLoaderPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'vue-loader/lib/plugin'</span><span class="token punctuation">)</span><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 导出配置信息</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 配置开发服务器</span>  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>      directory<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//告诉服务器内容来源</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    port<span class="token punctuation">:</span> <span class="token number">8080</span><span class="token punctuation">,</span>    hot<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//开启热更新</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/* 设置模式，默认为生产模式 production;也可以是none*/</span>  mode<span class="token punctuation">:</span> <span class="token string">'development'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/*     入口文件 【单个入口是属性，配置多个入口是需要配置成对象】    path.reslove() 由相对路劲计算出绝对路径; __dirname指的是当前模块的目录名称  */</span>  entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>    main<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../src/main.js'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">/* 出口信息 */</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 输出文件名 确保每次生成的文件名不重复，防止文件更新后浏览器仍使用缓存文件</span>    filename<span class="token punctuation">:</span> <span class="token string">'[name].[hash:8].js'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 输出文件路径</span>    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token comment" spellcheck="true">// 该插件会自动引入生成的js文件</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      template<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>        __dirname<span class="token punctuation">,</span>        <span class="token string">'../public/index.html'</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 设置html模板</span>      filename<span class="token punctuation">:</span> <span class="token string">'index.html'</span><span class="token punctuation">,</span>      chunks<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'main'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//用于关联entry的文件</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      filename<span class="token punctuation">:</span> <span class="token string">'[name].[hash:8].css'</span><span class="token punctuation">,</span>      chunkFilename<span class="token punctuation">:</span> <span class="token string">'[id].css'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">VueLoaderPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>HotModuleReplacementPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token punctuation">]</span><span class="token punctuation">,</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 配置模块规则</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.vue$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'vue-loader'</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>          MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span>          <span class="token string">'css-loader'</span><span class="token punctuation">,</span>          <span class="token string">'postcss-loader'</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.less$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>          MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span>          <span class="token string">'css-loader'</span><span class="token punctuation">,</span>          <span class="token string">'postcss-loader'</span><span class="token punctuation">,</span>          <span class="token string">'less-loader'</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.(jp?g|png|gif)$/i</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            loader<span class="token punctuation">:</span> <span class="token string">'url-loader'</span><span class="token punctuation">,</span>            options<span class="token punctuation">:</span> <span class="token punctuation">{</span>              limit<span class="token punctuation">:</span> <span class="token number">10240</span><span class="token punctuation">,</span>              fallback<span class="token punctuation">:</span> <span class="token punctuation">{</span>                loader<span class="token punctuation">:</span> <span class="token string">'file-loader'</span><span class="token punctuation">,</span>                options<span class="token punctuation">:</span> <span class="token punctuation">{</span>                  <span class="token comment" spellcheck="true">// 超出限制之后使用file-loader;ext是文件本来的扩展名</span>                  name<span class="token punctuation">:</span> <span class="token string">'image/[name].[hash:8].[ext]'</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>              <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.(mp4|webm|ogg|mp3|wav|flac|aac)(\?.*)?$/</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//媒体文件</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            loader<span class="token punctuation">:</span> <span class="token string">'url-loader'</span><span class="token punctuation">,</span>            options<span class="token punctuation">:</span> <span class="token punctuation">{</span>              limit<span class="token punctuation">:</span> <span class="token number">10240</span><span class="token punctuation">,</span>              fallback<span class="token punctuation">:</span> <span class="token punctuation">{</span>                loader<span class="token punctuation">:</span> <span class="token string">'file-loader'</span><span class="token punctuation">,</span>                options<span class="token punctuation">:</span> <span class="token punctuation">{</span>                  name<span class="token punctuation">:</span> <span class="token string">'media/[name].[hash:8].[ext]'</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>              <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.(woff2?|eot|ttf|otf)(\?.*)?$/i</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 字体</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            loader<span class="token punctuation">:</span> <span class="token string">'url-loader'</span><span class="token punctuation">,</span>            options<span class="token punctuation">:</span> <span class="token punctuation">{</span>              limit<span class="token punctuation">:</span> <span class="token number">10240</span><span class="token punctuation">,</span>              fallback<span class="token punctuation">:</span> <span class="token punctuation">{</span>                loader<span class="token punctuation">:</span> <span class="token string">'file-loader'</span><span class="token punctuation">,</span>                options<span class="token punctuation">:</span> <span class="token punctuation">{</span>                  name<span class="token punctuation">:</span> <span class="token string">'fonts/[name].[hash:8].[ext]'</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>              <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.js$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            loader<span class="token punctuation">:</span> <span class="token string">'babel-loader'</span><span class="token punctuation">,</span>            options<span class="token punctuation">:</span> <span class="token punctuation">{</span>              presets<span class="token punctuation">:</span> <span class="token punctuation">[</span>                <span class="token string">'@babel/preset-env'</span><span class="token punctuation">,</span>              <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 排除依赖下的js</span>        exclude<span class="token punctuation">:</span> <span class="token regex">/node_modules/</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 配置模块的解析规则</span>  resolve<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建别名</span>    alias<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">'vue$'</span><span class="token punctuation">:</span> <span class="token string">'vue/dist/vue.runtime.esm.js'</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 设置@引用的地址为根目录下的src</span>      <span class="token string">'@'</span><span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../src'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//按顺序解析以下数组后缀名的文件</span>    extensions<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'*'</span><span class="token punctuation">,</span> <span class="token string">'.js'</span><span class="token punctuation">,</span> <span class="token string">'.json'</span><span class="token punctuation">,</span> <span class="token string">'.vue'</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3、区分开发环境与生产环境"><a href="#3、区分开发环境与生产环境" class="headerlink" title="3、区分开发环境与生产环境"></a>3、区分开发环境与生产环境</h2><ul><li>在build目录下新增两个文件,webpack.dev.js     webpack.prod.js</li><li><strong>开发环境</strong>主要是要实现热更新,不需要压缩代码，完整的sourceMap</li><li><strong>生产环境</strong>需要压缩代码、提取css文件、合理的sourceMap、分割代码等</li></ul><pre class=" language-js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">.</span> 使用webpack<span class="token operator">-</span>marge 合并配置采用<span class="token number">4</span>版本<span class="token number">2</span><span class="token punctuation">.</span> 使用copy<span class="token operator">-</span>webpack<span class="token operator">-</span>plugin 拷贝静态资源采用<span class="token number">5</span>版本<span class="token number">3</span><span class="token punctuation">.</span> 使用optimize<span class="token operator">-</span>css<span class="token operator">-</span>assets<span class="token operator">-</span>webpack<span class="token operator">-</span>plugin  压缩css采用<span class="token number">5</span>版本<span class="token number">4</span><span class="token punctuation">.</span> 使用uglifyjs<span class="token operator">-</span>webpack<span class="token operator">-</span>plugin 压缩js采用<span class="token number">2</span>版本</code></pre><h3 id="3-1、开发环境配置"><a href="#3-1、开发环境配置" class="headerlink" title="3.1、开发环境配置"></a>3.1、开发环境配置</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 主要实现热更新，不用压缩代码，完整的sourceMap</span><span class="token keyword">const</span> Path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> Webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span><span class="token keyword">const</span> WebpackConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./webpack.config'</span><span class="token punctuation">)</span><span class="token keyword">const</span> WebpackMerge <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack-merge'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">WebpackMerge</span><span class="token punctuation">(</span>WebpackConfig<span class="token punctuation">,</span> <span class="token punctuation">{</span>  mode<span class="token punctuation">:</span> <span class="token string">'development'</span><span class="token punctuation">,</span>  devtool<span class="token punctuation">:</span> <span class="token string">'cheap-module-eval-source-map'</span><span class="token punctuation">,</span>  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>    port<span class="token punctuation">:</span> <span class="token number">3000</span><span class="token punctuation">,</span>    hot<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token keyword">static</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>      directory<span class="token punctuation">:</span> Path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">Webpack<span class="token punctuation">.</span>HashedModuleIdsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="3-2、生产环境配置"><a href="#3-2、生产环境配置" class="headerlink" title="3.2、生产环境配置"></a>3.2、生产环境配置</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//实现css,js代码压缩</span><span class="token keyword">const</span> Path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> WebpackConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./webpack.config'</span><span class="token punctuation">)</span><span class="token keyword">const</span> WebpackMerge <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack-merge'</span><span class="token punctuation">)</span><span class="token keyword">const</span> CopyWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'copy-webpack-plugin'</span><span class="token punctuation">)</span><span class="token keyword">const</span> OptimizeCssAssetsWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'optimize-css-assets-webpack-plugin'</span><span class="token punctuation">)</span><span class="token keyword">const</span> UglifyJsPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'uglifyjs-webpack-plugin'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">WebpackMerge</span><span class="token punctuation">(</span>  WebpackConfig<span class="token punctuation">,</span>  <span class="token punctuation">{</span>    mode<span class="token punctuation">:</span> <span class="token string">'production'</span><span class="token punctuation">,</span>    devtool<span class="token punctuation">:</span> <span class="token string">'cheap-module-source-map'</span><span class="token punctuation">,</span>    plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token keyword">new</span> <span class="token class-name">CopyWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token keyword">from</span><span class="token punctuation">:</span> Path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>            __dirname<span class="token punctuation">,</span>            <span class="token string">'../public'</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>          to<span class="token punctuation">:</span> Path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>            __dirname<span class="token punctuation">,</span>            <span class="token string">'../dist'</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    optimization<span class="token punctuation">:</span> <span class="token punctuation">{</span>      minimizer<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token keyword">new</span> <span class="token class-name">UglifyJsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          cache<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>          parallel<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>          sourceMap<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">OptimizeCssAssetsWebpackPlugin</span><span class="token punctuation">(</span>          <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      splitChunks<span class="token punctuation">:</span> <span class="token punctuation">{</span>        chunks<span class="token punctuation">:</span> <span class="token string">'all'</span><span class="token punctuation">,</span>        cacheGroups<span class="token punctuation">:</span> <span class="token punctuation">{</span>          libs<span class="token punctuation">:</span> <span class="token punctuation">{</span>            name<span class="token punctuation">:</span> <span class="token string">'chunk-libs'</span><span class="token punctuation">,</span>            test<span class="token punctuation">:</span> <span class="token regex">/[\\/]node_modules[\\/]/</span><span class="token punctuation">,</span>            priority<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>            chunks<span class="token punctuation">:</span> <span class="token string">'initial'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//只打包初始时依赖的第三方库</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="3-3、package-json"><a href="#3-3、package-json" class="headerlink" title="3.3、package.json"></a>3.3、package.json</h3><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"webpack_4"</span><span class="token punctuation">,</span>  <span class="token string">"version"</span><span class="token punctuation">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>  <span class="token string">"description"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token string">"main"</span><span class="token punctuation">:</span> <span class="token string">"index.js"</span><span class="token punctuation">,</span>  <span class="token string">"scripts"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"test"</span><span class="token punctuation">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span><span class="token punctuation">,</span>    <span class="token string">"dev"</span><span class="token punctuation">:</span> <span class="token string">"webpack-dev-server --config build/webpack.config.js --open"</span><span class="token punctuation">,</span>    <span class="token string">"build:prod"</span><span class="token punctuation">:</span> <span class="token string">"webpack --config build/webpack.prod.js"</span><span class="token punctuation">,</span>    <span class="token string">"build:dev"</span><span class="token punctuation">:</span> <span class="token string">"webpack --config build/webpack.dev.js"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">"keywords"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string">"author"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token string">"license"</span><span class="token punctuation">:</span> <span class="token string">"ISC"</span><span class="token punctuation">,</span>  <span class="token string">"devDependencies"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"@babel/core"</span><span class="token punctuation">:</span> <span class="token string">"^7.18.2"</span><span class="token punctuation">,</span>    <span class="token string">"@babel/preset-env"</span><span class="token punctuation">:</span> <span class="token string">"^7.18.2"</span><span class="token punctuation">,</span>    <span class="token string">"@webpack-cli/serve"</span><span class="token punctuation">:</span> <span class="token string">"^1.6.1"</span><span class="token punctuation">,</span>    <span class="token string">"autoprefixer"</span><span class="token punctuation">:</span> <span class="token string">"^8.6.5"</span><span class="token punctuation">,</span>    <span class="token string">"babel-loader"</span><span class="token punctuation">:</span> <span class="token string">"^8.2.5"</span><span class="token punctuation">,</span>    <span class="token string">"babel-preset-es2015"</span><span class="token punctuation">:</span> <span class="token string">"^6.24.1"</span><span class="token punctuation">,</span>    <span class="token string">"clean-webpack-plugin"</span><span class="token punctuation">:</span> <span class="token string">"^4.0.0"</span><span class="token punctuation">,</span>    <span class="token string">"copy-webpack-plugin"</span><span class="token punctuation">:</span> <span class="token string">"^5.1.2"</span><span class="token punctuation">,</span>    <span class="token string">"css-loader"</span><span class="token punctuation">:</span> <span class="token string">"^3.6.0"</span><span class="token punctuation">,</span>    <span class="token string">"file-loader"</span><span class="token punctuation">:</span> <span class="token string">"^4.3.0"</span><span class="token punctuation">,</span>    <span class="token string">"html-webpack-plugin"</span><span class="token punctuation">:</span> <span class="token string">"^4.5.2"</span><span class="token punctuation">,</span>    <span class="token string">"less"</span><span class="token punctuation">:</span> <span class="token string">"^4.1.2"</span><span class="token punctuation">,</span>    <span class="token string">"less-loader"</span><span class="token punctuation">:</span> <span class="token string">"^5.0.0"</span><span class="token punctuation">,</span>    <span class="token string">"mini-css-extract-plugin"</span><span class="token punctuation">:</span> <span class="token string">"^0.9.0"</span><span class="token punctuation">,</span>    <span class="token string">"optimize-css-assets-webpack-plugin"</span><span class="token punctuation">:</span> <span class="token string">"^5.0.8"</span><span class="token punctuation">,</span>    <span class="token string">"postcss-loader"</span><span class="token punctuation">:</span> <span class="token string">"^4.3.0"</span><span class="token punctuation">,</span>    <span class="token string">"style-loader"</span><span class="token punctuation">:</span> <span class="token string">"^2.0.0"</span><span class="token punctuation">,</span>    <span class="token string">"uglifyjs-webpack-plugin"</span><span class="token punctuation">:</span> <span class="token string">"^2.2.0"</span><span class="token punctuation">,</span>    <span class="token string">"url-loader"</span><span class="token punctuation">:</span> <span class="token string">"^4.1.1"</span><span class="token punctuation">,</span>    <span class="token string">"vue"</span><span class="token punctuation">:</span> <span class="token string">"^2.6.14"</span><span class="token punctuation">,</span>    <span class="token string">"vue-loader"</span><span class="token punctuation">:</span> <span class="token string">"^15.7.0"</span><span class="token punctuation">,</span>    <span class="token string">"vue-style-loader"</span><span class="token punctuation">:</span> <span class="token string">"^4.1.3"</span><span class="token punctuation">,</span>    <span class="token string">"vue-template-compiler"</span><span class="token punctuation">:</span> <span class="token string">"^2.6.14"</span><span class="token punctuation">,</span>    <span class="token string">"webpack"</span><span class="token punctuation">:</span> <span class="token string">"^4.46.0"</span><span class="token punctuation">,</span>    <span class="token string">"webpack-cli"</span><span class="token punctuation">:</span> <span class="token string">"^4.9.2"</span><span class="token punctuation">,</span>    <span class="token string">"webpack-dev-server"</span><span class="token punctuation">:</span> <span class="token string">"^4.9.0"</span><span class="token punctuation">,</span>    <span class="token string">"webpack-merge"</span><span class="token punctuation">:</span> <span class="token string">"^4.2.2"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">"dependencies"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"@babel/polyfill"</span><span class="token punctuation">:</span> <span class="token string">"^7.12.1"</span><span class="token punctuation">,</span>    <span class="token string">"@vue/compiler-sfc"</span><span class="token punctuation">:</span> <span class="token string">"^3.2.36"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-4、优化配置-TODO"><a href="#3-4、优化配置-TODO" class="headerlink" title="3.4、优化配置 TODO"></a>3.4、优化配置 TODO</h3><h2 id="4、配置路由-vue-router"><a href="#4、配置路由-vue-router" class="headerlink" title="4、配置路由 vue-router"></a>4、配置路由 vue-router</h2><ul><li><code>npm i -D vue-router@3</code></li></ul><h3 id="4-1、src下新增router文件夹，配置路由文件"><a href="#4-1、src下新增router文件夹，配置路由文件" class="headerlink" title="4.1、src下新增router文件夹，配置路由文件"></a>4.1、src下新增router文件夹，配置路由文件</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token keyword">import</span> Home <span class="token keyword">from</span> <span class="token string">'@/components/Home.vue'</span><span class="token keyword">import</span> Hello <span class="token keyword">from</span> <span class="token string">'@/components/Hello.vue'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> Home    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">'/hello'</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> Hello    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> router</code></pre><h3 id="4-2、main-js引入router-components文件夹下新增两个组件，在根组件引用"><a href="#4-2、main-js引入router-components文件夹下新增两个组件，在根组件引用" class="headerlink" title="4.2、main.js引入router, components文件夹下新增两个组件，在根组件引用"></a>4.2、main.js引入router, components文件夹下新增两个组件，在根组件引用</h3><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span><span class="token operator">&lt;</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"container"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>msg<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>router<span class="token operator">-</span>link to<span class="token operator">=</span><span class="token string">"/"</span><span class="token operator">></span>首页<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span>    <span class="token operator">&lt;</span>router<span class="token operator">-</span>link to<span class="token operator">=</span><span class="token string">"/hello"</span><span class="token operator">></span>nihao<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> Hello <span class="token keyword">from</span> <span class="token string">'./components/Hello'</span><span class="token keyword">import</span> Home <span class="token keyword">from</span> <span class="token string">'./components/Home'</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'App'</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        msg<span class="token punctuation">:</span> <span class="token string">'测试配置dsad'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    components<span class="token punctuation">:</span> <span class="token punctuation">{</span>      Hello<span class="token punctuation">,</span> Home    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style scoped<span class="token operator">></span>  <span class="token punctuation">.</span>container <span class="token punctuation">{</span>    background<span class="token operator">-</span>color<span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre><h3 id="4-3、最终package-json"><a href="#4-3、最终package-json" class="headerlink" title="4.3、最终package.json"></a>4.3、最终package.json</h3><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"webpack_4"</span><span class="token punctuation">,</span>  <span class="token string">"version"</span><span class="token punctuation">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>  <span class="token string">"description"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token string">"main"</span><span class="token punctuation">:</span> <span class="token string">"index.js"</span><span class="token punctuation">,</span>  <span class="token string">"scripts"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"test"</span><span class="token punctuation">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span><span class="token punctuation">,</span>    <span class="token string">"dev"</span><span class="token punctuation">:</span> <span class="token string">"webpack-dev-server --config build/webpack.config.js --open"</span><span class="token punctuation">,</span>    <span class="token string">"build:prod"</span><span class="token punctuation">:</span> <span class="token string">"webpack --config build/webpack.prod.js"</span><span class="token punctuation">,</span>    <span class="token string">"build:dev"</span><span class="token punctuation">:</span> <span class="token string">"webpack --config build/webpack.dev.js"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">"keywords"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string">"author"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token string">"license"</span><span class="token punctuation">:</span> <span class="token string">"ISC"</span><span class="token punctuation">,</span>  <span class="token string">"devDependencies"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"@babel/core"</span><span class="token punctuation">:</span> <span class="token string">"^7.18.2"</span><span class="token punctuation">,</span>    <span class="token string">"@babel/preset-env"</span><span class="token punctuation">:</span> <span class="token string">"^7.18.2"</span><span class="token punctuation">,</span>    <span class="token string">"@webpack-cli/serve"</span><span class="token punctuation">:</span> <span class="token string">"^1.6.1"</span><span class="token punctuation">,</span>    <span class="token string">"autoprefixer"</span><span class="token punctuation">:</span> <span class="token string">"^8.6.5"</span><span class="token punctuation">,</span>    <span class="token string">"babel-loader"</span><span class="token punctuation">:</span> <span class="token string">"^8.2.5"</span><span class="token punctuation">,</span>    <span class="token string">"babel-preset-es2015"</span><span class="token punctuation">:</span> <span class="token string">"^6.24.1"</span><span class="token punctuation">,</span>    <span class="token string">"clean-webpack-plugin"</span><span class="token punctuation">:</span> <span class="token string">"^4.0.0"</span><span class="token punctuation">,</span>    <span class="token string">"copy-webpack-plugin"</span><span class="token punctuation">:</span> <span class="token string">"^5.1.2"</span><span class="token punctuation">,</span>    <span class="token string">"css-loader"</span><span class="token punctuation">:</span> <span class="token string">"^3.6.0"</span><span class="token punctuation">,</span>    <span class="token string">"file-loader"</span><span class="token punctuation">:</span> <span class="token string">"^4.3.0"</span><span class="token punctuation">,</span>    <span class="token string">"html-webpack-plugin"</span><span class="token punctuation">:</span> <span class="token string">"^4.5.2"</span><span class="token punctuation">,</span>    <span class="token string">"less"</span><span class="token punctuation">:</span> <span class="token string">"^4.1.2"</span><span class="token punctuation">,</span>    <span class="token string">"less-loader"</span><span class="token punctuation">:</span> <span class="token string">"^5.0.0"</span><span class="token punctuation">,</span>    <span class="token string">"mini-css-extract-plugin"</span><span class="token punctuation">:</span> <span class="token string">"^0.9.0"</span><span class="token punctuation">,</span>    <span class="token string">"optimize-css-assets-webpack-plugin"</span><span class="token punctuation">:</span> <span class="token string">"^5.0.8"</span><span class="token punctuation">,</span>    <span class="token string">"postcss-loader"</span><span class="token punctuation">:</span> <span class="token string">"^4.3.0"</span><span class="token punctuation">,</span>    <span class="token string">"style-loader"</span><span class="token punctuation">:</span> <span class="token string">"^2.0.0"</span><span class="token punctuation">,</span>    <span class="token string">"uglifyjs-webpack-plugin"</span><span class="token punctuation">:</span> <span class="token string">"^2.2.0"</span><span class="token punctuation">,</span>    <span class="token string">"url-loader"</span><span class="token punctuation">:</span> <span class="token string">"^4.1.1"</span><span class="token punctuation">,</span>    <span class="token string">"vue"</span><span class="token punctuation">:</span> <span class="token string">"^2.6.14"</span><span class="token punctuation">,</span>    <span class="token string">"vue-loader"</span><span class="token punctuation">:</span> <span class="token string">"^15.7.0"</span><span class="token punctuation">,</span>    <span class="token string">"vue-style-loader"</span><span class="token punctuation">:</span> <span class="token string">"^4.1.3"</span><span class="token punctuation">,</span>    <span class="token string">"vue-template-compiler"</span><span class="token punctuation">:</span> <span class="token string">"^2.6.14"</span><span class="token punctuation">,</span>    <span class="token string">"webpack"</span><span class="token punctuation">:</span> <span class="token string">"^4.46.0"</span><span class="token punctuation">,</span>    <span class="token string">"webpack-cli"</span><span class="token punctuation">:</span> <span class="token string">"^4.9.2"</span><span class="token punctuation">,</span>    <span class="token string">"webpack-dev-server"</span><span class="token punctuation">:</span> <span class="token string">"^4.9.0"</span><span class="token punctuation">,</span>    <span class="token string">"webpack-merge"</span><span class="token punctuation">:</span> <span class="token string">"^4.2.2"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">"dependencies"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"@babel/polyfill"</span><span class="token punctuation">:</span> <span class="token string">"^7.12.1"</span><span class="token punctuation">,</span>    <span class="token string">"@vue/compiler-sfc"</span><span class="token punctuation">:</span> <span class="token string">"^3.2.36"</span><span class="token punctuation">,</span>    <span class="token string">"vue-router"</span><span class="token punctuation">:</span> <span class="token string">"^3.5.2"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> vuecli </category>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vuecli </tag>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo简介</title>
      <link href="/2022/060816107.html"/>
      <url>/2022/060816107.html</url>
      
        <content type="html"><![CDATA[<p>官网： <a href="https://hexo.io/">Hexo</a><br>官方文档： <a href="https://hexo.io/docs/">documentation</a><br>社区： <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a><br>反馈： <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h2><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="启动本地服务"><a href="#启动本地服务" class="headerlink" title="启动本地服务"></a>启动本地服务</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="同步至远程仓库"><a href="#同步至远程仓库" class="headerlink" title="同步至远程仓库"></a>同步至远程仓库</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo初识 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
